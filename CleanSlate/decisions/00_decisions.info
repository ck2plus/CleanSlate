This documentation is pretty sparse, sorry. Focus has been simply documenting what's new in 2.8+.

Two new concepts were introduced in 2.8:
* Offmap power decisions - see offmap_powers.info in common/offmap_powers
* Third party decisions

Third party decisions approximate the behavior of interactions that let you select a character that it applies to, such as "stop plot" and "take concubine"
It should work with any targeted decision type, though at this time only characters can be 3rd parties.
In order to make a decision use a 3rd party, you need to set a filter:

third_party_filter = court # only character filters and the new "artifacts" filter are supported
For the AI to be able to use the decision, an AI filter is also needed:
ai_third_party_filter = court

You can also specify if the filter should apply from the ROOT or the FROM scope with the third_party attribute. This attribute will default to FROM if not set.
third_party = ROOT

Beyond that, three sections are made available:

third_party_potential = { # Determines whether a 3rd party is included in the list at all
	ROOT = { # The decision target. You start off in ROOT
	}
	FROM = { # The decision taker
	}
	FROMFROM = { # The third party
	}
}
You can make this show up in the decision's tooltip with "show_third_party_potential = yes". By default it is not displayed, like other potentials. If displayed, the decision can only be selected if there's at least one character meeting the potential
This section will be named with the loc key of the decision + "_third_party". If that doesn't exist, the key "THIRD_PARTY_REQUIREMENTS" will get used instead

These three scopes will also be available in the effect, ai_will_do, and so on, but *not* in potential, from_potential, and allow

third_party_allow = { # Decides if the "Send" button is enabled. Uses the same scopes as the potential
}

third_party_score = { # Decides how "good" this 3rd party is for the decision; used for sorting. Also shown in the UI unless "show_third_party_score = no" is added to the decision. This is a normal MTTH, like ai_will_do
	factor = 1
}
This score is also stored in the variable "local_third_party_score", and can thus be used for triggers and effects

From a performance point of view you will want to make sure the AI's filter is the narrowest possible for your use case. You also want to filter out as many people as possible in from_potential, then potential, since for each step you're checking far more characters

########

Targeted decision filter types:
	court: all characters in the character's host court, including prisoners, and characters currently away (wards, prisoners, etc), except the character themselves
	home_court: all characters in the character's home court, including prisoners, and characters currently away (wards, prisoners, etc), except the character themselves
	vassals: direct vassal rulers of the character's employer
	sub_realm: all characters below the character's employer, except the character themselves
	realm: all characters in the same top realm as the character, except the character themselves
	dynasty: all members of the same dynasty, except the character themselves
	rivals: the character's rivals
	friends: the character's friends
	all: all living characters (Avoid if possible. VERY CPU-HEAVY!), except the character themselves
	liege: the character's liege, unless independent
	religious_head: the character's religious head, unless they themselves are the rel head
	society: the character's society's members, except the character themselves
	spouse: the character's spouse(s)
	vassal_wars: All vassals' wars
	independent_rulers: All independent rulers
	close_relative: Includes children, grandchildren, parents, siblings, and niblings
	none: No one. Mainly useful for banning the AI from using a decision

All filters that say ", except the character themselves" have a version that includes the character; just append "_including_me". E.G., "court_including_me"

########
ai_check_interval = 5		# Determines how seldom the AI checks the decision, in months. By default 1 (every month). This example would make it every 5th month. Note that ai_will_do is the % chance of taking the decision (1 = 100%, 0.5 = 50%) if available when checked, so if you set the interval 5 times higher, you should also set the ai_will_do 5 times higher

== ai_acceptance ==
Patch 3.0 added a new parameter for decisions: ai_acceptance. This is intended to be used for targeted decisions to indicate whether the AI will accept the decision. Note that how the AI responds is unaffected by this system; it is meant as a way to communicate the outcome to the player. It is up to the person scripting to make the AI actually act in accordance with the "yes" or "maybe" shown. Only "no" has a mechanical effect; blocking the decision entirely.
It is defined in the optional ai_acceptance section:

ai_acceptance = {
	factor = 10	# The base score
	yes_threshold = 50 # At what point to switch from "maybe" to "yes". Defaults to 0, meaning it will never be "maybe"
	show_maybe_for_human = no # Whether to always show "maybe" for human targets (defined as ROOT being controlled by a player). Defaults to "yes"
	additive_modifier = { # Any type of modifier can be used, but "additive" is recommended as it is the most intuitive to the end user. Works same way as MTTHs, ai_will_do, and so on
		value = 10
		always = yes
	}
	additive_modifier = {
		value = -10
		always = yes
	}
	additive_modifier = {
		value = -10
		always = no
	}
	additive_modifier = {
		value = -100
		localisation_key = "REASON_WEALTH"
		wealth = 1000
	}
}

If defined, AI acceptance will show in the decision, similar to how it shows for many interactions. The "Do It!" button will be greyed out if the score is below or equal to Zero.
The exact value will be saved to the local variable "local_ai_acceptance_score", similar to how 3rd party score is saved. It will be saved for player-controlled targets as well, even if show_maybe_for_human is used
