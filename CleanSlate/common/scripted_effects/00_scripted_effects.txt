# remove_patrons_effect

# prisoner_mutilate_effect
# jailor_mutilate_effect
# prisoner_torture_effect
# jailor_torture_effect
# jailor_humiliation_effect
# prisoner_humiliation_effect
# prisoner_humiliation_effect

# maim_hand_effect
# mangle_effect

# leave_court_effect
# courtiers_leaving_effect
# leave_council_position_effect
# end_inaccessibility_effect

# unprotected_sex_effect
# unprotected_sex_effect_event_target
# venereal_disease_effect
# venereal_disease_effect_event_target
# impregnate_effect
# impregnate_effect_event_target

# will_not_marry_effect

# female_councilor_effect_1
# female_councilor_effect_2
# female_councilor_effect_3

# remove_prison_reason_effect

# add_cat_effect

# random_accident_death_effect

# print_scope_effect

# add_pet_owl_effect

# increase_council_power_effect
# increase_vassal_freedom_effect

# spawn_good_commander_effect
# spawn_great_commander_effect
# spawn_fantastic_commander_effect
# spawn_fantastic_diplomat_effect
# spawn_fantastic_scholar_effect
# spawn_elder_effect

# raiding_adventurer_war_declaration_effect
# send_final_book_outcome_event_effect

# random_coronation_events_effect

# tiered_prestige_reward_effect
# tiered_piety_reward_effect
# tiered_prestige_negative_effect
# tiered_piety_negative_effect
# tiered_high_piety_negative_effect

# random_antagonizer_slander_roll_effect
# random_antagonizer_slander_effect

# fire_haruspicy_event_effect

# remove_opinions_with_prison_reason_effect

# randomize_ABC_desc_flag_effect
# clr_ABC_desc_flag_effect

# save_beloved_character_effect

# child_of_destiny_journey_start_effect
# child_of_destiny_journey_resume_effect

# pacifists_lose_piety_effect

# add_scarred_tiered_effect
# add_scarred_medium_effect
# add_scarred_high_effect
# add_scarred_start_effect
# add_blood_splatter_effect

# reset_flag_lifestyle_sway_event_effect

# bloodthirsty_tiered_traits_effect
# add_random_tattoo_effect

# spawn_debutante_effect

# transfer_crown_on_abdication_effect

# move_childrens_crusade_region_effect
# spawn_childrens_crusade_light_troops_effect
# spawn_childrens_crusade_heavy_troops_effect

# this_is_becoming_grand_mistress_effect
# this_is_becoming_iron_matron_effect
# this_is_becoming_virago_effect
# this_is_becoming_atoner_effect
# this_is_becoming_manservant_effect
# this_is_becoming_stud_effect
# this_is_becoming_grand_paramour_effect
# this_is_becoming_judicator_effect
# this_is_becoming_subjugator_effect
# this_is_becoming_prim_effect
# this_is_becoming_doll_effect
# this_is_becoming_breeder_effect

# add_lots_thralls_capital_effect
# add_some_thralls_capital_effect
# add_few_thralls_capital_effect

# WL_ritual_hunt_cleanup_effect
# WL_ritual_hunt_flavor_events_effect

# stable_attribute_improvement_effect
# landless_pope_effect

# remove_rain_modifiers_effect
# set_weather_change_cooldown_effect
# set_rain_flag_heavy_effect
# set_rain_flag_light_effect
# set_rain_flag_drought_risk_effect
# set_rain_flag_drought_effect
# change_rain_effect
# clone_weather_to_prev_effect
# calculate_weather_status_in_demesne_effect

# clr_flags_introduce_heir_effect
# murder_bloodline_check_effect

# princely_elective_german_elector_setup_effect
# princely_elective_french_elector_setup_effect
# princely_elective_italian_elector_setup_effect
# princely_elective_spain_elector_setup_effect
# princely_elective_britannia_elector_setup_effect
# princely_elective_apply_elector_setup_effect

# give_random_character_modifier_effect
# assign_random_nickname_effect
# abdicate_holy_order_if_religion_changes_effect

remove_patrons_effect = {
	remove_character_modifier = patron_shiva
	remove_character_modifier = patron_vishnu
	remove_character_modifier = patron_brahma
	remove_character_modifier = patron_kali
	remove_character_modifier = patron_ganesha
	remove_character_modifier = patron_ganga
}

prisoner_mutilate_effect = {
	random = {
		chance = 20

		if = {
			limit = {
				NOR = {
					trait = craven
					trait = berserker
				}
			}

			add_trait = craven

			hidden_effect = {
				character_event = { id = 38257 } # Notification: I have become craven
			}
		}
	}

	random_list = {
		80 = {
			if = {
				limit = {
					NOT = { trait = stressed }
				}

				add_trait = stressed

				hidden_effect = {
					character_event = { id = 38282 } # Notification: I have become stressed
				}
			}
		}

		10 = {
			if = {
				limit = {
					NOT = { trait = lunatic }
				}

				add_trait = lunatic

				hidden_effect = {
					character_event = { id = 38304 } # Notification: I am a lunatic
				}
			}
		}

		10 = {
			#no effect
		}
	}

	add_trait = severely_injured
	resolve_severely_injured_effect = yes
}

jailor_mutilate_effect = {
	if = {
		limit = {
			NOR = {
				trait = craven
				trait = berserker
			}
		}

		random = {
			chance = 20

			add_trait = craven

			hidden_effect = {
				character_event = { id = 38257 } # Notification: I have become craven
			}
		}
	}

	add_trait = severely_injured
	resolve_severely_injured_effect = yes

	custom_tooltip = {
		text = might_affect_mental_health_tt

		random_list = {
			80 = { add_trait = stressed }
			10 = { add_trait = lunatic }
			10 = { } # No effect
		}
	}
}

prisoner_torture_effect = {
	add_character_modifier = {
		name = tortured
		years = 2
	}

	random_list = {
		80 = {
			if = {
				limit = {
					NOT = { trait = stressed }
				}

				add_trait = stressed

				hidden_effect = {
					character_event = { id = 38282 } # Notification: I have become stressed
				}
			}
		}

		10 = {
			if = {
				limit = {
					NOR = {
						trait = craven
						trait = berserker
					}
				}

				add_trait = craven

				hidden_effect = {
					character_event = { id = 38257 } # Notification: I have become craven
				}
			}
		}

		5 = {
			if = {
				limit = {
					NOT = { trait = lunatic }
				}

				add_trait = lunatic

				hidden_effect = {
					character_event = { id = 38304 } # Notification: I am a lunatic
				}
			}
		}

		5 = {
			#nothing
		}
	}
}

jailor_torture_effect = {
	add_character_modifier = {
		name = tortured
		years = 2
	}

	random_list = {
		80 = {
			if = {
				limit = { trait = stressed }

				health = -0.25
			}

			add_trait = stressed
		}

		10 = {
			if = {
				limit = {
					OR = {
						trait = craven
						trait = berserker
					}
				}

				health = -0.5
			}
			else = {
				add_trait = craven
			}
		}

		5 = {
			if = {
				limit = { trait = lunatic }

				health = -1.0
			}

			add_trait = lunatic
		}

		5 = {
			#nothing
		}
	}
}

jailor_humiliation_effect = {
	random_list = {
		15 = { add_trait = stressed }
		30 = { add_trait = humble }
		30 = { add_trait = shy }
		25 = { } # Nothing happens
	}
}

prisoner_humiliation_effect = {
	random_list = {
		15 = {
			trigger = {
				NOT = { trait = stressed }
			}

			add_trait = stressed

			hidden_effect = {
				character_event = { id = 38282 } # Notify Stressed
			}
		}

		30 = {
			trigger = {
				NOT = { trait = humble }
			}

			add_trait = humble

			hidden_effect = {
				character_event = { id = 38260 } # Notify Humble
			}
		}

		30 = {
			trigger = {
				NOT = { trait = shy }
			}

			add_trait = shy

			hidden_effect = {
				character_event = { id = 38263 } # Notify Shy
			}
		}

		25 = {
			# Nothing happens
		}
	}
}

maim_hand_effect = {
	if = {
		limit = { has_dlc = "Reapers" }

		if = {
			limit = {
				trait = one_handed
				NOT = { trait = mangled }
			}

			add_trait = mangled

			hidden_effect = {
				character_event = { id = RIP.11505 }
			}
		}
		else_if = {
			limit = {
				NOT = { trait = one_handed }
			}

			add_trait = one_handed

			hidden_effect = {
				character_event = { id = RIP.11502 }
			}
		}
	}
	else = {
		add_trait = maimed
	}

	add_trait = severely_injured
	resolve_severely_injured_effect = yes
}

mangle_effect = {
	if = {
		limit = { has_dlc = "Reapers" }

		if = {
			limit = {
				NOT = { trait = mangled }
			}

			add_trait = mangled

			hidden_tooltip = {
				character_event = { id = RIP.11505 }
			}
		}
	}
	else = {
		add_trait = maimed
	}

	add_trait = severely_injured
	resolve_severely_injured_effect = yes
}

leave_court_effect = {
	reverse_opinion = {
		modifier = opinion_leave
		who = ROOT
	}

	banish = yes

	reverse_remove_opinion = {
		modifier = opinion_leave
		who = ROOT
	}
}

courtiers_leaving_effect = {
	hidden_effect = { # To get a banishment reason
		reverse_opinion = {
			modifier = opinion_leave
			who = ROOT
		}

		banish = yes

		reverse_remove_opinion = {
			modifier = opinion_leave
			who = ROOT
		}
	}

	opinion = {
		modifier = opinion_left_court
		who = ROOT
	}
}

leave_court_and_die_effect = {
	death = { death_reason = death_missing }
}

leave_council_position_effect = {
	trigger_switch = {
		on_trigger = has_job_title

		job_chancellor = { remove_title = job_chancellor }
		job_marshal = { remove_title = job_marshal }
		job_treasurer = { remove_title = job_treasurer }
		job_spymaster = { remove_title = job_spymaster }
		job_spiritual = { remove_title = job_spiritual }
	}

	add_character_modifier = {
		modifier = resigned_in_anger
		years = 2
		hidden = yes
	}
}

end_inaccessibility_effect = {
	if = {
		limit = { trait = in_hiding }

		remove_trait = in_hiding
		clr_flag = do_not_disturb

		add_character_modifier = {
			name = went_out_of_hiding_timer
			duration = 180
			hidden = yes
		}

		hidden_effect = {
			character_event = { id = CM.6400 } # Notify plotters and family
		}
	}

	if = {
		limit = { has_character_modifier = in_seclusion }

		remove_character_modifier = in_seclusion

		if = {
			limit = { is_ruler = yes }

			clr_flag = do_not_disturb
			clr_flag = exposed_to_outside
			clr_flag = seclusion_piling_corpses
			clr_flag = seclusion_lazy_seduction
			clr_flag = seclusion_nightmares
			clr_flag = seclusion_gained_friend
			clr_flag = seclusion_child_has_lover
			clr_flag = seclusion_tunnel
			clr_flag = seclusion_food_events

			custom_tooltip = { text = open_the_gates_info_tooltip }

			add_character_modifier = {
				name = recently_opened_gates
				years = 1
			}

			hidden_effect = {
				clr_flag = seclusion_events_on
				character_event = { id = RIP.11557 days = 40 random = 20 } # Clears starvation modifiers

				any_courtier = {
					clr_flag = seclusion_events_on
					remove_character_modifier = in_seclusion
					character_event = { id = RIP.11557 days = 40 random = 20 } # Clears starvation modifiers
				}

				any_vassal = {
					limit = {
						OR = {
							is_councillor = yes
							has_minor_title = title_councilmember_king
							has_minor_title = title_councilmember_emperor
						}

						is_landed = yes
						liege = { character = ROOT }
						NOT = { has_character_modifier = in_seclusion }

						host = {
							NOT = { character = ROOT }
						}
					}

					force_host = ROOT
				}
			}

			if = { # Rejoin your liege's court if both of you are not in seclusion
				limit = {
					OR = {
						is_councillor = yes
						has_minor_title = title_councilmember_king
						has_minor_title = title_councilmember_emperor
					}

					liege = {
						NOT = { has_character_modifier = in_seclusion }
					}
				}

				force_host = liege
			}
		}
	}
}

# Impregnation and venereal disease handling between FROM and ROOT
unprotected_sex_effect = {
	random = {
		chance = 50
		venereal_disease_effect = yes
	}

	random = {
		chance = 10

		mult_modifier = {
			factor = 2
			is_fertile_trigger = yes
		}
		mult_modifier = {
			factor = 2
			FROM = { is_fertile_trigger = yes }
		}
		mult_modifier = {
			factor = 0.5
			is_infertile_trigger = yes
		}
		mult_modifier = {
			factor = 0.5
			FROM = { is_infertile_trigger = yes }
		}

		impregnate_effect = yes
	}
}

# Impregnation and venereal disease handling between event_target:sex_partner and THIS
unprotected_sex_effect_event_target = {
	random = {
		chance = 50
		venereal_disease_effect_event_target = yes
	}

	random = {
		chance = 10

		mult_modifier = {
			factor = 2
			is_fertile_trigger = yes
		}
		mult_modifier = {
			factor = 2
			event_target:sex_partner = { is_fertile_trigger = yes }
		}
		mult_modifier = {
			factor = 0.5
			is_infertile_trigger = yes
		}
		mult_modifier = {
			factor = 0.5
			event_target:sex_partner = { is_infertile_trigger = yes }
		}

		impregnate_effect_event_target = yes
	}
}

# Transfers venereal diseases between FROM and ROOT
venereal_disease_effect = {
	# Great pox and Aztec disease for FROM
	if = {
		limit = {
			FROM = {
				NOR = {
					has_flag = developing_illness
					has_flag = disease_not_serious
				}
			}
		}

		if = {
			limit = { trait = syphilitic }
			FROM = { give_syphilitic_effect = yes }
		}
		if = {
			limit = { trait = has_aztec_disease }
			FROM = { give_has_aztec_disease_effect = yes }
		}
	}

	# Great pox and Aztec disease for ROOT
	if = {
		limit = {
			NOR = {
				has_flag = developing_illness
				has_flag = disease_not_serious
			}
		}

		if = {
			limit = { FROM = { trait = syphilitic } }
			give_syphilitic_effect = yes
		}
		if = {
			limit = { FROM = { trait = has_aztec_disease } }
			give_has_aztec_disease_effect = yes
		}
	}

	# Lover's pox
	if = {
		limit = {
			OR = {
				trait = lovers_pox
				has_character_modifier = minor_disease_herpes
			}

			FROM = {
				NOR = {
					trait = lovers_pox
					has_character_modifier = minor_disease_herpes
				}
			}
		}

		hidden_effect = {
			FROM = {
				character_event = { id = 6359 days = 15 random = 5 }
			}
		}
	}
	if = {
		limit = {
			FROM = {
				OR = {
					trait = lovers_pox
					has_character_modifier = minor_disease_herpes
				}
			}

			NOR = {
				trait = lovers_pox
				has_character_modifier = minor_disease_herpes
			}
		}

		hidden_effect = {
			character_event = { id = 6359 days = 15 random = 5 }
		}
	}
}

# Transfers venereal diseases between event_target:sex_partner and THIS
venereal_disease_effect_event_target = {
	# Great pox and Aztec disease for sex_partner
	if = {
		limit = {
			event_target:sex_partner = {
				NOR = {
					has_flag = developing_illness
					has_flag = disease_not_serious
				}
			}
		}

		if = {
			limit = { trait = syphilitic }
			event_target:sex_partner = { give_syphilitic_effect = yes }
		}

		if = {
			limit = { trait = has_aztec_disease }
			event_target:sex_partner = { give_has_aztec_disease_effect = yes }
		}
	}

	# Great pox and Aztec disease for THIS
	if = {
		limit = {
			NOR = {
				has_flag = developing_illness
				has_flag = disease_not_serious
			}
		}

		if = {
			limit = { event_target:sex_partner = { trait = syphilitic } }
			give_syphilitic_effect = yes
		}

		if = {
			limit = { event_target:sex_partner = { trait = has_aztec_disease } }
			give_has_aztec_disease_effect = yes
		}
	}

	# Lover's pox
	if = {
		limit = {
			OR = {
				trait = lovers_pox
				has_character_modifier = minor_disease_herpes
			}

			event_target:sex_partner = {
				NOR = {
					trait = lovers_pox
					has_character_modifier = minor_disease_herpes
				}
			}
		}

		hidden_tooltip = {
			event_target:sex_partner = {
				character_event = { id = 6359 days = 15 random = 5 }
			}
		}
	}
	if = {
		limit = {
			event_target:sex_partner = {
				OR = {
					trait = lovers_pox
					has_character_modifier = minor_disease_herpes
				}
			}

			NOR = {
				trait = lovers_pox
				has_character_modifier = minor_disease_herpes
			}
		}

		hidden_tooltip = {
			character_event = { id = 6359 days = 15 random = 5 }
		}
	}
}

# Tries to impregnate either ROOT or FROM if all conditions are met
impregnate_effect = {
	if = {
		limit = { is_opposite_sex = FROM }

		# If ROOT is a female which can get pregnant
		if = {
			limit = {
				is_female = yes
				age < 45
				is_pregnant = no
				health >= 3
				FROM = { NOT = { trait = eunuch } }
			}

			# ROOT is not consort/spouse of anyone or is consort/spouse of FROM
			if = {
				limit = {
					trigger_if = {
						limit = { is_consort = yes }
						is_consort = FROM
					}
					trigger_else_if = {
						limit = { is_married = yes }
						is_married = FROM
					}
				}
				FROM = { impregnate = ROOT }
			}

			# ROOT is consort/spouse of someone else than FROM
			if = {
				limit = {
					trigger_if = {
						limit = { is_married = yes }
					 	NOT = { is_married = FROM }
					}
					trigger_else = {
						is_consort = yes
						NOT = { is_consort = FROM }
					}
				}
				FROM = { impregnate_cuckoo = ROOT }
			}
		}

		# If FROM is a female who can get pregnant
		if = {
			limit = {
				FROM = {
					is_female = yes
					age < 45
					is_pregnant = no
					health >= 3

					ROOT = {
						NOT = { trait = eunuch }
					}
				}
			}

			# FROM is not consort/spouse of anyone or is consort/spouse of ROOT
			if = {
				limit = {
					FROM = {
						trigger_if = {
							limit = { is_married = yes }
							is_married = ROOT
						}
						trigger_else_if = {
							limit = { is_consort = yes }
							is_consort = ROOT
						}
					}
				}
				impregnate = FROM
			}

			# FROM is consort/spouse of someone else than ROOT
			if = {
				limit = {
					FROM = {
						trigger_if = {
							limit = { is_married = yes }
							NOT = { is_married = ROOT }
						}
						trigger_else = {
							is_consort = yes
							NOT = { is_consort = ROOT }
						}
					}
				}

				impregnate_cuckoo = FROM
			}
		}
	}
}

# Tries to impregnate either event_target:sex_partner or THIS if all conditions are met
impregnate_effect_event_target = {
	if = {
		limit = { is_opposite_sex = event_target:sex_partner }

		# If THIS is a female who can get pregnant
		if = {
			limit = {
				is_female = yes
				age < 45
				is_pregnant = no
				health >= 3

				event_target:sex_partner = {
					NOT = { trait = eunuch }
				}
			}

			# THIS is not consort/spouse of anyone or is consort/spouse of event_target:sex_partner
			if = {
				limit = {
					trigger_if = {
						limit = { is_married = yes }
						is_married = event_target:sex_partner
					}
					trigger_else_if = {
						limit = { is_consort = yes }
						is_consort = event_target:sex_partner
					}
				}

				event_target:sex_partner = { impregnate = PREV }
			}

			# THIS is consort/spouse of someone else than event_target:sex_partner
			if = {
				limit = {
					trigger_if = {
						limit = { is_married = yes }
						NOT = { is_married = event_target:sex_partner }
					}
					trigger_else = {
						is_consort = yes
						NOT = { is_consort = event_target:sex_partner }
					}
				}

				event_target:sex_partner = { impregnate_cuckoo = PREV }
			}
		}

		# If event_target:sex_partner is a female who can get pregnant
		if = {
			limit = {
				event_target:sex_partner = {
					is_female = yes
					age < 45
					is_pregnant = no
					health >= 3

					PREV = {
						NOT = { trait = eunuch }
					}
				}
			}

			# event_target:sex_partner is not consort/spouse of anyone or is consort/spouse of THIS
			if = {
				limit = {
					event_target:sex_partner = {
						trigger_if = {
							limit = { is_married = yes }
							is_married = PREV
						}
						trigger_else = {
							is_consort = yes
							is_consort = PREV
						}
					}
				}

				impregnate = event_target:sex_partner
			}

			# event_target:sex_partner is consort/spouse of someone else than THIS
			if = {
				limit = {
					event_target:sex_partner = {
						trigger_if = {
							limit = { is_married = yes }
							NOT = { is_married = PREV }
						}
						trigger_else = {
							is_consort = yes
							NOT = { is_consort = PREV }
						}
					}
				}

				impregnate_cuckoo = event_target:sex_partner
			}
		}
	}
}

will_not_marry_effect = {
	add_character_modifier = {
		modifier = will_not_marry
		duration = -1
	}
	add_trait = cannot_marry
}

female_councilor_effect_1 = {
	reverse_opinion = {
		modifier = opinion_given_council_position_1
		who = FROM
		years = 5
	}
	add_character_modifier = {
		name = scandalous_councillor_1
		months = 60
	}
}

female_councilor_effect_2 = {
	reverse_opinion = {
		modifier = opinion_given_council_position_2
		who = FROM
		years = 5
	}
	add_character_modifier = {
		name = scandalous_councillor_2
		months = 60
	}
}

female_councilor_effect_3 = {
	reverse_opinion = {
		modifier = opinion_given_council_position_3
		who = FROM
		years = 5
	}
	add_character_modifier = {
		name = scandalous_councillor_3
		months = 60
	}
}

# Use to remove any opinion giving a prison reason. Must set appropriate event targets before using this effect.
remove_prison_reason_effect = {
	event_target:remove_prison_reason_effect_accuser = {
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_traitor }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_rebel_traitor }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_dishonorable }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_regicide_traitor }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_fatwa_target }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_refused_order }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_witch }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_takfir }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_unfaithful_wife }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_cuckolded }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_charge_heresiarch }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_charge_infidel }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_charge_deviant }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_charge_illegitimate }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_charge_traitor }
		remove_opinion = { who = event_target:remove_prison_reason_effect_accused modifier = opinion_charge_slanderer }
	}
}

add_cat_effect = {
	if = {
		limit = {
			NOT = { has_character_modifier = pet_cat }
		}

		add_character_modifier = {
			name = pet_cat
			duration = -1
		}

		hidden_effect = {
			character_event = { id = 77802 days = 3000 random = 2000 } # Cat dies
			character_event = { id = 77861 days = 30 random = 100 } # Cat & dog
		}
	}
}

random_accident_death_effect = {
	tooltip = {
		death = {
			death_reason = death_accident
		}
	}

	random_list = {
		10 = {
			trigger	= {
				host = {
					capital_scope = {
						NOT = { region = world_africa }
					}
				}
			}

			death = {
				death_reason = death_accident_drowning
			}
		}

		10 = {
			trigger = {
				host = {
					capital_scope = {
						NOT = { region = world_africa }
					}
				}
			}

			death = {
				death_reason = death_accident_bear
			}
		}

		10 = {
			death = {
				death_reason = death_accident_boar
			}
		}

		10 = {
			death = {
				death_reason = death_accident_fall
			}
		}

		10 = {
			death = {
				death_reason = death_accident_arrow
			}
		}

		10 = {
			death = {
				death_reason = death_accident_snakes
			}
		}

		10 = {
			trigger = {
				host = {
					capital_scope = {
						region = world_india
					}
				}
			}

			death = {
				death_reason = death_accident_tiger
			}
		}
	}
}

print_scope_effect = {
	log = "------------------------------"
	log = "- Printing the current scope -"
	log = "- This: [This.GetName][This.GetBestName]"
	log = "- Root: [Root.GetName][Root.GetBestName]"
	log = "- Prev: [Prev.GetName][Prev.GetBestName]"
	log = "- PrevPrev: [PrevPrev.GetName][PrevPrev.GetBestName]"
	log = "- PrevPrevPrev: [PrevPrevPrev.GetName][PrevPrevPrev.GetBestName]"
	log = "- PrevPrevPrevPrev: [PrevPrevPrevPrev.GetName][PrevPrevPrevPrev.GetBestName]"
	log = "- From: [From.GetName][From.GetBestName]"
	log = "- FromFrom: [FromFrom.GetName][FromFrom.GetBestName]"
	log = "- FromFromFrom: [FromFromFrom.GetName][FromFromFrom.GetBestName]"
	log = "- FromFromFromFrom: [FromFromFromFrom.GetName][FromFromFromFrom.GetBestName]"
	log = "- Event_target:test_target1: [test_target1.GetName][test_target1.GetBestName]"
	log = "- Event_target:test_target2: [test_target2.GetName][test_target2.GetBestName]"
	log = "- Event_target:test_target3: [test_target3.GetName][test_target3.GetBestName]"
	log = "------------------------------"
}

add_pet_owl_effect = {
	add_character_modifier = {
		name = pet_owl
		duration = -1
	}

	hidden_effect = {
		character_event = {
			id = 77800 # Owl dies
			days = 3500
			random = 2000
		}
	}
}

increase_council_power_effect = {
	custom_tooltip = {
		text = council_power_increased

		# Add the first two available council voting laws
		set_variable = { which = laws_increased value = 0 }

		if = {
			limit = {
				has_law = law_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = law_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}
		if = {
			limit = {
				has_law = war_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = war_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}
		if = {
			limit = {
				has_law = grant_title_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = grant_title_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}
		if = {
			limit = {
				has_law = revoke_title_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = revoke_title_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}
		if = {
			limit = {
				has_law = imprison_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = imprison_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}
		if = {
			limit = {
				has_law = banish_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = banish_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}
		if = {
			limit = {
				has_law = execution_voting_power_0
				check_variable = { which = laws_increased value < 2 }
			}

			add_law_w_cooldown = execution_voting_power_1
			change_variable = { which = laws_increased value = 1 }
		}

		set_variable = { which = laws_increased value = 0 } # Reset to erase on creating save game
	}
}

increase_vassal_freedom_effect = {
	trigger_switch = {
		on_trigger = has_law

		vassal_wars_law_1 = { add_law_w_cooldown = vassal_wars_law_0 }
		vassal_wars_law_2 = { add_law_w_cooldown = vassal_wars_law_1 }
	}
}

spawn_good_commander_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }

		create_random_soldier = {
			random_traits = yes
			dynasty = random
			female = yes
			attributes = {
				diplomacy = 2
				learning = 2
				stewardship = 2
				intrigue = 2
				martial = 8
			}
		}
	}
	else = {
		create_random_soldier = {
			random_traits = yes
			dynasty = random
			female = no
			attributes = {
				diplomacy = 2
				learning = 2
				stewardship = 2
				intrigue = 2
				martial = 8
			}
		}
	}
	new_character = {
		remove_trait = weak
		remove_trait = slow
		remove_trait = imbecile
		remove_trait = dull

		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar

		random_list = { # Flavor Randomization
			35 = {
				# Nothing
			}
			15 = { change_martial = 2 }
			10 = { add_trait = robust }
			10 = { add_trait = duelist }
			10 = { add_trait = hunter }
			5 = { add_trait = strategist }
			5 = { change_martial = 4 }
			5 = {
				trigger = { has_dlc = "Reapers" }
				add_trait = one_eyed
			}
			5 = { add_trait = shrewd }
			3 = { add_trait = giant }
		}

		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }
				add_trait = kshatriya
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					OR = {
						religion = hellenic_pagan
						religion = hellenic_pagan_reformed
						has_religion_feature = religion_astrology
					}
				}
				hidden_effect = { add_western_zodiac_trait_effect = yes }
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}
				random_list = {
					5 =  { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}
		}

		set_flag = invited_soldier
		save_event_target_as = invited_character
	}
}

spawn_great_commander_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }
		create_random_soldier = {
			random_traits = yes
			dynasty = random
			female = yes
			attributes = {
				diplomacy = 3
				learning = 3
				stewardship = 3
				intrigue = 3
				martial = 9
			}
		}
	}
	else = {
		create_random_soldier = {
			random_traits = yes
			dynasty = random
			female = no
			attributes = {
				diplomacy = 3
				learning = 3
				stewardship = 3
				intrigue = 3
				martial = 9
			}
		}
	}
	new_character = {
		remove_trait = weak
		remove_trait = slow
		remove_trait = imbecile
		remove_trait = dull
		remove_trait = dwarf
		remove_trait = giant
		remove_trait = hunchback
		remove_trait = clubfooted
		remove_trait = craven

		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar

		remove_trait = misguided_warrior
		remove_trait = tough_soldier
		remove_trait = skilled_tactician
		remove_trait = brilliant_strategist

		random_list = {
			5  = { add_trait = misguided_warrior }
			10 = { add_trait = tough_soldier }
			20 = { add_trait = skilled_tactician }
			30 = { add_trait = brilliant_strategist }
		}

		random_list = { # Flavor Randomization
			35 = { } # Nothing
			15 = { change_martial = 2 }
			10 = { add_trait = robust }
			10 = { add_trait = duelist }
			10 = { add_trait = hunter }
			5  = { add_trait = strategist }
			5  = { change_martial = 4 }
			5  = {
				trigger = { has_dlc = "Reapers" }
				add_trait = one_eyed
			}
			5  = { add_trait = shrewd }
			1  = { add_trait = giant }
		}

		random_list = {
			50 = { } # Nothing
			10 = { add_trait = narrow_flank_leader }
			10 = { add_trait = defensive_leader }
			10 = { add_trait = experimenter }
			10 = { add_trait = flanker }
			10 = { add_trait = heavy_infantry_leader }
			10 = { add_trait = inspiring_leader }
			10 = { add_trait = organizer }
			10 = { add_trait = siege_leader }
			10 = { add_trait = trickster }
			10 = { add_trait = aggressive_leader }
		}

		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }

				add_trait = kshatriya
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					OR = {
						religion = hellenic_pagan
						religion = hellenic_pagan_reformed
						has_religion_feature = religion_astrology
					}
				}

				hidden_effect = { add_western_zodiac_trait_effect = yes }
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}

				random_list = {
					5  = { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}
		}

		set_flag = invited_soldier
		save_event_target_as = invited_character
	}
}

spawn_fantastic_commander_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }

		create_random_soldier = {
			random_traits = yes
			dynasty = actually_culture
			female = yes
			attributes = {
				diplomacy = 4
				learning = 4
				stewardship = 4
				intrigue = 4
				martial = 12
			}
		}
	}
	else = {
		create_random_soldier = {
			random_traits = yes
			dynasty = actually_culture
			female = no
			attributes = {
				diplomacy = 4
				learning = 4
				stewardship = 4
				intrigue = 4
				martial = 12
			}
		}
	}
	new_character = {
		remove_trait = weak
		remove_trait = slow
		remove_trait = imbecile
		remove_trait = dull
		remove_trait = dwarf
		remove_trait = giant
		remove_trait = hunchback
		remove_trait = clubfooted
		remove_trait = craven
		remove_trait = paranoid

		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar

		remove_trait = misguided_warrior
		remove_trait = tough_soldier
		remove_trait = skilled_tactician

		add_trait = brilliant_strategist

		random_list = {
			20 = { add_trait = robust }
			10 = { add_trait = strong }
			5  = { health = 1 }
		}

		random_list = {
			10 = { add_trait = narrow_flank_leader }
			10 = { add_trait = defensive_leader }
			10 = { add_trait = experimenter }
			10 = { add_trait = flanker }
			10 = { add_trait = heavy_infantry_leader }
			10 = { add_trait = inspiring_leader }
			10 = { add_trait = organizer }
			10 = { add_trait = siege_leader }
			10 = { add_trait = trickster }
			10 = { add_trait = aggressive_leader }
		}

		random_list = { # Flavor Randomization
			20 = {
				add_trait = giant
				add_trait = robust
				add_trait = hunter
				change_martial = 2
				give_nickname = nick_the_giant
			}

			20 = {
				mult_modifier = {
					factor = 0
					NOT = {
						has_dlc = "Reapers"
					}
				}
				add_trait = giant
				add_trait = robust
				add_trait = strategist
				add_trait = one_eyed
				change_martial = 1
				give_nickname = nick_the_cyclops
			}

			20 = {
				add_trait = holy_warrior
				add_trait = scarred
				change_martial = 3
				give_nickname = nick_the_hammer
			}

			20 = {
				add_trait = brave
				add_trait = poet
				change_martial = 2
				give_nickname = nick_the_fearless
			}

			20 = {
				add_trait = robust
				remove_trait = temperate
				add_trait = wroth
				add_trait = falconer
				change_martial = 1
				give_nickname = nick_the_ill_tempered
			}

			20 = {
				add_trait = unyielding_leader
				remove_trait = wroth
				add_trait = patient
				change_martial = 2
				give_nickname = nick_the_defender
			}

			20 = {
				add_trait = aggressive_leader
				remove_trait = patient
				add_trait = wroth
				change_martial = 3
				give_nickname = nick_the_destroyer
			}

			20 = {
				add_trait = shrewd
				add_trait = brave
				change_martial = 2
				give_nickname = nick_the_brave
			}

			20 = {
				add_trait = robust
				add_trait = strategist
				change_martial = 1
				give_nickname = nick_the_strong
			}

			20 = {
				add_trait = genius
				add_trait = socializer
				add_trait = poet
				change_martial = 4
				give_nickname = nick_the_noble
			}

			20 = {
				add_trait = blinded
				add_trait = strategist
				add_trait = genius
				change_martial = 4
				give_nickname = nick_the_blind
			}

			20 = {
				remove_trait = humble
				add_trait = proud
				add_trait = duelist
				change_martial = 2
				give_nickname = nick_the_proud
			}

			20 = {
				add_trait = hunter
				add_trait = shrewd
				change_martial = 3
				give_nickname = nick_the_hunter
			}

			20 = {
				mult_modifier = {
					factor = 0
					NOT = {
						has_dlc = "Reapers"
					}
				}
				add_trait = disfigured
				add_trait = scarred
				add_trait = genius
				change_martial = 2
				change_intrigue = 12
				give_nickname = nick_of_a_thousand_faces
			}

			20 = {
				add_trait = genius
				add_trait = clubfooted
				change_martial = 1
				give_nickname = nick_the_bear
			}

			20 = {
				add_trait = trusting
				add_trait = quick
				change_martial = 4
				give_nickname = nick_the_loyal
			}

			20 = {
				add_trait = ugly
				add_trait = strong
				add_trait = duelist
				change_martial = 1
				give_nickname = nick_the_boar
			}
			20 = {
				add_trait = fair
				add_trait = strategist
				change_martial = 4
				give_nickname = nick_the_lion
			}

			20 = {
				add_trait = brave
				add_trait = duelist
				change_martial = 3
				give_nickname = nick_the_bold
			}

			20 = {
				add_trait = shrewd
				add_trait = hedonist
				change_martial = 4
				give_nickname = nick_the_quarreller
			}

			20 = {
				add_trait = shrewd
				add_trait = cavalry_leader
				change_martial = 2
				give_nickname = nick_the_wolf
			}
		}

		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }

				add_trait = kshatriya
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}

				random_list = {
					5  = { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}
		}

		set_flag = invited_soldier
		save_event_target_as = invited_character
	}
}

spawn_fantastic_diplomat_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }

		create_random_diplomat = {
			random_traits = yes
			dynasty = actually_culture
			female = yes
			attributes = {
				diplomacy = 12
				learning = 4
				stewardship = 4
				intrigue = 4
				martial = 4
			}
		}
	}
	else = {
		create_random_diplomat = {
			random_traits = yes
			dynasty = actually_culture
			female = no
			attributes = {
				diplomacy = 12
				learning = 4
				stewardship = 4
				intrigue = 4
				martial = 4
			}
		}
	}
	new_character = {
		remove_trait = weak
		remove_trait = slow
		remove_trait = imbecile
		remove_trait = dull
		remove_trait = dwarf
		remove_trait = giant
		remove_trait = hunchback
		remove_trait = clubfooted
		remove_trait = craven
		remove_trait = paranoid

		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar

		remove_trait = naive_appeaser
		remove_trait = underhanded_rogue
		remove_trait = charismatic_negotiator

		add_trait = grey_eminence

		random_list = {
			27 = { add_trait = shrewd }
			3  = { add_trait = quick }
			70 = { health = 1 }
		}

		if = {
			limit = {
				has_global_flag = christian_crusades_unlocked

				OR = {
					religion = catholic
					religion = fraticelli
				}
			}

			random = {
				chance = 20
				add_trait = crusader
			}
		}

		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }

				add_trait = kshatriya
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}

				random_list = {
					5  = { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}
		}

		set_flag = invited_soldier
		save_event_target_as = invited_character
	}
}

spawn_fantastic_scholar_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }

		create_random_priest = {
			random_traits = yes
			dynasty = actually_culture
			female = yes
			attributes = {
				diplomacy = 4
				learning = 12
				stewardship = 4
				intrigue = 4
				martial = 4
			}
		}
	}
	else = {
		create_random_priest = {
			random_traits = yes
			dynasty = actually_culture
			female = no
			attributes = {
				diplomacy = 4
				learning = 12
				stewardship = 4
				intrigue = 4
				martial = 4
			}
		}
	}
	new_character = {
		remove_trait = weak
		remove_trait = slow
		remove_trait = imbecile
		remove_trait = dull
		remove_trait = dwarf
		remove_trait = giant
		remove_trait = hunchback
		remove_trait = clubfooted
		remove_trait = craven
		remove_trait = paranoid

		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar

		remove_trait = detached_priest
		remove_trait = martial_cleric
		remove_trait = scholarly_theologian

		add_trait = mastermind_theologian

		random_list = {
			27 = { add_trait = shrewd }
			3  = { add_trait = quick }
			70 = { change_diplomacy = 1 }
		}

		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }

				add_trait = brahmin
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}

				random_list = {
					5  = { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}
		}

		set_flag = invited_soldier
		save_event_target_as = invited_character
	}
}

spawn_elder_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }

		create_random_priest = {
			random_traits = yes
			dynasty = actually_culture
			female = yes
			age = 50
			attributes = {
				diplomacy = 4
				learning = 10
				stewardship = 6
				intrigue = 4
				martial = 4
			}
		}
	}
	else_if = {
		limit = { has_religion_feature = religion_patriarchal }

		create_random_priest = {
			random_traits = yes
			dynasty = actually_culture
			female = no
			age = 50
			attributes = {
				diplomacy = 4
				learning = 10
				stewardship = 6
				intrigue = 4
				martial = 4
			}
		}
	}
	else = {
		random_list = {
			50 = {
				create_random_priest = {
					random_traits = yes
					dynasty = actually_culture
					female = no
					age = 50
					attributes = {
						diplomacy = 4
						learning = 10
						stewardship = 6
						intrigue = 4
						martial = 4
					}
				}
			}

			50 = {
				create_random_priest = {
					random_traits = yes
					dynasty = actually_culture
					female = yes
					age = 50
					attributes = {
						diplomacy = 4
						learning = 10
						stewardship = 6
						intrigue = 4
						martial = 4
					}
				}
			}
		}
	}

	new_character = {
		remove_trait = weak
		remove_trait = slow
		remove_trait = imbecile
		remove_trait = dull
		remove_trait = dwarf
		remove_trait = giant
		remove_trait = hunchback
		remove_trait = clubfooted
		remove_trait = craven
		remove_trait = paranoid

		remove_trait = mystic
		remove_trait = socializer
		remove_trait = gamer
		remove_trait = hedonist
		remove_trait = duelist
		remove_trait = hunter
		remove_trait = strategist
		remove_trait = administrator
		remove_trait = architect
		remove_trait = gardener
		remove_trait = schemer
		remove_trait = impaler
		remove_trait = seducer
		remove_trait = seductress
		remove_trait = theologian
		remove_trait = scholar

		remove_trait = detached_priest
		remove_trait = martial_cleric
		remove_trait = scholarly_theologian
		remove_trait = mastermind_theologian

		add_character_modifier = {
			name = elder_long_life_modifier
			years = 100
		}
		give_nickname = nick_the_elder

		random_list = {
			50 = { add_trait = martial_cleric }
			25 = { add_trait = scholarly_theologian }
			10 = { add_trait = mastermind_theologian }
		}

		random_list = {
			5  = { add_trait = stubborn }
			1  = { add_trait = mystic }
			1  = { add_trait = hunchback }
			1  = { add_trait = ugly }
			10 = { add_scarred_tiered_effect = yes }
			70 = { change_stewardship = 1 }
		}

		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }

				add_trait = brahmin
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}

				random_list = {
					5  = { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}

			if = { # Assign African face paint
				limit = {
					OR = {
						religion = west_african_pagan
						religion = west_african_pagan_reformed
						has_religion_feature = religion_animistic
					}
				}

				random_list = {
					25 = { } # Nothing
					15 = { add_trait = african_tattoo_1 }
					15 = { add_trait = african_tattoo_2 }
					15 = { add_trait = african_tattoo_3 }
					15 = { add_trait = african_tattoo_4 }
					5  = { add_trait = african_tattoo_5 }
					4  = { add_trait = african_tattoo_6 }
					3  = { add_trait = african_tattoo_7 }
					2  = { add_trait = african_tattoo_8 }
					10 = { add_trait = african_tattoo_9 }
					10 = { add_trait = african_tattoo_10 }
					10 = { add_trait = african_tattoo_11 }
					10 = { add_trait = african_tattoo_12 }
				}

				if = {
					limit = { age < 23 }

					random_list = { # Modifier, if young enough
						10 = { # Nothing
						}

						25 = {
							trigger = {
								OR = {
									trait = african_tattoo_12
									trait = african_tattoo_8
									trait = african_tattoo_2
								}
							}
							add_character_modifier = {
								name = african_adulthood_rites_1
								years = 6
							}
						}

						25 = {
							trigger = {
								OR = {
									trait = african_tattoo_10
									trait = african_tattoo_7
									trait = african_tattoo_1
								}
							}
							add_character_modifier = {
								name = african_adulthood_rites_2
								years = 6
							}
						}

						25 = {
							trigger = {
								OR = {
									trait = african_tattoo_9
									trait = african_tattoo_6
									trait = african_tattoo_3
								}
							}
							add_character_modifier = {
								name = african_adulthood_rites_3
								years = 6
							}
						}

						25 = {
							trigger = {
								OR = {
									trait = african_tattoo_11
									trait = african_tattoo_5
									trait = african_tattoo_4
								}
							}
							add_character_modifier = {
								name = african_adulthood_rites_4
								years = 6
							}
						}
					}
				}
			}
		}

		set_flag = invited_elder
		save_event_target_as = invited_character
	}
}

# Raiding adventurer war declaration effect
raiding_adventurer_war_declaration_effect = {
	custom_tooltip = {
		text = raiding_adventurer_war_declaration_tooltip

		event_target:selling_province = {
			event_target:raiding_adventurer = {
				unsafe_war = {
					target = PREVPREV
					casus_belli = duchy_adventure
					thirdparty_title = PREV
					tier = DUKE
				}

				any_army = {
					set_can_toggle_looting = yes
					set_looting = no
				}
			}
		}

		clr_flag = adventurer_unsafe_duchy_war
		clr_flag = adventurer_safe_duchy_war
		clr_flag = negotiating_with_adventurer

		event_target:raiding_adventurer = {
			clr_flag = raiding_adventurer
		}
	}
}

# TODO: Decide if this is of any use
send_final_book_outcome_event_effect = {
	character_event = { id = JD.10070 days = 565 random = 3650 }
}

random_coronation_events_effect = {
	random_list = {
		# King befriends foreign ruler
		# King befriends vassal
		# King's new acquaintances improve his diplomacy/stewardship
		# King's new acquaintances improve his intrigue/learning
		# King's diplomacy helps him improve opinion of all guests
		# King's new resolve makes him lose slothful/content
		# Proud King's trepidation makes him gain ambitious
		# Child King's flattered and can become haughty or conscientious
		# The coronation_priest approves of the ceremony
		# Temperate/Celibate coronation_priest disapproves of the extravagant ceremony
		# HRE/Francia Emperor gets a talk from the priest about being the heir of Charlemagne (chance for prestige, learning, diligent)
		# The Pope talks to the King about his duties as protector of Christendom (chance to gain zealous, cynical, learning)
		# Child king is taught by foreign ruler about stewardship
		# Two foreign Kings (guests) become (or are) rivals, coronation_ruler with high diplomacy can help them lose rivalry and become his friends
		# Cynical vassal (or wicked priest) annoys the coronation_priest. High diplomacy ruler may help and gain gregarious
		# A knight comes to pledge his service to the new King/Emperor, if ruler is female/child, chance to become friend/lover or increase martial
		# A wise priest joins the court
		# King becomes rival of one of his vassals

		# King is embarrassed by secluded coronation, chance to gain stressed or paranoid
		# King's vassals are offended by secluded coronation (chance to avoid with high diplomacy)
		# Coronation_priest is disappointed by secluded ceremony
		# King is distraught by secluded ceremony (chance to lose ambitious, gain content/slothful)
		# King reflects upon secluded coronation (chance to lose proud, gain humble)
		# King's Councillor becomes his rival due to secluded coronation

		1 = { # No events
			mult_modifier = {
				factor = 0.1
				has_flag = flag_extravagant_coronation
			}

			event_target:coronation_ruler = {
				character_event = {
					id = HF.20366 # Directly fire coronation
					days = 15
				}
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_foreign_friendship
					has_flag = flag_secluded_coronation
					num_of_friends >= 3
				}

				any_independent_ruler = {
					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					NOR = {
						is_rival = ROOT
						is_friend = ROOT
						is_lover = ROOT
						is_married = ROOT
						num_of_friends >= 3
					}

					opinion = { who = FROM value >= -20 }
				}
			}

			character_event = {
				id = HF.20306 # Frendship with foreign ruler guest
			}

			mult_modifier = {
				factor = 2
				num_of_friends > 1
			}
			mult_modifier = {
				factor = 1.5
				tier = EMPEROR
			}
			mult_modifier = {
				factor = 1.5
				trait = gregarious
			}
			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_vassal_friendship
					num_of_friends >= 3
				}

				any_vassal = {
					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					NOR = {
						is_rival = ROOT
						is_friend = ROOT
						is_lover = ROOT
						is_married = ROOT
						num_of_friends >= 3
					}

					opinion = { who = FROM value >= -20 }
				}
			}

			character_event = {
				id = HF.20310 # Frendship with vassal guest
			}

			mult_modifier = {
				factor = 2
				num_of_friends < 1
			}
			mult_modifier = {
				factor = 1.5
				tier = EMPEROR
			}
			mult_modifier = {
				factor = 1.5
				trait = gregarious
			}
			mult_modifier = {
				factor = 0.1
				has_flag = flag_secluded_coronation
			}
			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_diplomacy_boost
					has_flag = flag_secluded_coronation
				}
			}

			character_event = {
				id = HF.20311 # Increase diplomacy/stewardship
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.5
				trait = gregarious
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_learning_boost
					has_flag = flag_secluded_coronation
				}
			}

			character_event = {
				id = HF.20314 # Increase intrigue/learning
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.5
				trait = shy
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_guest_opinions
					has_flag = flag_secluded_coronation
				}
			}

			character_event = {
				id = HF.20316 # Improve guests opinion
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.5
				trait = gregarious
			}
			mult_modifier = {
				factor = 0.75
				diplomacy < 10
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_gain_diligent
					has_flag = flag_secluded_coronation
				}

				OR = {
					trait = content
					trait = slothful
				}
			}

			character_event = {
				id = HF.20321 # Gain diligent
			}

			mult_modifier = {
				factor = 2
				trait = content
				trait = slothful
			}
		}

		4 = {
			trigger = {
				trait = proud

				NOR = {
					has_flag = flag_coronation_gain_ambitious
					has_flag = flag_secluded_coronation
					trait = ambitious
				}
			}

			character_event = {
				id = HF.20322 # Gain ambitious
			}

			mult_modifier = {
				factor = 2
				has_flag = flag_extravagant_coronation
			}
		}

		4 = {
			trigger = {
				is_adult = no

				NOR = {
					has_flag = flag_coronation_haughty_child
					has_flag = flag_secluded_coronation
				}
			}

			character_event = {
				id = HF.20323 # Child becomes haughty
			}

			mult_modifier = {
				factor = 2
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.5
				NOR = {
					trait = haughty
					trait = conscientious
				}
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_priest_approves
					has_flag = flag_coronation_priest_disapproves # Can't approve and disapprove within the course of the same ceremony
					has_flag = flag_secluded_coronation
				}
			}

			character_event = {
				id = HF.20324 # Priest approves of ceremony
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.75
				event_target:coronation_priest = { trait = hedonist }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { trait = gluttonous }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { trait = drunkard }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { trait = gregarious }
			}
		}

		4 = {
			trigger = {
				has_landed_title = e_hre

				NOR = {
					has_flag = flag_coronation_hre_talk
					has_flag = is_charlemagne	# Shouldn't happen anyway, but, just to be safe...
				}
			}

			character_event = {
				id = HF.20326 # Priest talks about responsibilities of HRE
			}

			mult_modifier = {
				factor = 0.5
				has_flag = flag_secluded_coronation
			}
			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { trait = zealous }
			}
		}

		4 = {
			trigger = {
				NOT = { has_flag = flag_coronation_pope_talk }

				event_target:coronation_priest = {
					has_landed_title = k_papal_state
				}
			}

			character_event = {
				id = HF.20327 # Pope talks about responsibilities of Christian King
			}

			mult_modifier = {
				factor = 0.5
				has_flag = flag_secluded_coronation
			}
			mult_modifier = {
				factor = 2
				has_flag = flag_extravagant_coronation
			}
		}

		4 = {
			trigger = {
				is_adult = no

				any_independent_ruler = {
					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					NOT = { is_rival = ROOT }
					stewardship >= 8
					opinion = { who = ROOT value > 0 }
				}

				NOR = {
					has_flag = flag_coronation_foreign_teacher
					has_flag = flag_secluded_coronation
				}
			}

			random_independent_ruler = {
				limit = {
					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}
					NOT = { is_rival = ROOT }
					stewardship >= 8
					opinion = { who = ROOT value >= 0 }
				}

				character_event = {
					id = HF.20328 # Foreign ruler teaches child statemanship
				}
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_priest_disapproves
					has_flag = flag_coronation_priest_approves # Can't approve and disapprove within the course of the same ceremony
					has_flag = flag_secluded_coronation # This event is for disapproving of excess
				}
			}

			character_event = {
				id = HF.20332 # Priests disapproves of ceremony
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 0.25
				NOR = {
					trait = hedonist
					trait = drunkard
					trait = gluttonous
				}
			}
			mult_modifier = {
				factor = 1.5
				trait = hedonist
			}
			mult_modifier = {
				factor = 1.5
				trait = gluttonous
			}
			mult_modifier = {
				factor = 1.5
				trait = drunkard
			}
			mult_modifier = {
				factor = 0.1
				event_target:coronation_priest = { trait = hedonist }
			}
			mult_modifier = {
				factor = 0.5
				event_target:coronation_priest = { trait = gluttonous }
			}
			mult_modifier = {
				factor = 0.5
				event_target:coronation_priest = { trait = drunkard }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { trait = temperate }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { trait = celibate }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { lower_tier_than = KING }
			}
			mult_modifier = {
				factor = 1.5
				event_target:coronation_priest = { religion = fraticelli }
			}
		}

		4 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_diplomatic_incident
					has_flag = flag_secluded_coronation
				}

				any_independent_ruler = {
					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						any_rival = {
							independent = yes
							has_opinion_modifier = {
								who = event_target:coronation_ruler
								modifier = opinion_coronation_guest
							}
						}

						any_independent_ruler = {
							has_opinion_modifier = {
								who = event_target:coronation_ruler
								modifier = opinion_coronation_guest
							}

							reverse_opinion = {
								who = PREV
								value < -30
							}
						}
					}
				}
			}

			random_independent_ruler = { # Check for two potential rivals amongst the foreign guests at the coronation ceremony
				limit = {
					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						any_rival = {
							independent = yes
							has_opinion_modifier = {
								who = event_target:coronation_ruler
								modifier = opinion_coronation_guest
							}
						}

						any_independent_ruler = {
							has_opinion_modifier = {
								who = event_target:coronation_ruler
								modifier = opinion_coronation_guest
							}

							reverse_opinion = {
								who = PREV
								value < -30
							}
						}
					}
				}

				character_event = {
					id = HF.20334 # Foreign ruler guests are rivals
				}
			}
		}

		# One version for vassal guests, one for foreign guests
		2 = {
			trigger = {
				NOR = {
					has_flag = flag_coronation_cynic_taunts
					has_flag = flag_secluded_coronation
				}

				any_independent_ruler = {
					NOR = {
						event_target:coronation_priest = { character = PREV }
						event_target:coronation_ruler = { character = PREV }
					}

					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						trait = cynical
						trait = bad_priest_christian
					}
				}
			}

			random_independent_ruler = {
				limit = {
					NOR = {
						event_target:coronation_priest = { character = PREV }
						event_target:coronation_ruler = { character = PREV }
					}

					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						trait = cynical
						trait = bad_priest_christian
					}
				}

				preferred_limit = {
					higher_tier_than = DUKE

					OR = {
						trait = possessed
						trait = lunatic
					}
				}

				preferred_limit = {
					higher_tier_than = DUKE
				}

				character_event = {
					id = HF.20342 # Cynic/wicked foreign guest offends the coronation_priest
				}
			}

			mult_modifier = {
				factor = 0.75
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 0.5

				NOT = { # Prefer higher tier independent rulers
					any_independent_ruler = {
						NOR = {
							event_target:coronation_priest = { character = PREV }
							event_target:coronation_ruler = { character = PREV }
						}

						has_opinion_modifier = {
							who = ROOT
							modifier = opinion_coronation_guest
						}

						OR = {
							trait = cynical
							trait = bad_priest_christian
						}

						higher_tier_than = COUNT
					}
				}
			}
		}

		2 = {
			trigger = {
				NOT = { has_flag = flag_coronation_cynic_taunts }

				any_vassal = {
					NOR = {
						event_target:coronation_priest = { character = PREV }
						event_target:coronation_ruler = { character = PREV }
					}

					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						trait = cynical
						trait = bad_priest_christian
					}
				}
			}

			random_vassal = {
				limit = {
					NOT = { event_target:coronation_priest = { character = PREV } }

					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						trait = cynical
						trait = bad_priest_christian
					}
				}
				character_event = {
					id = HF.20342 # Cynic/wicked vassal guest offends the coronation_priest
				}
			}
		}

		4 = {
			trigger = {
				NOT = { has_flag = flag_coronation_wandering_knight }
			}

			character_event = {
				id = HF.20346 # Wandering knight reaches court
			}

			mult_modifier = {
				factor = 0.25
				has_flag = flag_secluded_coronation
			}
			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.25
				is_female = yes
			}
			mult_modifier = {
				factor = 1.25
				is_adult = no
			}
			mult_modifier = {
				factor = 1.5
				tier = EMPEROR
			}
		}

		4 = {
			trigger = {
				NOT = { has_flag = flag_coronation_wandering_priest }
			}

			character_event = {
				id = HF.20351 # Wandering priest reaches court
			}

			mult_modifier = {
				factor = 0.5
				has_flag = flag_secluded_coronation
			}
			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
			mult_modifier = {
				factor = 1.5
				tier = EMPEROR
			}
			mult_modifier = {
				factor = 1.5
				piety >= 300
			}
		}

		4 = {
			trigger = {
				NOT = { has_flag = flag_coronation_random_rivalry }

				any_vassal = {
					NOT = { event_target:coronation_priest = { character = PREV } }

					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						trait = envious
						is_rival = ROOT

						opinion = {
							who = ROOT
							value >= -30
						}
					}
				}
			}

			random_vassal = {
				limit = {
					NOT = { event_target:coronation_priest = { character = PREV } }

					has_opinion_modifier = {
						who = ROOT
						modifier = opinion_coronation_guest
					}

					OR = {
						trait = envious
						is_rival = ROOT
						opinion = {
							who = ROOT
							value >= -30
						}
					}
				}

				character_event = {
					id = HF.20352 # Envious/Hateful vassal shows rivalry
				}
			}

			mult_modifier = {
				factor = 1.5
				has_flag = flag_extravagant_coronation
			}
		}

		4 = {
			trigger = {
				has_flag = flag_secluded_coronation

				NOR = {
					has_flag = flag_coronation_secluded_embarassed
					trait = stressed
					trait = paranoid
				}
			}

			character_event = {
				id = HF.20355 # Secluded coronation: ruler embarassed
			}
		}

		4 = {
			trigger = {
				has_flag = flag_secluded_coronation
				NOT = { has_flag = flag_coronation_secluded_vassals }
			}

			character_event = {
				id = HF.20356 # Secluded coronation: uninvited vassals are upset
			}
		}

		4 = {
			trigger = {
				has_flag = flag_secluded_coronation
				NOT = { has_flag = flag_coronation_secluded_priest }
			}

			character_event = {
				id = HF.20358 # Secluded coronation: priest is upset of poor ceremony
			}
		}

		4 = {
			trigger = {
				has_flag = flag_secluded_coronation

				NOR = {
					war = yes
					has_flag = flag_coronation_secluded_ambitious
				}
			}

			character_event = {
				id = HF.20360 # Secluded coronation: ruler loses ambition
			}

			mult_modifier = {
				factor = 0.25
				NOT = { trait = ambitious }
			}
		}

		4 = {
			trigger = {
				has_flag = flag_secluded_coronation

				NOR = {
					war = yes
					has_flag = flag_coronation_secluded_proud
					trait = humble
				}
			}

			character_event = {
				id = HF.20361 # Secluded coronation: ruler humbled
			}

			mult_modifier = {
				factor = 0.25
				NOT = { trait = proud }
			}
		}

		4 = {
			trigger = {
				has_flag = flag_secluded_coronation

				job_treasurer = {
					employer = {
						character = ROOT
					}
				}

				NOR = {
					war = yes
					has_flag = flag_coronation_secluded_steward

					job_treasurer = {
						is_rival = ROOT
					}
				}
			}

			character_event = {
				id = HF.20362 # Secluded coronation: ruler hates steward for poor ceremony
			}
		}
	}
}

tiered_prestige_reward_effect = {
	if = {
		limit = {
			is_ruler = no
			spouse = { is_ruler = no }
			father_even_if_dead = { is_ruler = no }
			mother_even_if_dead = { is_ruler = no }
		}

		prestige = 5
	}
	else_if = {
		limit = {
			OR = {
				tier = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { tier = BARON }
				mother_even_if_dead = { tier = BARON }
			}

			NOR = {
				higher_tier_than = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { higher_tier_than = BARON }
				mother_even_if_dead = { higher_tier_than = BARON }
			}
		}

		prestige = 10
	}
	else_if = {
		limit = {
			OR = {
				tier = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { tier = COUNT }
				mother_even_if_dead = { tier = COUNT }
			}

			NOR = {
				higher_tier_than = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { higher_tier_than = COUNT }
				mother_even_if_dead = { higher_tier_than = COUNT }
			}
		}

		prestige = 25
	}
	else_if = {
		limit = {
			OR = {
				tier = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { tier = DUKE }
				mother_even_if_dead = { tier = DUKE }
			}

			NOR = {
				higher_tier_than = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { higher_tier_than = DUKE }
				mother_even_if_dead = { higher_tier_than = DUKE }
			}
		}

		prestige = 50
	}
	else_if = {
		limit = {
			OR = {
				tier = KING
				spouse = { tier = KING }
				father_even_if_dead = { tier = KING }
				mother_even_if_dead = { tier = KING }
			}

			NOR = {
				higher_tier_than = KING
				spouse = { tier = KING }
				father_even_if_dead = { higher_tier_than = KING }
				mother_even_if_dead = { higher_tier_than = KING }
			}
		}

		prestige = 75
	}
	else = {
		prestige = 100
	}
}

tiered_piety_reward_effect = {
	if = {
		limit = {
			is_ruler = no
			spouse = { is_ruler = no }
			father_even_if_dead = { is_ruler = no }
			mother_even_if_dead = { is_ruler = no }
		}

		prestige = 5
	}
	else_if = {
		limit = {
			OR = {
				tier = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { tier = BARON }
				mother_even_if_dead = { tier = BARON }
			}

			NOR = {
				higher_tier_than = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { higher_tier_than = BARON }
				mother_even_if_dead = { higher_tier_than = BARON }
			}
		}

		prestige = 10
	}
	else_if = {
		limit = {
			OR = {
				tier = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { tier = COUNT }
				mother_even_if_dead = { tier = COUNT }
			}

			NOR = {
				higher_tier_than = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { higher_tier_than = COUNT }
				mother_even_if_dead = { higher_tier_than = COUNT }
			}
		}

		prestige = 15
	}
	else_if = {
		limit = {
			OR = {
				tier = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { tier = DUKE }
				mother_even_if_dead = { tier = DUKE }
			}

			NOR = {
				higher_tier_than = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { higher_tier_than = DUKE }
				mother_even_if_dead = { higher_tier_than = DUKE }
			}
		}

		prestige = 20
	}
	else_if = {
		limit = {
			OR = {
				tier = KING
				spouse = { tier = KING }
				father_even_if_dead = { tier = KING }
				mother_even_if_dead = { tier = KING }
			}

			NOR = {
				higher_tier_than = KING
				spouse = { tier = KING }
				father_even_if_dead = { higher_tier_than = KING }
				mother_even_if_dead = { higher_tier_than = KING }
			}
		}

		prestige = 25
	}
	else = {
		prestige = 30
	}
}

tiered_prestige_negative_effect = {
	if = {
		limit = {
			is_ruler = no
			spouse = { is_ruler = no }
			father_even_if_dead = { is_ruler = no }
			mother_even_if_dead = { is_ruler = no }
		}

		prestige = -5
	}
	else_if = {
		limit = {
			OR = {
				tier = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { tier = BARON }
				mother_even_if_dead = { tier = BARON }
			}

			NOR = {
				higher_tier_than = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { higher_tier_than = BARON }
				mother_even_if_dead = { higher_tier_than = BARON }
			}
		}

		prestige = -10
	}
	else_if = {
		limit = {
			OR = {
				tier = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { tier = COUNT }
				mother_even_if_dead = { tier = COUNT }
			}

			NOR = {
				higher_tier_than = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { higher_tier_than = COUNT }
				mother_even_if_dead = { higher_tier_than = COUNT }
			}
		}

		prestige = -25
	}
	else_if = {
		limit = {
			OR = {
				tier = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { tier = DUKE }
				mother_even_if_dead = { tier = DUKE }
			}

			NOR = {
				higher_tier_than = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { higher_tier_than = DUKE }
				mother_even_if_dead = { higher_tier_than = DUKE }
			}
		}

		prestige = -50
	}
	else_if = {
		limit = {
			OR = {
				tier = KING
				spouse = { tier = KING }
				father_even_if_dead = { tier = KING }
				mother_even_if_dead = { tier = KING }
			}

			NOR = {
				higher_tier_than = KING
				spouse = { tier = KING }
				father_even_if_dead = { higher_tier_than = KING }
				mother_even_if_dead = { higher_tier_than = KING }
			}
		}

		prestige = -75
	}
	else = {
		prestige = -100
	}
}

tiered_piety_negative_effect = {
	if = {
		limit = {
			is_ruler = no
			spouse = { is_ruler = no }
			father_even_if_dead = { is_ruler = no }
			mother_even_if_dead = { is_ruler = no }
		}

		prestige = -5
	}
	else_if = {
		limit = {
			OR = {
				tier = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { tier = BARON }
				mother_even_if_dead = { tier = BARON }
			}

			NOR = {
				higher_tier_than = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { higher_tier_than = BARON }
				mother_even_if_dead = { higher_tier_than = BARON }
			}
		}

		prestige = -10
	}
	else_if = {
		limit = {
			OR = {
				tier = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { tier = COUNT }
				mother_even_if_dead = { tier = COUNT }
			}

			NOR = {
				higher_tier_than = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { higher_tier_than = COUNT }
				mother_even_if_dead = { higher_tier_than = COUNT }
			}
		}

		prestige = -15
	}
	else_if = {
		limit = {
			OR = {
				tier = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { tier = DUKE }
				mother_even_if_dead = { tier = DUKE }
			}

			NOR = {
				higher_tier_than = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { higher_tier_than = DUKE }
				mother_even_if_dead = { higher_tier_than = DUKE }
			}
		}

		prestige = -20
	}
	else_if = {
		limit = {
			OR = {
				tier = KING
				spouse = { tier = KING }
				father_even_if_dead = { tier = KING }
				mother_even_if_dead = { tier = KING }
			}

			NOR = {
				higher_tier_than = KING
				spouse = { tier = KING }
				father_even_if_dead = { higher_tier_than = KING }
				mother_even_if_dead = { higher_tier_than = KING }
			}
		}

		prestige = -25
	}
	else = {
		prestige = -30
	}
}

tiered_high_piety_negative_effect = {
	if = {
		limit = {
			is_ruler = no
			spouse = { is_ruler = no }
			father_even_if_dead = { is_ruler = no }
			mother_even_if_dead = { is_ruler = no }
		}

		prestige = -25
	}
	else_if = {
		limit = {
			OR = {
				tier = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { tier = BARON }
				mother_even_if_dead = { tier = BARON }
			}

			NOR = {
				higher_tier_than = BARON
				spouse = { tier = BARON }
				father_even_if_dead = { higher_tier_than = BARON }
				mother_even_if_dead = { higher_tier_than = BARON }
			}
		}

		prestige = -40
	}
	else_if = {
		limit = {
			OR = {
				tier = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { tier = COUNT }
				mother_even_if_dead = { tier = COUNT }
			}

			NOR = {
				higher_tier_than = COUNT
				spouse = { tier = COUNT }
				father_even_if_dead = { higher_tier_than = COUNT }
				mother_even_if_dead = { higher_tier_than = COUNT }
			}
		}

		prestige = -70
	}
	else_if = {
		limit = {
			OR = {
				tier = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { tier = DUKE }
				mother_even_if_dead = { tier = DUKE }
			}

			NOR = {
				higher_tier_than = DUKE
				spouse = { tier = DUKE }
				father_even_if_dead = { higher_tier_than = DUKE }
				mother_even_if_dead = { higher_tier_than = DUKE }
			}
		}

		prestige = -100
	}
	else_if = {
		limit = {
			OR = {
				tier = KING
				spouse = { tier = KING }
				father_even_if_dead = { tier = KING }
				mother_even_if_dead = { tier = KING }
			}

			NOR = {
				higher_tier_than = KING
				spouse = { tier = KING }
				father_even_if_dead = { higher_tier_than = KING }
				mother_even_if_dead = { higher_tier_than = KING }
			}
		}

		prestige = -150
	}
	else = {
		prestige = -350
	}
}

random_antagonizer_slander_roll_effect = {
	random_list = {
		75 = { # Nothing
			mult_modifier = {
				factor = 0.75
				FROM = {
					attribute_diff = {
						character = ROOT
						attribute = intrigue
						value >= 4
					}
				}
			}
			mult_modifier = {
				factor = 0.75
				FROM = {
					attribute_diff = {
						character = ROOT
						attribute = intrigue
						value >= 6
					}
				}
			}
			mult_modifier = {
				factor = 0.5
				FROM = {
					attribute_diff = {
						character = ROOT
						attribute = intrigue
						value >= 8
					}
				}
			}
			mult_modifier = {
				factor = 0.5
				FROM = {
					attribute_diff = {
						character = ROOT
						attribute = intrigue
						value >= 10
					}
				}
			}
		}

		25 = { # Bonus event
			mult_modifier = {
				factor = 0.5
				NOR = {
					trait = stressed
					trait = depressed
				}
				opinion = {
					who = FROM
					value >= 20
				}
			}
			mult_modifier = {
				factor = 0.1
				FROM = {
					has_flag = flag_antagonize_slander_generic
				}
			}
			mult_modifier = {
				factor = 1.5
				FROM = {
					intrigue >= 15
				}
			}
			mult_modifier = {
				factor = 1.5
				FROM = {
					intrigue >= 18
				}
			}
			mult_modifier = {
				factor = 1.5
				FROM = {
					intrigue >= 21
				}
			}
			mult_modifier = {
				factor = 1.5
				FROM = {
					intrigue >= 25
				}
			}
			mult_modifier = {
				factor = 1.75
				FROM = {
					intrigue >= 30
				}
			}
			random_antagonizer_slander_effect = yes
		}
	}
}

# Chance of this effect firing is tied to the Antagonizer's intrigue
random_antagonizer_slander_effect = {
	# Gain rival
	# Rival of target becomes friend
	# Prestige from antagonizing a higher tier ruler
	# Appeased's Claimant moves to court
	# Prestige loss
	# Piety loss
	# Sanity loss
	# Evil Antagonized losing depressed
	# Evil Antagonized losing Stressed
	# Evil Antagonized gaining Diplomacy modifier (happy disposition)
	# Evil Antagonized gaining Intrigue
	# Evil Antagonized gaining Deceitful
	# Evil Antagonized gaining Patient

	random_list = {
		35 = {
			trigger = {
				persistent_event_target:antagonize_target = {
					opinion = {
						who = FROM
						value < 10
					}
				}
			}

			FROM = {
				persistent_event_target:antagonize_target = {
					character_event = {
						id = HF.22030 # Antagonized gets the event
						days = 15
					}
				}
			}

			mult_modifier = {
				factor = 0
				FROM = {
					persistent_event_target:antagonize_target = {
						is_rival = FROM
					}
				}
			}
			mult_modifier = {
				factor = 1.25
				FROM = {
					persistent_event_target:antagonize_target = {
						opinion = {
							who = FROM
							value < -10
						}
					}
				}
			}
			mult_modifier = {
				factor = 1.5
				FROM = {
					persistent_event_target:antagonize_target = {
						opinion = {
							who = FROM
							value < -30
						}
					}
				}
			}
			mult_modifier = {
				factor = 1.5
				FROM = {
					persistent_event_target:antagonize_target = {
						opinion = {
							who = FROM
							value < -50
						}
					}
				}
			}
			mult_modifier = {
				factor = 1.75
				FROM = {
					persistent_event_target:antagonize_target = {
						opinion = {
							who = FROM
							value < -70
						}
					}
				}
			}
		}

		25 = {
			trigger = {
				FROM = {
					persistent_event_target:antagonize_target = {
						any_realm_character = {
							age >= 14

							NOR = {
								is_incapable = yes
								is_rival = PREVPREV
							}

							opinion = {
								who = PREV
								value < -20
							}
						}
					}
				}
			}

			FROM = {
				persistent_event_target:antagonize_target = {
					random_realm_character = {
						limit = {
							age >= 14

							NOR = {
								is_incapable = yes
								is_rival = PREVPREV
							}

							opinion = {
								who = PREV
								value < -20
							}
						}
						character_event = {
							id = HF.22032 # Notice that Antagonizer hates Antagonized
							days = 15
						}
					}
				}
			}
		}

		25 = {
			trigger = {
				FROM = {
					persistent_event_target:antagonize_target = {
						NOT = { lower_tier_than = FROM }
					}
				}
			}

			FROM = {
				character_event = {
					id = HF.22035 # Antagonizer: gain prestige for antagonizing powerful ruler
					days = 15
				}
			}

			mult_modifier = {
				factor = 1.75
				FROM = {
					lower_tier_than = KING
					persistent_event_target:antagonize_target = {
						higher_tier_than = DUKE
					}
				}
			}
		}

		5 = {
			FROM = {
				character_event = {
					id = HF.22042 # Antagonizer gets the event - Prestige loss for Antagonized
					days = 15
				}
			}
		}

		5 = {
			FROM = {
				character_event = {
					id = HF.22044 # Antagonizer gets the event - Piety loss for Antagonized
					days = 15
				}
			}
		}

		5 = {
			FROM = {
				character_event = {
					id = HF.22046 # Antagonizer gets the event - Opinion loss for Antagonized
					days = 15
				}
			}
		}

		1 = {
			trigger = {
				persistent_event_target:antagonize_target = {
					trait = depressed
				}
			}

			FROM = {
				character_event = {
					id = HF.22048 # Antagonizer gets the event - Sanity loss for Depressed Antagonized
					days = 15
				}
			}
		}

		25 = {
			trigger = {
				age >= 14
				is_ruler = no

				any_claim = {
					holder_scope = {
						character = ROOT
					}
				}

				NOR = {
					any_spouse = { is_ruler = yes }
					host = { character = FROM }
					is_rival = FROM
					is_incapable = yes

					persistent_event_target:antagonize_target = {
						current_heir = {
							character = PREVPREV
						}
					}
				}

				opinion = {
					who = ROOT
					value < -20
				}
				opinion = {
					who = FROM
					value >= 10
				}
			}

			random_character = {
				limit = {
					age >= 14
					is_ruler = no

					any_claim = {
						holder_scope = {
							character = ROOT
						}
					}

					NOR = {
						is_rival = FROM
						is_incapable = yes

						any_spouse = { is_ruler = yes }
						host = { character = FROM }

						persistent_event_target:antagonize_target = {
							current_heir = {
								character = PREVPREV
							}
						}
					}

					opinion = {
						who = ROOT
						value < -20
					}
					opinion = {
						who = FROM
						value >= 10
					}
				}

				character_event = {
					id = HF.22036 # Claimant notified
					days = 15
				}
			}
		}

		5 = {
			trigger = {
				FROM = {
					trait = depressed

					OR = {
						trait = impaler
						trait = cruel
						trait = arbitrary
						trait = deceitful
						trait = envious
					}
				}
			}

			FROM = {
				character_event = {
					id = HF.22113 # Evil Antagonized loses depressed
					days = 15
				}
			}
		}

		5 = {
			trigger = {
				FROM = {
					trait = stressed

					OR = {
						trait = impaler
						trait = cruel
						trait = arbitrary
						trait = deceitful
						trait = envious
					}
				}
			}

			FROM = {
				character_event = {
					id = HF.22114 # Evil Antagonized loses stressed
					days = 15
				}
			}
		}

		5 = {
			trigger = {
				FROM = {
					OR = {
						trait = impaler
						trait = cruel
						trait = arbitrary
						trait = deceitful
						trait = envious
					}
					NOR = {
						trait = stressed
						trait = depressed
						has_character_modifier = antagonizer_good_mood
					}
				}
			}

			FROM = {
				character_event = {
					id = HF.22115 # Evil Antagonized gains Diplomacy modifier
					days = 15
				}
			}
		}

		1 = {
			trigger = {
				FROM = {
					OR = {
						trait = impaler
						trait = cruel
						trait = arbitrary
						trait = deceitful
						trait = envious
					}
				}
			}

			FROM = {
				character_event = {
					id = HF.22116 # Evil Antagonized gains Intrigue
					days = 15
				}
			}
		}

		3 = {
			trigger = {
				FROM = {
					OR = {
						trait = impaler
						trait = cruel
						trait = arbitrary
						trait = envious
					}

					NOT = { trait = deceitful }
				}
			}

			FROM = {
				character_event = {
					id = HF.22117 # Evil Antagonized gains Deceitful/loses Honest
					days = 15
				}
			}
		}

		5 = {
			trigger = {
				FROM = {
					OR = {
						trait = impaler
						trait = cruel
						trait = arbitrary
						trait = deceitful
						trait = envious
					}

					NOT = { trait = patient }
				}

				NOR = {
					trait = patient
					diplomacy >= 12
				}
			}

			FROM = {
				character_event = {
					id = HF.22118 # Evil Antagonized gains Patient/loses Wroth
					days = 15
				}
			}
		}

	#	5 = {
	#		trigger = {
	#			NOR = {
	#				FROM = {
	#					any_claim = {
	#						holder_scope = {
	#							character = ROOT
	#						}
	#					}
	#				}
	#
	#				# Only against dangerous Antagonize targets
	#				persistent_event_target:antagonize_target = {
	#					lower_tier_than = FROM
	#				}
	#
	#				# Needs to be hated already. The Antagonizer should receive the claim only if the Antagonized is already mad at him and is a more powerful ruler.
	#				persistent_event_target:antagonize_target = {
	#					opinion = {
	#						who = FROM
	#						value >= 10
	#					}
	#				}
	#			}
	#		}
	#
	#		FROM = {
	#			character_event = {
	#				id = HF.22038 # Antagonizer gets the claim
	#				days = 15
	#			}
	#		}
	#
	#		mult_modifier = { # Only against dangerous Antagonize targets
	#			factor = 0.25
	#			persistent_event_target:antagonize_target = {
	#				prestige >= 500
	#			}
	#		}
	#	}
	}
}

fire_haruspicy_event_effect = {
	# Divination
	hidden_effect = {
		if = {
			limit = {
				attacker = {
					OR = {
						religion = hellenic_pagan
						religion = hellenic_pagan_reformed
						has_religion_feature = religion_haruspicy
					}
				}
			}

			attacker = {
				character_event = {
					id = HF.23005 # Chance to divine outcome
				}
			}
		}

		if = {
			limit = {
				defender = {
					OR = {
						religion = hellenic_pagan
						religion = hellenic_pagan_reformed
						has_religion_feature = religion_haruspicy
					}
				}
			}

			defender = {
				character_event = {
					id = HF.23005 # Chance to divine outcome
				}
			}
		}
	}
}

remove_opinions_with_prison_reason_effect = {
	# Removes the specified opinion about "who" (PREV), from current scope
	# NOTE: If you add a new opinion with "prison_reason" to the game, add it here, too!
	remove_opinion = { modifier = opinion_dishonorable who = PREV }
	remove_opinion = { modifier = opinion_traitor who = PREV }
	remove_opinion = { modifier = opinion_rebel_traitor who = PREV }
	remove_opinion = { modifier = opinion_regicide_traitor who = PREV }
	remove_opinion = { modifier = attempted_murder_of_spouse who = PREV }
	remove_opinion = { modifier = attempted_murder_of_child who = PREV }
	remove_opinion = { modifier = attempted_murder_of_parent who = PREV }
	remove_opinion = { modifier = attempted_murder_of_sibling who = PREV }
	remove_opinion = { modifier = attempted_murder_of_vassal who = PREV }
	remove_opinion = { modifier = attempted_murder_of_spouse_vassal who = PREV }
	remove_opinion = { modifier = attempted_murder who = PREV }
	remove_opinion = { modifier = opinion_spouse_slayer who = PREV }
	remove_opinion = { modifier = opinion_murder_attempt who = PREV }
	remove_opinion = { modifier = opinion_killed_close_kin who = PREV }
	remove_opinion = { modifier = opinion_killed_father who = PREV }
	remove_opinion = { modifier = opinion_hajj_attempt_murder who = PREV }
	remove_opinion = { modifier = opinion_fatwa_target who = PREV }
	remove_opinion = { modifier = opinion_refused_order who = PREV }
	remove_opinion = { modifier = opinion_castrated_me who = PREV }
	remove_opinion = { modifier = opinion_blinded_me who = PREV }
	remove_opinion = { modifier = opinion_castrated_family who = PREV }
	remove_opinion = { modifier = opinion_castrated_close_kin who = PREV }
	remove_opinion = { modifier = opinion_blinded_family who = PREV }
	remove_opinion = { modifier = opinion_blinded_close_kin who = PREV }
	remove_opinion = { modifier = opinion_witch who = PREV }
	remove_opinion = { modifier = opinion_takfir who = PREV }
	remove_opinion = { modifier = opinion_attempted_abduction who = PREV }
	remove_opinion = { modifier = opinion_unfaithful_wife who = PREV }
	remove_opinion = { modifier = opinion_unfaithful_husband_crime who = PREV }
	remove_opinion = { modifier = opinion_cuckolded who = PREV }
	remove_opinion = { modifier = opinion_killed_lover who = PREV }
	remove_opinion = { modifier = opinion_charge_heresiarch who = PREV }
	remove_opinion = { modifier = opinion_charge_infidel who = PREV }
	remove_opinion = { modifier = opinion_charge_deviant who = PREV }
	remove_opinion = { modifier = opinion_charge_illegitimate who = PREV }
	remove_opinion = { modifier = opinion_charge_cultist who = PREV }
	remove_opinion = { modifier = opinion_charge_dw who = PREV }
	remove_opinion = { modifier = opinion_charge_traitor who = PREV }
	remove_opinion = { modifier = opinion_charge_slanderer who = PREV }
	remove_opinion = { modifier = abuse_of_office who = PREV }
	remove_opinion = { modifier = opinion_tortured_me who = PREV }
	remove_opinion = { modifier = opinion_tortured_family who = PREV }
	remove_opinion = { modifier = opinion_tortured_close_kin who = PREV }
	remove_opinion = { modifier = opinion_mutilated_me who = PREV }
	remove_opinion = { modifier = opinion_mutilated_family who = PREV }
	remove_opinion = { modifier = opinion_mutilated_close_kin who = PREV }
	remove_opinion = { modifier = opinion_thief who = PREV }
	remove_opinion = { modifier = opinion_outlawed_society who = PREV }
	remove_opinion = { modifier = opinion_accused_apostate who = PREV }
}

# Find someone to reference... (event_target:my_beloved)
# NOTE: might be platonic, children, etc
save_beloved_character_effect = {
	if = {
		limit = { # In case you have a spouse outside of your realm...
			is_married = yes

			any_spouse = {
				ROOT_possibly_romantically_interested_trigger = yes
				root_has_terrible_opinion_modifier_of_this_trigger = no
				is_landed = yes
			}
		}

		random_spouse = {
			limit = {
				ROOT_possibly_romantically_interested_trigger = yes
				root_has_terrible_opinion_modifier_of_this_trigger = no
				is_landed = yes
			}

			save_event_target_as = my_beloved
		}
	}
	else = { # In case you do not...
		any_courtier_or_vassal = {
			limit = {
				NOR = {
					character = event_target:enemy_commander
					character = event_target:enemy_liege
				}
			}

			score_value = { # Prioritizes selecting some kind of loved person...
				value = 1
				beloved_target_selection_score = yes
			}

			# Effect:
			save_event_target_as = my_beloved
		}
	}
}

# TODO: Remove this nonsense?
child_of_destiny_journey_start_effect = {
	character_event = {
		id = HF.210 # The journey begins...
		days = 200
		random = 200
	}
}

child_of_destiny_journey_resume_effect = {
	character_event = {
		id = HF.210 # Back to the journey tombola!
		days = 365
		random = 500
	}
}

pacifists_lose_piety_effect = {
	if = {
		limit = {
			religion = jain
			NOT = {
				has_alternate_start_parameter = {
					key = religion_names
					value = random
				}
			}
		}

		custom_tooltip = { text = jain_ahimsa_tooltip }
		piety = -20
	}
	else_if = {
		limit = { pacifist = yes }

		custom_tooltip = { text = pacifist_alt_tooltip }
		piety = -20
	}
}

# Current variable values:
# Scarred = 1
# Very Scarred = 5
# Horrifically Scarred = 10.
# To rebalance how quickly a character moves up from one to the other,
# just change the variable effects on all the following scripted_effects
# TODO: Update when all scarred traits are opposites
add_scarred_tiered_effect = {
	if = {
		limit = { has_dlc = "Holy Fury" }

		hidden_effect = {
			change_variable = {
				which = scarred_variable
				value = 1
			}
		}

		if = {
			limit = {
				check_variable = {
					which = scarred_variable
					value >= 1
				}
				check_variable = {
					which = scarred_variable
					value < 5
				}
			}

			if = {
				limit = { trait = scarred_mid }
				remove_trait = scarred_mid
			}
			else_if = {
				limit = { trait = scarred_high }
				remove_trait = scarred_high
			}

			add_trait = scarred
		}

		else_if = {
			limit = {
				check_variable = {
					which = scarred_variable
					value >= 5
				}
				check_variable = {
					which = scarred_variable
					value < 10
				}
			}

			if = {
				limit = { trait = scarred }
				remove_trait = scarred
			}
			else_if = {
				limit = { trait = scarred_high }
				remove_trait = scarred_high
			}

			add_trait = scarred_mid
		}

		else = {
			if = {
				limit = { trait = scarred_mid }
				remove_trait = scarred_mid
			}
			if = {
				limit = { trait = scarred }
				remove_trait = scarred
			}

			if = {
				limit = {
					NOT = { trait = scarred_high }
				}
				add_trait = scarred_high
			}
		}
	}
	else = {
		add_trait = scarred
	}

	hidden_effect = {
		if = {
			limit = {
				NOR = {
					trait = scarred_type_1
					trait = scarred_type_2
					trait = scarred_type_3
					trait = scarred_type_4
					trait = scarred_type_5
					trait = scarred_type_6
					trait = scarred_type_7
					trait = scarred_type_8
					trait = scarred_type_9
					trait = scarred_type_10
				}
			}

			random_list = {
				10 = { add_trait = scarred_type_1 }
				10 = { add_trait = scarred_type_2 }
				10 = { add_trait = scarred_type_3 }
				10 = { add_trait = scarred_type_4 }
				10 = { add_trait = scarred_type_5 }
				10 = { add_trait = scarred_type_6 }
				10 = { add_trait = scarred_type_7 }
				10 = { add_trait = scarred_type_8 }
				10 = { add_trait = scarred_type_9 }
				10 = { add_trait = scarred_type_10 }
			}
		}
	}
}

add_scarred_medium_effect = {
	if = {
		limit = { has_dlc = "Holy Fury" }

		hidden_effect = {
			set_variable = {
				which = scarred_variable
				value = 5
			}
		}

		if = {
			limit = {
				check_variable = {
					which = scarred_variable
					value >= 5
				}
				check_variable = {
					which = scarred_variable
					value < 10
				}
			}

			if = {
				limit = { trait = scarred_high }
				remove_trait = scarred_high
			}
			if = {
				limit = { trait = scarred }
				remove_trait = scarred
			}

			add_trait = scarred_mid
		}
	}
	else = {
		add_trait = scarred
	}

	hidden_effect = {
		if = {
			limit = {
				NOR = {
					trait = scarred_type_1
					trait = scarred_type_2
					trait = scarred_type_3
					trait = scarred_type_4
					trait = scarred_type_5
					trait = scarred_type_6
					trait = scarred_type_7
					trait = scarred_type_8
					trait = scarred_type_9
					trait = scarred_type_10
				}
			}

			random_list = {
				10 = { add_trait = scarred_type_1 }
				10 = { add_trait = scarred_type_2 }
				10 = { add_trait = scarred_type_3 }
				10 = { add_trait = scarred_type_4 }
				10 = { add_trait = scarred_type_5 }
				10 = { add_trait = scarred_type_6 }
				10 = { add_trait = scarred_type_7 }
				10 = { add_trait = scarred_type_8 }
				10 = { add_trait = scarred_type_9 }
				10 = { add_trait = scarred_type_10 }
			}
		}
	}
}

add_scarred_high_effect = {
	if = {
		limit = { has_dlc = "Holy Fury" }

		hidden_effect = {
			set_variable = {
				which = scarred_variable
				value = 10
			}
		}

		if = {
			limit = {
				check_variable = {
					which = scarred_variable
					value > 10
				}
			}

			if = {
				limit = { trait = scarred }
				remove_trait = scarred
			}
			if = {
				limit = { trait = scarred_mid }
				remove_trait = scarred_mid
			}

			add_trait = scarred_high
		}
	}
	else = {
		add_trait = scarred
	}

	hidden_effect = {
		if = {
			limit = {
				NOR = {
					trait = scarred_type_1
					trait = scarred_type_2
					trait = scarred_type_3
					trait = scarred_type_4
					trait = scarred_type_5
					trait = scarred_type_6
					trait = scarred_type_7
					trait = scarred_type_8
					trait = scarred_type_9
					trait = scarred_type_10
				}
			}

			random_list = {
				10 = { add_trait = scarred_type_1 }
				10 = { add_trait = scarred_type_2 }
				10 = { add_trait = scarred_type_3 }
				10 = { add_trait = scarred_type_4 }
				10 = { add_trait = scarred_type_5 }
				10 = { add_trait = scarred_type_6 }
				10 = { add_trait = scarred_type_7 }
				10 = { add_trait = scarred_type_8 }
				10 = { add_trait = scarred_type_9 }
				10 = { add_trait = scarred_type_10 }
			}
		}
	}
}

add_scarred_start_effect = {
	if = {
		limit = { has_dlc = "Holy Fury" }

		if = {
			limit = { trait = scarred }

			change_variable = {
				which = scarred_variable
				value = 1
			}
		}
		else_if = {
			limit = { trait = scarred_mid }

			change_variable = {
				which = scarred_variable
				value = 5
			}
		}
		else_if = {
			limit = { trait = scarred_high }

			change_variable = {
				which = scarred_variable
				value = 10
			}
		}
	}
	else = {
		add_trait = scarred
	}

	hidden_effect = {
		if = {
			limit = {
				NOR = {
					trait = scarred_type_1
					trait = scarred_type_2
					trait = scarred_type_3
					trait = scarred_type_4
					trait = scarred_type_5
					trait = scarred_type_6
					trait = scarred_type_7
					trait = scarred_type_8
					trait = scarred_type_9
					trait = scarred_type_10
				}
			}

			random_list = {
				10 = { add_trait = scarred_type_1 }
				10 = { add_trait = scarred_type_2 }
				10 = { add_trait = scarred_type_3 }
				10 = { add_trait = scarred_type_4 }
				10 = { add_trait = scarred_type_5 }
				10 = { add_trait = scarred_type_6 }
				10 = { add_trait = scarred_type_7 }
				10 = { add_trait = scarred_type_8 }
				10 = { add_trait = scarred_type_9 }
				10 = { add_trait = scarred_type_10 }
			}
		}
	}
}

add_blood_splatter_effect = {
	hidden_effect = {
		if = {
			limit = { has_character_modifier = blood_splatter_3 }

			remove_character_modifier = blood_splatter_3
			add_character_modifier = {
				modifier = blood_splatter_3
				months = 5
				hidden = yes
			}
		}
		else_if = {
			limit = {
				OR = {
					has_character_modifier = blood_splatter_1
					has_character_modifier = blood_splatter_2
				}
			}

			remove_character_modifier = blood_splatter_1
			remove_character_modifier = blood_splatter_2
			add_character_modifier = {
				modifier = blood_splatter_3
				months = 5
				hidden = yes
			}
		}
		else = {
			random_list = {
				50 = { add_character_modifier = { modifier = blood_splatter_1 months = 5 hidden = yes } }
				40 = { add_character_modifier = { modifier = blood_splatter_2 months = 5 hidden = yes } }
				10 = { add_character_modifier = { modifier = blood_splatter_3 months = 5 hidden = yes } }
			}
		}
	}
}

reset_flag_lifestyle_sway_event_effect = {
	clr_flag = lifestyle_event_successful
	clr_flag = lifestyle_event_unsuccessful
	clr_flag = sway_hunting
	clr_flag = sway_dueling
	clr_flag = sway_game
	clr_flag = sway_social
	clr_flag = sway_scholar
	clr_flag = sway_steward
	clr_flag = sway_torture
}

bloodthirsty_tiered_traits_effect = {
	hidden_effect = {
		change_variable = {
			which = burned_hearts_points
			value = 1
		}

		if = { # Tier 1
			limit = {
				check_variable = {
					which = burned_hearts_points
					value >= 10
				}

				NOR = {
					trait = bloodthirsty_gods_1
					trait = bloodthirsty_gods_2
					trait = bloodthirsty_gods_3
					has_character_modifier = bloodthirsty_gods_exp_cooldown
				}
			}

			character_event = {
				id = HF.23431 # Notify and assign trait
				days = 6
			}
			add_character_modifier = {
				name = bloodthirsty_gods_exp_cooldown # Prevent event cascade
				days = 12
				hidden = yes
			}
		}

		else_if = { # Tier 2
			limit = {
				check_variable = {
					which = burned_hearts_points
					value >= 50
				}

				trait = bloodthirsty_gods_1

				NOR = {
					trait = bloodthirsty_gods_2
					trait = bloodthirsty_gods_3
					has_character_modifier = bloodthirsty_gods_exp_cooldown
				}
			}

			character_event = {
				id = HF.23432 # Notify and assign trait
				days = 6
			}
			add_character_modifier = {
				name = bloodthirsty_gods_exp_cooldown # Prevent event cascade
				days = 12
				hidden = yes
			}
		}

		else_if = { # Tier 3
			limit = {
				check_variable = {
					which = burned_hearts_points
					value >= 100
				}

				trait = bloodthirsty_gods_2

				NOR = {
					trait = bloodthirsty_gods_3
					has_character_modifier = bloodthirsty_gods_exp_cooldown
				}
			}

			character_event = {
				id = HF.23433 # Notify and assign trait
				days = 6
			}
			add_character_modifier = {
				name = bloodthirsty_gods_exp_cooldown # Prevent event cascade
				days = 12
				hidden = yes
			}
		}

		else_if = { # Bloodline
			limit = {
				check_variable = {
					which = burned_hearts_points
					value >= 200
				}

				trait = bloodthirsty_gods_3
				is_ruler = yes
				is_playable = yes

				NOR = {
					trait = kind
					has_character_modifier = bloodthirsty_gods_exp_cooldown

					any_owned_bloodline = { # Not already has a Bloodthirsty bloodline
						has_bloodline_flag = bloodline_created_bloodthirsty
					}
				}
			}

			narrative_event = {
				id = HF.23434 # Notify and assign trait
				days = 6
			}
			add_character_modifier = {
				name = bloodthirsty_gods_exp_cooldown # Prevent event cascade
				days = 12
				hidden = yes
			}
		}
	}
}

# Tied to religion, used only for special events
add_random_tattoo_effect = {
	if = {
		limit = {
			OR = {
				religion = norse_pagan
				religion = norse_pagan_reformed
			}

			NOR = {
				trait = african_tattoo_1
				trait = african_tattoo_2
				trait = african_tattoo_3
				trait = african_tattoo_4
				trait = african_tattoo_5
				trait = african_tattoo_6
				trait = african_tattoo_7
				trait = african_tattoo_8
				trait = african_tattoo_9
				trait = african_tattoo_10
				trait = african_tattoo_11
				trait = african_tattoo_12
				trait = slavic_tattoo_1
				trait = slavic_tattoo_2
				trait = slavic_tattoo_3
				trait = slavic_tattoo_4
				trait = slavic_tattoo_5
				trait = slavic_tattoo_6
				trait = norse_tattoo_1
				trait = norse_tattoo_2
				trait = norse_tattoo_3
				trait = norse_tattoo_4
				trait = norse_tattoo_5
				trait = norse_tattoo_6
			}
		}

		random_list = {
			50 = { add_trait = norse_tattoo_1 }
			50 = { add_trait = norse_tattoo_2 }
			40 = { add_trait = norse_tattoo_3 }
			30 = { add_trait = norse_tattoo_4 }
			20 = { add_trait = norse_tattoo_5 }
			10 = { add_trait = norse_tattoo_6 }
		}
	}

	else_if = {
		limit = {
			OR = {
				religion = west_african_pagan
				religion = west_african_pagan_reformed
				religion = zun_pagan
				religion = zun_pagan_reformed
			}

			NOR = {
				trait = african_tattoo_1
				trait = african_tattoo_2
				trait = african_tattoo_3
				trait = african_tattoo_4
				trait = african_tattoo_5
				trait = african_tattoo_6
				trait = african_tattoo_7
				trait = african_tattoo_8
				trait = african_tattoo_9
				trait = african_tattoo_10
				trait = african_tattoo_11
				trait = african_tattoo_12
				trait = slavic_tattoo_1
				trait = slavic_tattoo_2
				trait = slavic_tattoo_3
				trait = slavic_tattoo_4
				trait = slavic_tattoo_5
				trait = slavic_tattoo_6
				trait = norse_tattoo_1
				trait = norse_tattoo_2
				trait = norse_tattoo_3
				trait = norse_tattoo_4
				trait = norse_tattoo_5
				trait = norse_tattoo_6
			}
		}

		random_list = {
			50 = { add_trait = african_tattoo_1 }
			40 = { add_trait = african_tattoo_2 }
			40 = { add_trait = african_tattoo_3 }
			30 = { add_trait = african_tattoo_4 }
			30 = { add_trait = african_tattoo_5 }
			20 = { add_trait = african_tattoo_6 }
			20 = { add_trait = african_tattoo_7 }
			10 = { add_trait = african_tattoo_8 }
			6 = { add_trait = african_tattoo_9 }
			4 = { add_trait = african_tattoo_10 }
			2 = { add_trait = african_tattoo_11 }
			1 = { add_trait = african_tattoo_12 }
		}
	}
	else_if = {
		limit = {
			OR = {
				religion = slavic_pagan
				religion = slavic_pagan_reformed
				religion = baltic_pagan
				religion = baltic_pagan_reformed
				religion = finnish_pagan
				religion = finnish_pagan_reformed
			}

			NOR = {
				trait = african_tattoo_1
				trait = african_tattoo_2
				trait = african_tattoo_3
				trait = african_tattoo_4
				trait = african_tattoo_5
				trait = african_tattoo_6
				trait = african_tattoo_7
				trait = african_tattoo_8
				trait = african_tattoo_9
				trait = african_tattoo_10
				trait = african_tattoo_11
				trait = african_tattoo_12
				trait = slavic_tattoo_1
				trait = slavic_tattoo_2
				trait = slavic_tattoo_3
				trait = slavic_tattoo_4
				trait = slavic_tattoo_5
				trait = slavic_tattoo_6
				trait = norse_tattoo_1
				trait = norse_tattoo_2
				trait = norse_tattoo_3
				trait = norse_tattoo_4
				trait = norse_tattoo_5
				trait = norse_tattoo_6
			}
		}

		random_list = {
			50 = { add_trait = slavic_tattoo_1 }
			50 = { add_trait = slavic_tattoo_2 }
			40 = { add_trait = slavic_tattoo_3 }
			30 = { add_trait = slavic_tattoo_4 }
			20 = { add_trait = slavic_tattoo_5 }
			10 = { add_trait = slavic_tattoo_6 }
		}
	}
}

spawn_debutante_effect = {
	if = {
		limit = { has_religion_feature = religion_matriarchal }

		create_character = {
			random_traits = yes
			dynasty = actually_culture
			culture = ROOT
			female = no
			age = 17
		}
	}
	else = {
		create_character = {
			random_traits = yes
			dynasty = actually_culture
			culture = ROOT
			female = yes
			age = 17
		}
	}

	new_character = {
		hidden_effect = {
			if = {
				limit = { has_dharmic_religion_trigger = yes }

				add_trait = kshatriya
				character_event = { id = RoI.30121 } # Set religious branch to liege's branch
			}

			if = {
				limit = {
					OR = {
						religion = hellenic_pagan
						religion = hellenic_pagan_reformed
						has_religion_feature = religion_astrology
					}
				}

				hidden_effect = { add_western_zodiac_trait_effect = yes }
			}

			if = {
				limit = {
					has_religion_feature = religion_no_leader
					religion_group = pagan_group
				}

				random_list = {
					5  = { add_trait = pagan_branch_1 }
					25 = { add_trait = pagan_branch_2 }
					25 = { add_trait = pagan_branch_3 }
					25 = { add_trait = pagan_branch_4 }
				}
			}
		}

		set_flag = debutante
		save_event_target_as = invited_character
	}
}

transfer_crown_on_abdication_effect = {
	if = {
		limit = {
			has_landed_title = e_hre
			any_artifact = { artifact_type = crown_hre }
		}

		current_heir = { save_event_target_as = crown_hre_heir }
		any_artifact = {
			limit = { artifact_type = crown_hre }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_hre_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = e_byzantium
			any_artifact = { artifact_type = crown_byzantine }
		}

		current_heir = { save_event_target_as = crown_byzantine_heir }
		any_artifact = {
			limit = { artifact_type = crown_byzantine }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_byzantine_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = e_persia
			any_artifact = { artifact_type = crown_pahlavi }
		}

		current_heir = { save_event_target_as = crown_pahlavi_heir }
		any_artifact = {
			limit = { artifact_type = crown_pahlavi }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_pahlavi_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_norse_pagan_reformed
			any_artifact = { artifact_type = crown_fylkir }
		}

		current_heir = { save_event_target_as = crown_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_tengri_pagan_reformed
			any_artifact = { artifact_type = crown_tengri_fylkir }
		}

		current_heir = { save_event_target_as = crown_tengri_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_tengri_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_tengri_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_slavic_pagan_reformed
			any_artifact = { artifact_type = crown_slavic_fylkir }
		}

		current_heir = { save_event_target_as = crown_slavic_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_slavic_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_slavic_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_baltic_pagan_reformed
			any_artifact = { artifact_type = crown_romuva_fylkir }
		}

		current_heir = { save_event_target_as = crown_romuva_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_romuva_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_romuva_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_finnish_pagan_reformed
			any_artifact = { artifact_type = crown_finnish_fylkir }
		}

		current_heir = { save_event_target_as = crown_finnish_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_finnish_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_finnish_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_west_african_pagan_reformed
			any_artifact = { artifact_type = crown_west_african_fylkir }
		}

		current_heir = { save_event_target_as = crown_west_african_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_west_african_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_west_african_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_zun_pagan_reformed
			any_artifact = { artifact_type = crown_zun_fylkir }
		}

		current_heir = { save_event_target_as = crown_zun_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_zun_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_zun_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = d_bon_reformed
			any_artifact = { artifact_type = scepter_bon_fylkir }
		}

		current_heir = { save_event_target_as = scepter_bon_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = scepter_bon_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:scepter_bon_fylkir_heir
			}
		}
	}
	if = {
		limit = {
			has_landed_title = d_aztec_reformed
			any_artifact = { artifact_type = crown_aztec_fylkir }
		}

		current_heir = { save_event_target_as = crown_aztec_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = crown_aztec_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:crown_aztec_fylkir_heir
			}
		}
	}

	if = {
		limit = {
			has_landed_title = k_hellenic_pagan
			any_artifact = { artifact_type = scepter_hellenic_fylkir }
		}

		current_heir = { save_event_target_as = scepter_hellenic_fylkir_heir }
		any_artifact = {
			limit = { artifact_type = scepter_hellenic_fylkir }
			transfer_artifact = {
				from = PREV
				to = event_target:scepter_hellenic_fylkir_heir
			}
		}
	}

	# Now transfer all other remaining artifacts to the player_heir, who may or may not be the current_heir
	player_heir = {
		save_event_target_as = scoped_player_heir
	}

	any_artifact = {
		limit = {
			NOR = {
				artifact_type = crown_hre
				artifact_type = crown_byzantine
				artifact_type = crown_pahlavi
				artifact_type = crown_fylkir
				artifact_type = crown_tengri_fylkir
				artifact_type = crown_slavic_fylkir
				artifact_type = crown_romuva_fylkir
				artifact_type = crown_finnish_fylkir
				artifact_type = crown_west_african_fylkir
				artifact_type = crown_zun_fylkir
				artifact_type = scepter_bon_fylkir
				artifact_type = crown_aztec_fylkir
				artifact_type = scepter_hellenic_fylkir
			}
		}

		transfer_artifact = {
			from = PREV
			to = event_target:scoped_player_heir
		}
	}
}

move_childrens_crusade_region_effect = {
	if = { # If at any point during the preparation Jerusalem is no longer a valid target, or a real Crusade starts, stop everything
		limit = {
			OR = {
				k_jerusalem = {
					trigger_if = {
						limit = { has_holder = yes }

						holder_scope = {
							religion_group = christian
						}
					}
				}

				c_jerusalem = {
					holder_scope = {
						OR = {
							religion_group = christian
							is_crusade_target = yes
						}
					}
				}

				religion_head = {
					OR = {
						is_preparing_crusade = yes

						any_war = {
							OR = {
								using_cb = crusade
								using_cb = new_crusade
							}
						}
					}
				}
			}
		}

		any_player = {
			limit = {
				religion_group = christian
				NOT = { character = ROOT }
			}

			narrative_event = {
				id = HF.25819 # Notify everyone that the crusade has flopped
				days = 30
			}
		}

		primary_title = {
			activate_title = { title = THIS status = no }
			destroy_landed_title = THIS
		}

		clr_flag = flag_childrens_crusade_leader
		add_trait = lunatic
		piety = -150
		remove_trait = disinherited

		set_variable = {
			which = children_crusade_forces
			value = 0
		}
		set_variable = {
			which = children_crusade_morale
			value = 0
		}
		set_variable = {
			which = children_crusade_heavy_troops
			value = 0
		}

		any_courtier = {
			remove_trait = disinherited
			clr_flag = no_court_invites
		}
	}
	else_if = { # Move to Genoa first
		limit = { has_flag = flag_children_at_beginning }

		primary_title = {
			set_preferred_capital = c_genoa # Historically traveled here
		}

		change_variable = {
			which = children_crusade_forces
			value = 1
		}
		change_variable = {
			which = children_crusade_morale
			value = -1
		}

		clr_flag = flag_children_at_beginning
		set_flag = flag_children_at_genoa

		if = {
			limit = {
				persistent_event_target:childrens_crusade_sponsor_per = { is_alive = no }
			}

			change_variable = {
				which = children_crusade_morale
				value = -2
			}
		}

		any_player = {
			limit = {
				NOT = { character = ROOT }
				religion_group = christian
			}

			narrative_event = {
				id = HF.25815 # Notify everyone that the crusade has reached Genoa and the sea did not part before them
				days = 30
			}
		}
		narrative_event = {
			id = HF.25808 # Ping back to main event to check travel progress
			days = 50
			random = 100
		}
	}
	else_if = { # Then shipwreck to Achaia
		limit = { has_flag = flag_children_at_genoa }

		primary_title = {
			set_preferred_capital = c_achaia
		}

		change_variable = {
			which = children_crusade_morale
			value = -1
		}

		clr_flag = flag_children_at_genoa
		set_flag = flag_children_at_achaia

		any_player = {
			limit = {
				religion_group = christian
				NOT = { character = ROOT }
			}

			narrative_event = {
				id = HF.25816 # Notify everyone that the crusade has shipwrecked into Achaia
				days = 30
			}
		}

		if = {
			limit = {
				persistent_event_target:childrens_crusade_sponsor_per = { is_alive = no }
			}

			random = {
				chance = 25

				change_variable = {
					which = children_crusade_forces
					value = -1
				}
			}
		}

		narrative_event = {
			id = HF.25808 # Ping back to main event to check travel progress
			days = 50
			random = 100
		}
	}
	else_if = { # Then crawl to Nikaea
		limit = { has_flag = flag_children_at_achaia }

		primary_title = {
			set_preferred_capital = c_nikaea
		}

		clr_flag = flag_children_at_achaia
		set_flag = flag_children_at_nikaea

		# Base forces score is 3 = circa 15.000 poorly armed troops
		change_variable = {
			which = children_crusade_forces
			value = 1
		}

		any_player = {
			limit = {
				religion_group = christian
				NOT = { character = ROOT }
			}

			narrative_event = {
				id = HF.25817 # Notify everyone that the crusade has crawled its way to Nikaea
				days = 30
			}
		}
		narrative_event = {
			id = HF.25808 # Ping back to main event to check travel progress
			days = 50
			random = 100
		}
	}
	else_if = { # We actually got there. Start the war
		limit = { has_flag = flag_children_at_nikaea }

		primary_title = {
			set_preferred_capital = c_antiocheia # Where the troops will spawn
		}

		clr_flag = flag_children_at_nikaea
		set_flag = flag_children_at_antioch

		narrative_event = {
			id = HF.25820 # START THE CRUSADE
			days = 25
		}

		any_player = {
			limit = {
				religion_group = christian
				NOT = { character = ROOT }
			}

			narrative_event = {
				id = HF.25818 # Notify everyone that the crusade has actually reached Antioch and is ready to engage
				days = 30
			}
		}
	}
	else = { # Move directly to Antioch in case something went wrong
		primary_title = {
			set_preferred_capital = c_antiocheia # Historically traveled here
		}

		clr_flag = flag_children_at_achaia
		clr_flag = flag_children_at_nikaea
		clr_flag = flag_children_at_genoa
		set_flag = flag_children_at_antioch

		change_variable = {
			which = children_crusade_forces
			value = 1
		}
		change_variable = {
			which = children_crusade_morale
			value = -1
		}

		if = {
			limit = {
				persistent_event_target:childrens_crusade_sponsor_per = { is_alive = no }
			}

			change_variable = {
				which = children_crusade_morale
				value = -2
			}
		}

		narrative_event = {
			id = HF.25820 # START THE CRUSADE
			days = 25
		}

		any_player = {
			limit = {
				religion_group = christian
				NOT = { character = ROOT }
			}

			narrative_event = {
				id = HF.25818 # Notify everyone that the crusade has actually reached Antioch and is ready to engage
				days = 30
			}
		}
	}
}

spawn_childrens_crusade_light_troops_effect = {
	change_variable = {
		which = children_crusade_forces
		value = -1
	}

	location = {
		ROOT = {
			spawn_unit = {
				province = PREV
				home = PREV
				owner = ROOT
				attrition = 0.5
				reinforces = no
				is_looter = no
				can_toggle_looting = no
				cannot_inherit = yes
				merge = yes
				disband_on_peace = yes
				earmark = childrens_crusade_infantry_earmark
				troops = {
					light_infantry = { 3000 3000 }
					archers = { 100 100 }
				}
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				which = children_crusade_forces
				value >= 1 # Keep looping until the variable reaches 0
			}
		}
		character_event = {
			id = HF.25821
		}
	}
}

spawn_childrens_crusade_heavy_troops_effect = {
	change_variable = {
		which = children_crusade_heavy_troops
		value = -1
	}

	location = {
		ROOT = {
			spawn_unit = {
				province = PREV
				home = PREV
				owner = ROOT
				attrition = 0.5
				reinforces = no
				is_looter = no
				can_toggle_looting = no
				cannot_inherit = yes
				merge = yes
				troops = {
					heavy_infantry = { 500 500 }
					light_cavalry = { 150 150 }
				}
			}
		}
	}

	if = {
		limit = {
			check_variable = {
				which = children_crusade_heavy_troops
				value >= 1 # Keep looping until the variable reaches 0
			}
		}
		character_event = { id = HF.25822 }
	}
}

this_is_becoming_grand_mistress_effect = {
	custom_tooltip = {
		text = tooltip_becoming_grand_mistress

		change_variable = {
			which = becoming_grand_mistress
			value = 2
		}
	}
}

this_is_becoming_iron_matron_effect = {
	custom_tooltip = {
		text = tooltip_becoming_iron_matron

		change_variable = {
			which = becoming_iron_matron
			value = 2
		}
	}
}

this_is_becoming_virago_effect = {
	custom_tooltip = {
		text = tooltip_becoming_virago

		change_variable = {
			which = becoming_virago
			value = 2
		}
	}
}

this_is_becoming_atoner_effect = {
	custom_tooltip = {
		text = tooltip_becoming_atoner

		change_variable = {
			which = becoming_atoner
			value = 2
		}
	}
}

this_is_becoming_manservant_effect = {
	custom_tooltip = {
		text = tooltip_becoming_manservant

		change_variable = {
			which = becoming_manservant
			value = 2
		}
	}
}

this_is_becoming_stud_effect = {
	custom_tooltip = {
		text = tooltip_becoming_stud

		change_variable = {
			which = becoming_stud
			value = 2
		}
	}
}

this_is_becoming_grand_paramour_effect = {
	custom_tooltip = {
		text = tooltip_becoming_grand_paramour

		change_variable = {
			which = becoming_grand_paramour
			value = 2
		}
	}
}

this_is_becoming_judicator_effect = {
	custom_tooltip = {
		text = tooltip_becoming_judicator

		change_variable = {
			which = becoming_judicator
			value = 2
		}
	}
}

this_is_becoming_subjugator_effect = {
	custom_tooltip = {
		text = tooltip_becoming_subjugator

		change_variable = {
			which = becoming_subjugator
			value = 2
		}
	}
}

this_is_becoming_prim_effect = {
	custom_tooltip = {
		text = tooltip_becoming_prim

		change_variable = {
			which = becoming_prim
			value = 2
		}
	}
}

this_is_becoming_doll_effect = {
	custom_tooltip = {
		text = tooltip_becoming_doll

		change_variable = {
			which = becoming_doll
			value = 2
		}
	}
}

this_is_becoming_breeder_effect = {
	custom_tooltip = {
		text = tooltip_becoming_breeder

		change_variable = {
			which = becoming_breeder
			value = 2
		}
	}
}

# MUST be used in a province scope
add_lots_thralls_capital_effect = {
	if = {
		limit = {
			NOR = {
				has_province_modifier = capital_thrall_workers_01
				has_province_modifier = capital_thrall_workers_02
				has_province_modifier = capital_thrall_workers_03
				has_province_modifier = capital_thrall_workers_04
				has_province_modifier = capital_thrall_workers_05
				has_province_modifier = capital_thrall_workers_06
			}
		}

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_03
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_01 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_04
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_02 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_05
			years = 5
		}
	}
	else_if = {
		limit = {
			OR = {
				has_province_modifier = capital_thrall_workers_03
				has_province_modifier = capital_thrall_workers_04
				has_province_modifier = capital_thrall_workers_05
				has_province_modifier = capital_thrall_workers_06
			}
		}

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_06
			years = 5
		}
	}
}

# MUST be used in a province scope
add_some_thralls_capital_effect = {
	if = {
		limit = {
			NOR = {
				has_province_modifier = capital_thrall_workers_01
				has_province_modifier = capital_thrall_workers_02
				has_province_modifier = capital_thrall_workers_03
				has_province_modifier = capital_thrall_workers_04
				has_province_modifier = capital_thrall_workers_05
				has_province_modifier = capital_thrall_workers_06
			}
		}

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_02
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_01 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_03
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_02 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_04
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_03 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_05
			years = 5
		}
	}
	else_if = {
		limit = {
			OR = {
				has_province_modifier = capital_thrall_workers_04
				has_province_modifier = capital_thrall_workers_05
				has_province_modifier = capital_thrall_workers_06
			}
		}

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_06
			years = 5
		}
	}
}

# MUST be used in a province scope
add_few_thralls_capital_effect = {
	if = {
		limit = {
			NOR = {
				has_province_modifier = capital_thrall_workers_01
				has_province_modifier = capital_thrall_workers_02
				has_province_modifier = capital_thrall_workers_03
				has_province_modifier = capital_thrall_workers_04
				has_province_modifier = capital_thrall_workers_05
				has_province_modifier = capital_thrall_workers_06
			}
		}

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_01
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_01 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_02
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_02 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_03
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_03 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_04
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_04 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_05
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_05 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_06
			years = 5
		}
	}
	else_if = {
		limit = { has_province_modifier = capital_thrall_workers_06 }

		hidden_effect = {
			remove_province_modifier = capital_thrall_workers_01
			remove_province_modifier = capital_thrall_workers_02
			remove_province_modifier = capital_thrall_workers_03
			remove_province_modifier = capital_thrall_workers_04
			remove_province_modifier = capital_thrall_workers_05
			remove_province_modifier = capital_thrall_workers_06
		}

		add_province_modifier = {
			modifier = capital_thrall_workers_06
			years = 5
		}
	}
}

WL_ritual_hunt_cleanup_effect = {
	clr_flag = do_not_disturb
	hidden_effect = {
		set_variable = {
			which = wl_ritual_hunting
			value = 0
		}
	}

	clr_flag = flag_hunting_wolf_norse
	clr_flag = flag_hunting_wolf_baltic
	clr_flag = flag_hunting_wolf_hellenic

	clr_flag = flag_hunting_eagle_slavic
	clr_flag = flag_hunting_eagle_tengri
	clr_flag = flag_hunting_eagle_bon

	clr_flag = flag_hunting_bear_finnish

	clr_flag = flag_hunting_lion_west_african
	clr_flag = flag_hunting_lion_zun
}

WL_ritual_hunt_flavor_events_effect = {
	hidden_effect = {
		#  Flavor events: (increasing/decreasing hunt variable)
		## Character is about to fall/drown/random (might result in Friendship/Rivalry/Love)
		## Co-hunter is about to fall/drown/random (might result in Friendship/Rivalry/Love)
		## Characters looking for tracks (intrigue) - paranoid
		## Characters need to examine carcass killed by target (martial) - cruel
		## Characters reflect upon their target (learning) - scholar
		## Characters find hermit, ask info on target (diplomacy) - charitable
		## Characters need to interpret old map and pathways (stewardship) - administrator

		## Characters see a bad omen (low piety triggers) - theologian
		## Characters see a good omen (high piety triggers) - theologian

		## Lunatic/Possessed character goes on a Wild Hunt and kills partner

		random_list = {
			15 = { # Character is in trouble
				trigger = {
					event_target:scoped_WL_co_hunter = {
						is_alive = yes
					}
				}

				character_event = {
					id = HF.25603 # The hunter is about to fall
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					trait = craven
				}
				mult_modifier = {
					factor = 1.5
					trait = dull
				}
				mult_modifier = {
					factor = 1.5
					trait = slow
				}
				mult_modifier = {
					factor = 1.5
					trait = imbecile
				}
				mult_modifier = {
					factor = 1.5
					trait = inbred
				}
				mult_modifier = {
					factor = 1.5
					trait = slothful
				}
			}
			15 = { # Co-hunter is in trouble
				trigger = {
					event_target:scoped_WL_co_hunter = {
						is_alive = yes
					}
				}

				character_event = {
					id = HF.25606 # The co-hunter is about to fall/drown/random etc.
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { trait = craven }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { trait = dull }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { trait = slow }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { trait = imbecile }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { trait = inbred }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { trait = slothful }
				}
			}
			25 = { # Characters looking for tracks
				character_event = {
					id = HF.25608
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { intrigue >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { intrigue >= 14 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { intrigue >= 18 }
				}
			}

			25 = { # Characters need to examine carcass
				character_event = {
					id = HF.25609
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { martial >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { martial >= 14 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { martial >= 18 }
				}
			}

			25 = { # Characters reflect upon target
				character_event = {
					id = HF.25610
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { learning >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { learning >= 14 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { learning >= 18 }
				}
			}

			25 = { # Characters persuade hermit for directions
				character_event = {
					id = HF.25611
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { diplomacy >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { diplomacy >= 14 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { diplomacy >= 18 }
				}
			}

			25 = { # Characters need to interpret old map
				character_event = {
					id = HF.25612
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { stewardship >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { stewardship >= 14 }
				}
				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { stewardship >= 18 }
				}
				mult_modifier = {
					factor = 1.5
					has_flag = flag_picked_ritual_co_hunter_smart
				}
			}

			25 = { # Characters see bad omen
				character_event = {
					id = HF.25613
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { learning >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					piety < 50
				}
				mult_modifier = {
					factor = 1.5
					piety < 100
				}
				mult_modifier = {
					factor = 1.5
					piety < 150
				}
			}
			5 = { # Characters see good omen
				character_event = {
					id = HF.25614
					days = 10
					random = 5
				}

				mult_modifier = {
					factor = 1.5
					event_target:scoped_WL_co_hunter = { learning >= 10 }
				}
				mult_modifier = {
					factor = 1.5
					piety >= 250
				}
				mult_modifier = {
					factor = 1.5
					piety >= 350
				}
				mult_modifier = {
					factor = 1.5
					piety >= 450
				}
				mult_modifier = {
					factor = 1.5
					piety >= 550
				}
			}

			100 = { # Lunatic/Possessed ruler starts a Wild Hunt
				trigger = {
					OR = {
						trait = possessed
						trait = lunatic

						AND = {
							has_character_modifier = lycanthropy

							OR = {
								has_flag = flag_hunting_wolf_norse
								has_flag = flag_hunting_wolf_baltic
								has_flag = flag_hunting_wolf_hellenic
							}
						}
					}
					event_target:scoped_WL_co_hunter = {
						is_alive = yes
					}
				}

				character_event = {
					id = HF.25615
					days = 10
					random = 5
				}
			}
		}
	}
}

# Chance of Education trait improvement or burnout case
stable_attribute_improvement_effect = {
	hidden_effect = {
		if = {
			limit = {
				event_target:scoped_improvement_target = {
					has_flag = flag_training_diplomacy_attribute
				}
			}

			event_target:scoped_improvement_target = {
				random_list = {
					20 = { # Education improvement
						trigger = { # Education Improvement only unlocked by synergy
							OR = {
								has_religion_feature = religion_meritocratic
								has_religion_feature = religion_matriarchal
								has_religion_feature = religion_patriarchal
							}

							OR = {
								trait = naive_appeaser
								trait = underhanded_rogue
								trait = charismatic_negotiator
							}
						}

						character_event = {
							id = HF.23761
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = diplomacy
									character = event_target:scoped_improvement_target
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = diplomacy
									character = event_target:scoped_improvement_target
									value >= 6
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = diplomacy
									character = event_target:scoped_improvement_target
									value >= 9
								}
							}
						}
					}

					20 = { # Burnout
						trigger = {
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 1 # Never first time
								}
							}
						}

						character_event = {
							id = HF.23762
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 2
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 4
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 5
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 8
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 12
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = slothful
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = stressed
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								trait = depressed
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								is_ill = yes
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = diligent
							}
						}
					}

					80 = {
						# Nothing
					}
				}
			}
		}

		else_if = {
			limit = {
				event_target:scoped_improvement_target = {
					OR = {
						has_flag = flag_training_martial_attribute
						has_flag = flag_training_combat_rating
					}
				}
			}
			event_target:scoped_improvement_target = {
				random_list = {
					20 = { # Education improvement
						trigger = { # Education Improvement only unlocked by synergy
							OR = {
								has_religion_feature = religion_meritocratic
								has_religion_feature = religion_matriarchal
								has_religion_feature = religion_patriarchal
							}

							OR = {
								trait = misguided_warrior
								trait = tough_soldier
								trait = skilled_tactician
							}
						}

						character_event = {
							id = HF.23761
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = martial
									character = event_target:scoped_improvement_target
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = martial
									character = event_target:scoped_improvement_target
									value >= 6
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = martial
									character = event_target:scoped_improvement_target
									value >= 9
								}
							}
						}
					}

					20 = { # Burnout
						trigger = {
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 1 # Never first time
								}
							}
						}

						character_event = {
							id = HF.23762
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 2
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 4
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 5
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 8
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 12
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = slothful
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = stressed
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								trait = depressed
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								is_ill = yes
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = diligent
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 30
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 35
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 40
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 45
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								age >= 50
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = slow
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = imbecile
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = inbred
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = dull
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = shrewd
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = quick
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = genius
							}
						}
					}

					80 = {
						# Nothing
					}
				}
			}
		}

		else_if = {
			limit = {
				event_target:scoped_improvement_target = {
					has_flag = flag_training_stewardship_attribute
				}
			}
			event_target:scoped_improvement_target = {
				random_list = {
					20 = { # Education improvement
						trigger = { # Education Improvement only unlocked by synergy
							OR = {
								has_religion_feature = religion_meritocratic
								has_religion_feature = religion_matriarchal
								has_religion_feature = religion_patriarchal
							}

							OR = {
								trait = indulgent_wastrel
								trait = thrifty_clerk
								trait = fortune_builder
							}
						}

						character_event = {
							id = HF.23761
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = stewardship
									character = event_target:scoped_improvement_target
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = stewardship
									character = event_target:scoped_improvement_target
									value >= 6
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = stewardship
									character = event_target:scoped_improvement_target
									value >= 9
								}
							}
						}
					}

					20 = { # Burnout
						trigger = {
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 1 # Never first time
								}
							}
						}

						character_event = {
							id = HF.23762
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 2
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 4
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 5
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 8
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 12
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = slothful
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = stressed
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								trait = depressed
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								is_ill = yes
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = diligent
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 30
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 35
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 40
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 45
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								age >= 50
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = slow
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = imbecile
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = inbred
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = dull
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = shrewd
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = quick
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = genius
							}
						}
					}

					80 = {
						# Nothing
					}
				}
			}
		}

		else_if = {
			limit = {
				event_target:scoped_improvement_target = {
					has_flag = flag_training_intrigue_attribute
				}
			}
			event_target:scoped_improvement_target = {
				random_list = {
					20 = { # Education improvement
						trigger = { # Education Improvement only unlocked by synergy
							OR = {
								has_religion_feature = religion_meritocratic
								has_religion_feature = religion_matriarchal
								has_religion_feature = religion_patriarchal
							}

							OR = {
								trait = amateurish_plotter
								trait = flamboyant_schemer
								trait = intricate_webweaver
							}
						}

						character_event = {
							id = HF.23761
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }
								attribute_diff = { attribute = intrigue character = event_target:scoped_improvement_target value = 3 }
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }
								attribute_diff = { attribute = intrigue character = event_target:scoped_improvement_target value = 6 }
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }
								attribute_diff = { attribute = intrigue character = event_target:scoped_improvement_target value = 9 }
							}
						}
					}

					20 = { # Burnout
						trigger = {
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 1 # Never first time
								}
							}
						}

						character_event = {
							id = HF.23762
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 2
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 4
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 5
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 8
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 12
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = slothful
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = stressed
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								trait = depressed
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								is_ill = yes
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = diligent
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 30
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 35
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 40
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 45
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								age >= 50
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = slow
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = imbecile
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = inbred
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = dull
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = shrewd
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = quick
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = genius
							}
						}
					}

					80 = {
						# Nothing
					}
				}
			}
		}

		else_if = {
			limit = {
				event_target:scoped_improvement_target = {
					has_flag = flag_training_learning_attribute
				}
			}
			event_target:scoped_improvement_target = {
				random_list = {
					20 = { # Education improvement
						trigger = { # Education Improvement only unlocked by synergy
							OR = {
								has_religion_feature = religion_meritocratic
								has_religion_feature = religion_matriarchal
								has_religion_feature = religion_patriarchal
							}

							OR = {
								trait = detached_priest
								trait = martial_cleric
								trait = scholarly_theologian
							}
						}

						character_event = {
							id = HF.23761
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								has_religion_feature = religion_meritocratic # More pressure
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = learning
									character = event_target:scoped_improvement_target
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = learning
									character = event_target:scoped_improvement_target
									value >= 6
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								NOT = { character = event_target:scoped_improvement_target }

								attribute_diff = {
									attribute = learning
									character = event_target:scoped_improvement_target
									value >= 9
								}
							}
						}
					}

					20 = { # Burnout
						trigger = {
							event_target:scoped_improvement_ruler = { # Never first time
								check_variable = { which = burnout_count value = 1 }
							}
						}

						character_event = {
							id = HF.23762
							days = 15
							random = 15
						}

						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 2
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 3
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 4
								}
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 5
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 8
								}
							}
						}
						mult_modifier = {
							factor = 2
							event_target:scoped_improvement_ruler = {
								check_variable = {
									which = burnout_count
									value >= 12
								}
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = slothful
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = stressed
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								trait = depressed
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								is_ill = yes
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = diligent
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 30
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								age >= 35
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 40
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								age >= 45
							}
						}
						mult_modifier = {
							factor = 1.75
							event_target:scoped_improvement_ruler = {
								age >= 50
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = slow
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = imbecile
							}
						}
						mult_modifier = {
							factor = 1.5
							event_target:scoped_improvement_ruler = {
								trait = inbred
							}
						}
						mult_modifier = {
							factor = 1.25
							event_target:scoped_improvement_ruler = {
								trait = dull
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = shrewd
							}
						}
						mult_modifier = {
							factor = 0.85
							event_target:scoped_improvement_ruler = {
								trait = quick
							}
						}
						mult_modifier = {
							factor = 0.75
							event_target:scoped_improvement_ruler = {
								trait = genius
							}
						}
					}

					80 = {
						# Nothing
					}
				}
			}
		}
	}
}

landless_pope_effect = {
	if = {
		limit = {
			has_landed_title = k_papal_state
			catholic = { is_name_randomized = no }

			NOT = {
				any_realm_province = {
					always = yes
				}
			}
		}

		character_event = {
			id = HFP.40034 # Papal States becomes Romagna when the Pope holds no lands in Italy
		}
		character_event = {
			id = HFP.40035 # Clean up Papal Guards
		}
	}
}

# Used for rains in African regions...
remove_rain_modifiers_effect = {
	remove_province_modifier = africa_heavy_rain
	remove_province_modifier = africa_light_rain
	remove_province_modifier = africa_drought_risk
	remove_province_modifier = africa_drought
}

set_weather_change_cooldown_effect = {
	add_province_modifier = {
		name = africa_weather_updated
		duration = 300 # Just for safety
		hidden = yes
	}
}

set_rain_flag_heavy_effect = {
	if = {
		limit = {
			# So it's not overwritten and can be checked for time...
			NOT = { has_flag = africa_heavy_rain_flag }
		}

		set_flag = africa_heavy_rain_flag
		clr_flag = africa_light_rain_flag
		clr_flag = africa_drought_risk_flag
		clr_flag = africa_drought_flag
	}
}

set_rain_flag_light_effect = {
	if = {
		limit = {
			# So it's not overwritten and can be checked for time...
			NOT = { has_flag = africa_light_rain_flag }
		}

		clr_flag = africa_heavy_rain_flag
		set_flag = africa_light_rain_flag
		clr_flag = africa_drought_risk_flag
		clr_flag = africa_drought_flag
	}
}

set_rain_flag_drought_risk_effect = {
	if = {
		limit = {
			# So it's not overwritten and can be checked for time...
			NOT = { has_flag = africa_drought_risk_flag }
		}

		clr_flag = africa_heavy_rain_flag
		clr_flag = africa_light_rain_flag
		set_flag = africa_drought_risk_flag
		clr_flag = africa_drought_flag
	}
}

set_rain_flag_drought_effect = {
	if = {
		limit = {
			# So it's not overwritten and can be checked for time...
			NOT = { has_flag = africa_drought_flag }
		}

		clr_flag = africa_heavy_rain_flag
		clr_flag = africa_light_rain_flag
		clr_flag = africa_drought_risk_flag
		set_flag = africa_drought_flag
	}
}

# Needs a province scope...
change_rain_effect = {
	if = {
		limit = { has_province_modifier = africa_heavy_rain }

		random_list = {
			10 = { # Make it worse (risk for drought)...

				remove_rain_modifiers_effect = yes

				if = {
					limit = { has_province_modifier = africa_rain_dance_successful }
					remove_province_modifier = africa_rain_dance_successful
				}

				add_province_modifier = {
					name = africa_drought_risk
					duration = -1
				}

				set_rain_flag_drought_risk_effect = yes

				mult_modifier = { # There is no nearby light rain...
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
				mult_modifier = {
					factor = 2 # There is more heavy rain nearby...
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2 # There is nearby dry weather...
					any_neighbor_province_has_dry_weather_trigger = yes
				}
			}

			10 = { # Make it better (light rain)...
				remove_rain_modifiers_effect = yes

				add_province_modifier = {
					name = africa_light_rain
					duration = -1
				}

				set_rain_flag_light_effect = yes

				mult_modifier = { # There is no nearby drought...
					factor = 2
					any_neighbor_province_has_dry_weather_trigger = no
				}
				mult_modifier = {
					factor = 2 # There is more heavy rain nearby...
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2 # There is light rain nearby...
					any_neighbor_province_has_light_rain_trigger = no
				}
			}

			10 = { # Keep weather (heavy rain)...
				set_rain_flag_heavy_effect = yes
			}
		}
	}
	else_if = {
		limit = { has_province_modifier = africa_light_rain }

		random_list = {
			10 = { # Make it worse (drought risk)...

				remove_rain_modifiers_effect = yes

				if = {
					limit = { has_province_modifier = africa_rain_dance_successful }
					remove_province_modifier = africa_rain_dance_successful
				}

				add_province_modifier = {
					name = africa_drought_risk
					duration = -1
				}

				set_rain_flag_drought_risk_effect = yes

				mult_modifier = { # More likely if have enjoyed it long enough...
					factor = 2
					had_flag = {
						flag = africa_light_rain_flag
						days >= 3600 # almost 10 years...
					}
				}
				mult_modifier = { # More likely if have enjoyed it long enough...
					factor = 2
					had_flag = {
						flag = africa_light_rain_flag
						days >= 6000 # 16,5 years...
					}
				}
				mult_modifier = { # There is no nearby great weather...
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_dry_weather_trigger = yes
				}
			}

			10 = { # Make it better (heavy rain)...
				remove_rain_modifiers_effect = yes

				add_province_modifier = {
					name = africa_heavy_rain
					duration = -1
				}

				set_rain_flag_heavy_effect = yes

				mult_modifier = { # There is no nearby drought...
					factor = 3
					any_neighbor_province_has_dry_weather_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
			}

			10 = { # Keep weather (light rain)...
				set_rain_flag_light_effect = yes
			}
		}
	}
	else_if = {
		limit = { has_province_modifier = africa_drought_risk }

		random_list = {
			10 = { # Make it worse (actual drought)...
				remove_rain_modifiers_effect = yes

				if = {
					limit = { has_province_modifier = africa_rain_dance_successful }
					remove_province_modifier = africa_rain_dance_successful
				}

				add_province_modifier = {
					name = africa_drought_risk
					duration = -1
				}

				set_rain_flag_drought_effect = yes

				mult_modifier = { # There is no nearby rain...
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = no
				}
			}

			10 = { # Make it better (light rain)...
				remove_rain_modifiers_effect = yes

				add_province_modifier = {
					name = africa_light_rain
					duration = -1
				}

				set_rain_flag_light_effect = yes

				mult_modifier = { # There is no nearby drought...
					factor = 3
					any_neighbor_province_has_dry_weather_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
			}

			10 = { # Keep weather (drought risk)...
				set_rain_flag_drought_risk_effect = yes
			}
		}
	}
	else_if = {
		limit = { has_province_modifier = africa_drought }

		random_list = {
			10 = { # Make it better (heavy rain)...
				remove_rain_modifiers_effect = yes

				add_province_modifier = {
					name = africa_heavy_rain
					duration = -1
				}

				set_rain_flag_heavy_effect = yes

				mult_modifier = { # More likely if have suffered long enough...
					factor = 2
					had_flag = {
						flag = africa_drought_flag
						days >= 3600 # Almost 10 years...
					}
				}
				mult_modifier = { # More likely if have suffered long enough...
					factor = 2
					had_flag = {
						flag = africa_drought_flag
						days >= 6000 # 16,5 years...
					}
				}
				mult_modifier = { #There is no nearby drought...
					factor = 3
					any_neighbor_province_has_dry_weather_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
			}

			15 = { # Make it better (drought risk)...
				remove_rain_modifiers_effect = yes

				if = {
					limit = { has_province_modifier = africa_rain_dance_successful }
					remove_province_modifier = africa_rain_dance_successful
				}

				add_province_modifier = {
					name = africa_drought_risk
					duration = -1
				}

				set_rain_flag_drought_risk_effect = yes

				mult_modifier = { # More likely if have suffered long enough...
					factor =2
					had_flag = {
						flag = africa_drought_flag
						days >= 3600 # Almost 10 years...
					}
				}
				mult_modifier = { # More likely if have suffered long enough...
					factor = 2
					had_flag = {
						flag = africa_drought_flag
						days >= 6000 # 16,5 years...
					}
				}
				mult_modifier = { # There is no nearby drought...
					factor = 3
					any_neighbor_province_has_dry_weather_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = yes
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
			}

			10 = { # Keep weather (actual drought)...
				set_rain_flag_drought_effect = yes

				mult_modifier = { # There is no nearby great weather...
					factor = 2
					any_neighbor_province_has_light_rain_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_heavy_rain_trigger = no
				}
				mult_modifier = {
					factor = 2
					any_neighbor_province_has_dry_weather_trigger = yes
				}
			}
		}
	}

	set_weather_change_cooldown_effect = yes # Sets a hidden modifier...
}

clone_weather_to_prev_effect = {
	trigger_switch = {
		on_trigger = has_province_modifier

		africa_heavy_rain = {
			PREV = {
				remove_rain_modifiers_effect = yes
				add_province_modifier = {
					name = africa_heavy_rain
					duration = -1
				}
				set_rain_flag_heavy_effect = yes
			}
		}
		africa_light_rain = {
			PREV = {
				remove_rain_modifiers_effect = yes
				add_province_modifier = {
					name = africa_light_rain
					duration = -1
				}
				set_rain_flag_light_effect = yes
			}
		}
		africa_drought_risk = {
			PREV = {
				remove_rain_modifiers_effect = yes
				add_province_modifier = {
					name = africa_drought_risk
					duration = -1
				}
				set_rain_flag_drought_risk_effect = yes
			}
		}
		africa_drought = {
			PREV = {
				remove_rain_modifiers_effect = yes
				add_province_modifier = {
					name = africa_drought
					duration = -1
				}
				set_rain_flag_drought_effect = yes
			}
		}
	}

	PREV = { set_weather_change_cooldown_effect = yes } # Sets a hidden modifier...
}

calculate_weather_status_in_demesne_effect = {
	### Find out what had the most impact...
	set_variable = {
		which = light_rain_count
		value = 0
	}
	set_variable = {
		which = heavy_rain_count
		value = 0
	}
	set_variable = {
		which = drought_risk_count
		value = 0
	}
	set_variable = {
		which = drought_count
		value = 0
	}

	# Light rain...?
	while = {
		limit = {
			any_demesne_province = {
				has_province_modifier = africa_light_rain
				NOT = { has_flag = has_been_counted }
			}
		}

		random_demesne_province = {
			limit = {
				has_province_modifier = africa_light_rain
				NOT = { has_flag = has_been_counted }
			}

			PREV = {
				change_variable = {
					which = light_rain_count
					value = 1
				}
			}
			set_flag = has_been_counted
		}
	}

	# Heavy rain...?
	while = {
		limit = {
			any_demesne_province = {
				has_province_modifier = africa_heavy_rain
				NOT = { has_flag = has_been_counted }
			}
		}

		random_demesne_province = {
			limit = {
				has_province_modifier = africa_heavy_rain
				NOT = { has_flag = has_been_counted }
			}

			PREV = {
				change_variable = {
					which = heavy_rain_count
					value = 1
				}
			}
			set_flag = has_been_counted
		}
	}

	# Drought risk...?
	while = {
		limit = {
			any_demesne_province = {
				has_province_modifier = africa_drought_risk
				NOT = { has_flag = has_been_counted }
			}
		}

		random_demesne_province = {
			limit = {
				has_province_modifier = africa_drought_risk
				NOT = { has_flag = has_been_counted }
			}
			PREV = {
				change_variable = {
					which = drought_risk_count
					value = 1
				}
			}
			set_flag = has_been_counted
		}
	}

	# Actual drought...?
	while = {
		limit = {
			any_demesne_province = {
				has_province_modifier = africa_drought
				NOT = { has_flag = has_been_counted }
			}
		}

		random_demesne_province = {
			limit = {
				has_province_modifier = africa_drought
				NOT = { has_flag = has_been_counted }
			}

			PREV = {
				change_variable = {
					which = drought_count
					value = 1
				}
			}
			set_flag = has_been_counted
		}
	}

	any_demesne_province = {
		clr_flag = has_been_counted # Clean up
	}

	clr_flag = mostly_drought
	clr_flag = mostly_drought_risk
	clr_flag = mostly_light_rain
	clr_flag = mostly_heavy_rain
	clr_flag = one_rain_variable_is_higher_than_one_drought_variable
	clr_flag = light_rain_variable_is_higher_than_drought_variable
	clr_flag = light_rain_variable_is_higher_than_drought_risk_variable
	clr_flag = heavy_rain_variable_is_higher_than_drought_variable
	clr_flag = heavy_rain_variable_is_higher_than_drought_risk_variable


	if = {
		limit = {
			check_variable = { # If actual drought is more common than the risk of it...
				which = drought_count
				which >= drought_risk_count
				which = ROOT
			}
			check_variable = { # and more common than heavy rain...
				which = drought_count
				which >= heavy_rain_count
				which = ROOT
			}
			check_variable = { # and more than light rain...
				which = drought_count
				which >= light_rain_count
				which = ROOT
			}
		}
		set_flag = mostly_drought
	}

	if = {
		limit = {
			check_variable = { # If drought risk is more common than actual drought...
				which = drought_risk_count
				which >= drought_count
				which = ROOT
			}
			check_variable = { # and more common than heavy rain...
				which = drought_risk_count
				which >= heavy_rain_count
				which = ROOT
			}
			check_variable = { # and more than light rain...
				which = drought_risk_count
				which >= light_rain_count
				which = ROOT
			}
		}
		set_flag = mostly_drought_risk
	}

	if = {
		limit = {
			check_variable = { # If light rain is more common than drought risk...
				which = light_rain_count
				which >= drought_risk_count
				which = ROOT
			}
			check_variable = { # and more common than heavy rain...
				which = light_rain_count
				which >= heavy_rain_count
				which = ROOT
			}
			check_variable = { # and more than drought...
				which = light_rain_count
				which >= drought_count
				which = ROOT
			}
		}
		set_flag = mostly_light_rain
	}

	if = {
		limit = {
			check_variable = { # If heavy rain is more common than drought risk...
				which = heavy_rain_count
				which >= drought_risk_count
				which = ROOT
			}
			check_variable = { # and more common than heavy rain...
				which = heavy_rain_count
				which >= light_rain_count
				which = ROOT
			}
			check_variable = { # and more than drought...
				which = heavy_rain_count
				which >= drought_count
				which = ROOT
			}
		}

		set_flag = mostly_heavy_rain
	}

	if = {
		limit = {
			OR = {
				check_variable = {
					which = light_rain_count
					which >= drought_count
					which = ROOT
				}
				check_variable = {
					which = light_rain_count
					which >= drought_risk_count
					which = ROOT
				}
				check_variable = {
					which = heavy_rain_count
					which >= drought_count
					which = ROOT
				}
				check_variable = {
					which = heavy_rain_count
					which >= drought_risk_count
					which = ROOT
				}
			}
		}

		set_flag = one_rain_variable_is_higher_than_one_drought_variable

		if = {
			limit = {
				check_variable = {
					which = light_rain_count
					which >= drought_count
					which = ROOT
				}
			}

			set_flag = light_rain_variable_is_higher_than_drought_variable
		}

		if = {
			limit = {
				check_variable = {
					which = light_rain_count
					which >= drought_risk_count
					which = ROOT
				}
			}

			set_flag = light_rain_variable_is_higher_than_drought_risk_variable
		}

		if = {
			limit = {
				check_variable = {
					which = heavy_rain_count
					which >= drought_count
					which = ROOT
				}
			}

			set_flag = heavy_rain_variable_is_higher_than_drought_variable
		}

		if = {
			limit = {
				check_variable = {
					which = heavy_rain_count
					which >= drought_risk_count
					which = ROOT
				}
			}

			set_flag = heavy_rain_variable_is_higher_than_drought_risk_variable
		}
	}
}

clr_flags_introduce_heir_effect = {
	clr_flag = ZE_evt_heir_1
	clr_flag = ZE_evt_heir_2
	clr_flag = ZE_evt_heir_2B
	clr_flag = ZE_evt_heir_3
	clr_flag = ZE_evt_heir_3B
	clr_flag = ZE_evt_heir_4
	clr_flag = ZE_evt_heir_5
	clr_flag = ZE_evt_heir_6
	clr_flag = ZE_evt_heir_7
	clr_flag = ZE_evt_heir_8
}

murder_bloodline_check_effect = {
	change_variable = {
		which = bloodline_murdered_people
		value = 1
	}

	if = { # First check for pure Murder Bloodline
		limit = {
			check_variable = {
				which = bloodline_murdered_people
				value >= 30
			}
			has_ambition = obj_forge_bloodline
		}

		set_flag = flag_about_to_murder_bloodline
		character_event = {
			id = HF.24025
			days = 25
			random = 25
		}
	}
	else_if = { # Then check for Murder War Hybrid
		limit = {
			check_variable = {
				which = bloodline_murdered_people
				value >= 20
			}
			check_variable = {
				which = bloodline_won_wars
				value >= 10
			}
			has_ambition = obj_forge_bloodline
		}

		set_flag = flag_about_to_murder_bloodline
		narrative_event = {
			id = HF.24045
			days = 25
			random = 25
		}
	}
	else_if = { # Then check for Murder Peace Hybrid
		limit = {
			check_variable = {
				which = bloodline_murdered_people
				value >= 20
			}
			check_variable = {
				which = bloodline_peaceful_years
				value >= 15
			}
			has_ambition = obj_forge_bloodline
		}

		set_flag = flag_about_to_murder_bloodline
		narrative_event = {
			id = HF.24046
			days = 25
			random = 25
		}
	}
	else_if = { # Then check for Murder Builder Hybrid
		limit = {
			check_variable = {
				which = bloodline_murdered_people
				value >= 20
			}
			check_variable = {
				which = bloodline_built_holdings
				value >= 15
			}
			has_ambition = obj_forge_bloodline
		}

		set_flag = flag_about_to_murder_bloodline
		narrative_event = {
			id = HF.24048
			days = 25
			random = 25
		}
	}
}

princely_elective_german_elector_setup_effect = {
	e_hre = {
		save_persistent_event_target = { name = hre_title_1_per scope = c_koln }		# County of Koln
		save_persistent_event_target = { name = hre_title_2_per scope = c_mainz }		# County of Mainz
		save_persistent_event_target = { name = hre_title_3_per scope = c_trier }		# County of Trier
		save_persistent_event_target = { name = hre_title_4_per scope = d_bohemia }		# Duchy of Bohemia
		save_persistent_event_target = { name = hre_title_5_per scope = d_franconia }	# Duchy of Franconia
		save_persistent_event_target = { name = hre_title_6_per scope = d_saxony }		# Duchy of Saxony
		save_persistent_event_target = { name = hre_title_7_per scope = d_brandenburg }	# Duchy of Brandenburg
	}
}

princely_elective_french_elector_setup_effect = {
	e_hre = {
		save_persistent_event_target = { name = hre_title_1_per scope = c_amiens }		# County of Amiens
		save_persistent_event_target = { name = hre_title_2_per scope = c_reims }		# County of Reims
		save_persistent_event_target = { name = hre_title_3_per scope = c_anjou }		# County of Anjou
		save_persistent_event_target = { name = hre_title_4_per scope = d_aquitaine }	# Duchy of Aquitaine
		save_persistent_event_target = { name = hre_title_5_per scope = d_burgundy }	# Duchy of Burgundy
		save_persistent_event_target = { name = hre_title_6_per scope = d_normandy }	# Duchy of Normandy
		save_persistent_event_target = { name = hre_title_7_per scope = d_champagne }	# Duchy of Champagne
	}
}

princely_elective_italian_elector_setup_effect = {
	e_hre = {
		save_persistent_event_target = { name = hre_title_1_per scope = c_roma }		# County of Rome
		save_persistent_event_target = { name = hre_title_2_per scope = c_ravenna }		# County of Ravenna
		save_persistent_event_target = { name = hre_title_3_per scope = c_genoa }		# County of Genoa
		save_persistent_event_target = { name = hre_title_4_per scope = d_latium }		# Duchy of Latium
		save_persistent_event_target = { name = hre_title_5_per scope = d_lombardia }	# Duchy of Milan
		save_persistent_event_target = { name = hre_title_6_per scope = d_toscana }		# Duchy of Tuscany
		save_persistent_event_target = { name = hre_title_7_per scope = d_pisa }        # Duchy of Pisa
	}
}

princely_elective_spain_elector_setup_effect = {
	e_hre = {
		save_persistent_event_target = { name = hre_title_1_per scope = c_santiago }	# County of Santiago
		save_persistent_event_target = { name = hre_title_2_per scope = c_leon }		# County of Cordoba
		save_persistent_event_target = { name = hre_title_3_per scope = c_cordoba }		# County of Leon
		save_persistent_event_target = { name = hre_title_4_per scope = d_barcelona }	# Duchy of Barcelona
		save_persistent_event_target = { name = hre_title_5_per scope = d_castilla }	# Duchy of Castille
		save_persistent_event_target = { name = hre_title_6_per scope = d_porto }		# Duchy of Portucale
		save_persistent_event_target = { name = hre_title_7_per scope = d_sevilla }		# Duchy of Seville
	}
}

princely_elective_britannia_elector_setup_effect = {
	e_hre = {
		save_persistent_event_target = { name = hre_title_1_per scope = c_kent }		# County of Kent
		save_persistent_event_target = { name = hre_title_2_per scope = c_worcester }	# County of Worcester
		save_persistent_event_target = { name = hre_title_3_per scope = c_durham }		# County of Durham
		save_persistent_event_target = { name = hre_title_4_per scope = d_hereford }		# Duchy of Mercia
		save_persistent_event_target = { name = hre_title_5_per scope = d_meath }		# Duchy of Meath
		save_persistent_event_target = { name = hre_title_6_per scope = d_albany }		# Duchy of Albany
		save_persistent_event_target = { name = hre_title_7_per scope = d_gwynedd }		# Duchy of Gwynedd
	}
}

princely_elective_apply_elector_setup_effect = {
	hidden_effect = {
		capital_scope = {
			trigger_switch = {
				on_trigger = region

				world_europe_south_italy = {
					princely_elective_italian_elector_setup_effect = yes
				}
				world_europe_west_francia = {
					princely_elective_french_elector_setup_effect = yes
				}
				world_europe_west_germania= {
					princely_elective_german_elector_setup_effect = yes
				}
				world_europe_west_iberia = {
					princely_elective_spain_elector_setup_effect = yes
				}
				world_europe_west_brittania = {
					princely_elective_britannia_elector_setup_effect = yes
				}
				fallback = { # If outside usual borders, default to Germania
					princely_elective_german_elector_setup_effect = yes
				}
			}
		}
	}
}

give_random_character_modifier_effect = {
	random_list = {
		100 = {
			trigger = {
				NOT = { has_character_modifier = aspiring_poet }
			}

			add_character_modifier = {
				name = aspiring_poet
				years = 5
			}

			mult_modifier = {
				factor = 2
				learning >= 12
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = aspiring_duelist }
			}

			add_character_modifier = {
				name = aspiring_duelist
				years = 5
			}

			mult_modifier = {
				factor = 2
				martial >= 12
			}
			mult_modifier = {
				factor = 2
				OR = {
					duelist_skill_is_medium_group_trigger = yes
					duelist_skill_is_high_group_trigger = yes
				}
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = aspiring_hunter }
			}

			add_character_modifier = {
				name = aspiring_hunter
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = aspiring_falconer }
			}

			add_character_modifier = {
				name = aspiring_falconer
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = learning_advice }
			}

			add_character_modifier = {
				name = learning_advice
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = slept_in_church }
			}

			add_character_modifier = {
				name = slept_in_church
				years = 5
			}

			mult_modifier = {
				factor = 2
				trait = drunkard
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = gambler }
			}

			add_character_modifier = {
				name = gambler
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = whoremaster }
			}

			add_character_modifier = {
				name = whoremaster
				years = 5
			}

			mult_modifier = {
				factor = 2
				trait = lustful
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = good_deeds }
			}

			add_character_modifier = {
				name = good_deeds
				years = 5
			}

			mult_modifier = {
				factor = 1.5
				is_benevolent_trigger = yes
			}
			mult_modifier = {
				factor = 1.5
				has_pleasant_personality_trigger = yes
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = proving_bravery }
			}

			add_character_modifier = {
				name = proving_bravery
				years = 5
			}

			mult_modifier = {
				factor = 2
				trait = brave
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = suspected_coward }
			}

			add_character_modifier = {
				name = suspected_coward
				years = 5
			}

			mult_modifier = {
				factor = 0.5
				trait = brave
			}
		}

		5 = {
			trigger = {
				NOT = { has_character_modifier = speaking_in_tounges }
			}

			add_character_modifier = {
				name = speaking_in_tounges
				years = 5
			}

			mult_modifier = {
				factor = 4
				trait = lunatic
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = good_times }
			}

			add_character_modifier = {
				name = good_times
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = good_hunt }
			}

			add_character_modifier = {
				name = good_hunt
				years = 5
			}

			mult_modifier = {
				factor = 2
				trait = hunter
			}
		}

		5 = {
			trigger = {
				NOT = { has_character_modifier = epic_hangover }
			}

			add_character_modifier = {
				name = epic_hangover
				years = 5
			}

			mult_modifier = {
				factor = 4
				trait = drunkard
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = weird_scholar }
			}

			add_character_modifier = {
				name = weird_scholar
				years = 5
			}

			mult_modifier = {
				factor = 2
				learning >= 12
			}
		}

		100 = {
			trigger = {
				has_lover = yes
				NOT = { has_character_modifier = comfort_of_lover }
			}

			add_character_modifier = {
				name = comfort_of_lover
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = sleep_deprivation }
			}

			add_character_modifier = {
				name = sleep_deprivation
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = pet_cat }
			}

			add_character_modifier = {
				name = pet_cat
				years = 5
			}

			random_list = {
				25 = {
					trigger = { is_female = yes }

					add_character_modifier = {
						name = crazy_cat_lady
						years = 5
					}
				}

				25 = {
					trigger = { is_female = no }

					add_character_modifier = {
						name = crazy_cat_lord
						years = 5
					}
				}

				50 = {
					# Nothing
				}
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = invigorated }
			}

			add_character_modifier = {
				name = invigorated
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = good_listener }
			}

			add_character_modifier = {
				name = good_listener
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = confident }
			}

			add_character_modifier = {
				name = confident
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = bad_person }
				is_benevolent_trigger = no
				has_pleasant_personality_trigger = no
			}

			add_character_modifier = {
				name = bad_person
				years = 5
			}

			mult_modifier = {
				factor = 2
				OR = {
					is_evil_trigger = yes
					has_unpleasant_personality_trigger = yes
				}
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = pet_parrot }
			}

			add_character_modifier = {
				name = pet_parrot
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = pet_owl }
			}

			add_character_modifier = {
				name = pet_owl
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = taking_it_easy }
			}

			add_character_modifier = {
				name = taking_it_easy
				years = 5
			}

			mult_modifier = {
				factor = 2
				trait = slothful
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = fell_into_the_river }
			}

			add_character_modifier = {
				name = fell_into_the_river
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = green_fingers }
			}

			add_character_modifier = {
				name = green_fingers
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = pet_house_dog }
			}

			add_character_modifier = {
				name = pet_house_dog
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = pet_hedgehog }
			}

			add_character_modifier = {
				name = pet_hedgehog
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = pet_otter }
			}

			add_character_modifier = {
				name = pet_otter
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = bad_nights_sleep }
			}

			add_character_modifier = {
				name = bad_nights_sleep
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = good_nights_sleep }
			}

			add_character_modifier = {
				name = good_nights_sleep
				years = 5
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = well_spoken }
			}

			add_character_modifier = {
				name = well_spoken
				years = 5
			}

			mult_modifier = {
				factor = 2
				diplomacy >= 12
			}
		}

		100 = {
			trigger = {
				NOT = { has_character_modifier = jumbling_words }
			}

			add_character_modifier = {
				name = jumbling_words
				years = 5
			}

			mult_modifier = {
				factor = 2
				diplomacy < 8
			}
		}

		100 = {
			trigger = {
				has_injury_trigger = no
			}

			apply_random_minor_injury_effect = yes
		}
	}
}

assign_random_nickname_effect = {
	random_list = {
		10 = { give_nickname = nick_the_unlucky }
		10 = { give_nickname = nick_the_lucky }
		10 = { give_nickname = nick_the_careless }
		10 = { give_nickname = nick_the_jittery }
		10 = { give_nickname = nick_the_dry_throat }
		10 = { give_nickname = nick_the_messy }
		10 = { give_nickname = nick_the_feeble }
		10 = { give_nickname = nick_the_red_cheeks }
		10 = { give_nickname = nick_the_blushing }
		10 = { give_nickname = nick_the_twitchy }

		10 = {
			trigger = { trait = brave }
			random_list = {
				10 = { give_nickname = nick_the_brave }
				10 = { give_nickname = nick_the_fearless }
			}
		}

		5 = {
			give_nickname = nick_the_clueless

			mult_modifier = {
				factor = 4
				learning < 6
			}
		}

		10 = {
			give_nickname = nick_the_ill_tempered

			mult_modifier = {
				factor = 4
				OR = {
					is_evil_trigger = yes
					has_unpleasant_personality_trigger = yes
				}
			}
		}

		10 = {
			give_nickname = nick_the_affable

			mult_modifier = {
				factor = 4
				OR = {
					has_pleasant_personality_trigger = yes
					is_pious_trigger = yes
				}
			}
		}

		10 = {
			trigger = { age < 30 }

			give_nickname = nick_the_youthful
		}

		5 = {
			give_nickname = nick_the_beguiling

			mult_modifier = {
				factor = 4
				is_attractive_trigger = yes
			}
		}

		10 = {
			trigger = { trait = lustful }

			give_nickname = nick_the_lewd
		}

		5 = {
			give_nickname = nick_the_unchaste

			mult_modifier = {
				factor = 4
				trait = lustful
			}
			mult_modifier = {
				factor = 2
				has_lover = yes
			}
		}

		5 = {
			trigger = {
				uses_decadence = yes
				decadence >= 50
			}

			give_nickname = nick_the_decadent

			mult_modifier = {
				factor = 4
				decadence >= 70
			}
		}

		10 = {
			trigger = { has_unpleasant_personality_trigger = yes }

			random_list = {
				10 = {
					give_nickname = nick_the_shrewd
				}
				10 = {
					give_nickname = nick_the_wily
				}
			}
		}

		10 = {
			trigger = { has_pleasant_personality_trigger = yes }

			give_nickname = nick_the_jolly
		}

		10 = {
			trigger = { has_pleasant_personality_trigger = yes }

			random_list = {
				10 = { give_nickname = nick_the_gracious }
				10 = { give_nickname = nick_the_kind }
				10 = { give_nickname = nick_the_good }
			}
		}

		10 = {
			trigger = { trait = patient }

			random_list = {
				10 = { give_nickname = nick_the_tenacious }
				10 = { give_nickname = nick_the_mule }
			}
		}

		5 = {
			give_nickname = nick_the_strange

			mult_modifier = {
				factor = 4
				has_mental_disorder_trigger = yes
			}
		}

		10 = {
			trigger = { is_weak_trigger = yes }

			give_nickname = nick_the_clumsy
		}

		10 = {
			trigger = { is_impious_trigger = yes }

			give_nickname = nick_the_evil
		}

		10 = {
			trigger = { is_strong_trigger = yes }

			give_nickname = nick_the_strong
		}

		10 = {
			give_nickname = nick_the_merry

			mult_modifier = {
				factor = 2
				has_pleasant_personality_trigger = yes
			}
		}

		10 = {
			give_nickname = nick_the_gentle

			mult_modifier = {
				factor = 2
				has_pleasant_personality_trigger = yes
			}
		}

		10 = {
			trigger = { trait = proud }

			give_nickname = nick_the_proud
		}

		10 = {
			trigger = { trait = shy }

			give_nickname = nick_the_silent
		}

		10 = {
			trigger = { trait = chaste }

			give_nickname = nick_the_chaste
		}

		10 = {
			trigger = {
				is_female = no
				is_attractive_trigger = yes
			}

			random_list = {
				10 = { give_nickname = nick_the_handsome }
				10 = { give_nickname = nick_the_vain }
			}
		}

		10 = {
			trigger = {
				is_female = yes
				is_attractive_trigger = yes
			}

			random_list = {
				10 = { give_nickname = nick_the_fair }
				10 = { give_nickname = nick_the_vain }
				10 = { give_nickname = nick_the_flower }
			}
		}

		10 = {
			trigger = { is_unattractive_trigger = yes }

			random_list = {
				10 = { give_nickname = nick_the_hideous }
				10 = { give_nickname = nick_the_frog }
				10 = { give_nickname = nick_the_repulsive }
			}
		}

		10 = {
			trigger = { trait = lunatic }

			give_nickname = nick_the_mad
		}

		10 = {
			trigger = { trait = drunkard }

			give_nickname = nick_the_drunkard
		}

		10 = {
			trigger = { learning >= 10 }

			give_nickname = nick_the_wise

			mult_modifier = {
				factor = 2
				learning >= 14
			}
		}

		10 = {
			trigger = { is_pious_trigger = yes }

			random_list = {
				10 = { give_nickname = nick_the_pious }
				10 = { give_nickname = nick_the_blessed }
			}
		}

		10 = {
			trigger = { age < 25 }

			give_nickname = nick_the_young
		}

		10 = {
			trigger = { age >= 50 }

			give_nickname = nick_the_old
		}

		10 = {
			trigger = { learning >= 10 }

			random_list = {
				10 = { give_nickname = nick_the_scholar }
				10 = { give_nickname = nick_the_understanding }
				10 = { give_nickname = nick_the_healer }
			}
		}

		10 = {
			trigger = { combat_rating >= 10 }

			give_nickname = nick_the_oakskin
		}

		10 = {
			trigger = { trait = slothful }

			give_nickname = nick_the_sleepy
		}

		10 = {
			trigger = { base_health < 3 }

			random_list = {
				10 = { give_nickname = nick_butter_teeth }
				10 = { give_nickname = nick_the_toothless }
			}
		}

		10 = {
			trigger = { trait = craven }

			random_list = {
				10 = { give_nickname = nick_the_cowardly }
				10 = { give_nickname = nick_the_squirmy }
			}
		}

		10 = {
			trigger = { trait = paranoid }

			give_nickname = nick_the_frantic
		}

		10 = {
			trigger = {
				NOR = {
					trait = genius
					trait = quick
				}
			}

			random_list = {
				10 = { give_nickname = nick_the_thin_minded }
				10 = { give_nickname = nick_the_forgetful }
			}

			mult_modifier = {
				factor = 4
				OR = {
					trait = imbecile
					trait = slow
				}
			}
		}

		10 = {
			trigger = {
				NOT = { trait = gregarious }
			}

			give_nickname = nick_the_recluse

			mult_modifier = {
				factor = 2
				trait = shy
			}
		}

		10 = {
			trigger = { trait = wroth }

			give_nickname = nick_the_short_tempered
		}

		10 = {
			trigger = {
				NOT = { trait = content }
			}

			give_nickname = nick_the_whiner
		}

		10 = {
			trigger = {
				trait = deceitful
			}

			give_nickname = nick_the_liar
		}
	}
}

abdicate_holy_order_if_religion_changes_effect = {
	if = {
		limit = {
			ai = yes
			holy_order = yes

			any_demesne_title = {
				holy_order = yes
				NOT = { religion = PREV }
			}
		}

		abdicate = yes
		log = "[This.GetTitledFirstName] was found to be unfit to lead the [Prev.GetName] due to religious conflict!\nTitle is [Prev.Religion.GetName], but leader is not.\nROOT = [Root.GetTitledFirstName]\nFROM = [From.GetTitledFirstName]\nPREV = [Prev.GetTitledFirstName]"
	}
}