## to create a quest you can either:

	set_quest_target = {					# The current scope becomes the target for a quest
		id = quest_id						# If the quest exists, the target is changed (or set if there was none), otherwise the quest is created
		holder = set_quest_target			# If the quest doesn't exist, a new quest by that name is created
		society = optional_society_name		# Optional
	}

or

	set_quest = {							# Scope is the character who gets the quest
		id = quest_id						# This will always create a quest for the target (scope) character
		society = optional_society_name
	}

# There is no quest database where all the descriptions / possibilities are.
# Quests IDs are dynamic and can be anything
# quest targets can only be characters, titles or provinces. when using scopes such as any_quest_target you have to remember and handle each appropriately

# there are three localization key you must create for a quest to appear correctly:
	quest_id;The name of the quest;;;;;;;;;;;;x
	quest_id_fallback;The name of the quest if no target is found. Useful if your loc depends on the target. Needed to ensure it shows up nicely in triggers (E.G., "Evoke the Sympathy of [FromFrom.GetTitledFirstName]" would fail in a trigger if you don't have a quest, so you add a fallbakc of "Evoke the Sympathy of a Ruler"). Adding "_fallback" will work for the other loc keys too, so can be used if you have different versions of the same quest where not all versions target something
	quest_id_DESC;The longer description for the quest. It uses $SOCIETY$ for the society (if any), $WHO$ for the character who is doing the quest and $TARGET$ for the target of the quest (if any);;;;;;;;;;;;x
	quest_id_TOOLTIP;The tooltip shown for the quest. It uses $SOCIETY$, $WHO$ and $TARGET$ for in the same way as quest_id_DESC;;;;;;;;;;;;x

# note if $TARGET$ or $SOCIETY$ are specified when they're not relevant, an empty string will be displayed