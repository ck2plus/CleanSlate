###########################################
#                                         #
# New Duel events					      #
# Fired from various duels				  #
#                                         #
# ID HFP.10095-HFP.10200	              #
#                                         #
###########################################

namespace = HFP

### CLAIM DUELS
# Get challenged (sent from duel_decision )
character_event = {
	id = HF.10095
	title = claim_duel_challenge_title
	picture = GFX_evt_bloodlines
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HF_10095_A
		trigger = {
			event_target:combatant_1 = { has_character_flag = wants_single_title_from@event_target:combatant_2 }
		}
	}
	desc = {
		text = EVTDESC_HF_10095_B
		trigger = {
			event_target:combatant_1 = { has_character_flag = wants_multiple_titles_from@event_target:combatant_2 }
		}
	}

	is_triggered_only = yes

	immediate = {
		if = { # To prevent spam...
			limit = { NOT = { has_character_modifier = recent_duel_timer } }

			add_character_modifier = {
				name = recent_duel_timer
				months = 3
				hidden = yes
			}
		}

		event_target:combatant_1 = { # Challenger
			if = {
				limit = { NOT = { has_character_modifier = recent_duel_timer } } # Special circumstances, like initiation duel, etc

				add_character_modifier = {
					name = recent_duel_timer
					months = 3
					hidden = yes
				}
			}
		}
	}

	option = { # Challenge accepted
		name = EVTOPTA_WOL_11000

		event_target:combatant_1 = {
			show_scope_change = no

			character_event = {
				id = HF.10096
				days = 2
				tooltip = EVTOPTA_HF_10095_TT
			}
		}

		random = {
			chance = 20
			remove_trait_craven_effect = yes
		}

		pacifists_lose_piety_effect = yes

		if = {
			limit = { is_member_of_any_warrior_lodge_trigger = yes } # Warriors like a warrior who acts like one...
			add_legend_progress_trivial_effect = yes
		}


		set_character_flag = add_duel_xp
		clr_character_flag = punish_declining

		ai_chance = {
			factor = 20

			mult_modifier = {
				factor = 2
				trait = proud
			}

			mult_modifier = {
				factor = 0.5
				trait = craven
			}

			mult_modifier = {
				factor = 0.3
				religion = jain
			}
		}
	}

	option = { # No way! He/She can't just DUEL me for my titles...!
		name = {
			text = EVTOPTA_HF_10095_wroth
			trigger = { trait = wroth }
		}
		name = {
			text = EVTOPTA_HF_10095_ordely
			trigger = {
				OR = {
					trait = administrator
					is_learned_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_HF_10095_craven
			trigger = { NOT = { trait = wroth } }
		}

		if = {
			limit = { trait = craven }

			add_character_modifier = {
				name = cowardly_ruler
				years = 5
			}
		}
		else = {
			remove_trait_silently_brave_effect = yes
			add_trait = craven
		}

		if = {
			limit = { has_character_flag = punish_declining }
			clr_character_flag = punish_declining

			prestige = -50

			add_character_modifier = {
				name = declined_prestige_duel_timer
				years = 3
				hidden = yes
			}
		}

		hidden_effect = {
			remove_character_modifier = recent_duel_timer

			event_target:combatant_1 = { # The attacker/combatant_1
				remove_character_modifier = recent_duel_timer

				if = {
					limit = { has_character_modifier = duels_declined }

					opinion = {
						name = opinion_declined_my_duel # For visuals
						who = ROOT
						years = 100
					}
				}
				else = {
					opinion = {
						name = opinion_fled_duel
						who = ROOT
						years = 100
					}
				}

				character_event = {
					id = HFP.10097 # Duel rejected...
					days = 3
				}
			}
		}

		increase_cowardly_status_effect = yes # Tracks duel cowardice

		ai_chance = {
			factor = 3

			mult_modifier = {
				factor = 1.5
				trait = craven
			}
		}
	}
}

# Start the duel - For the attacker (combatant_1)
character_event = {
	id = HF.10096
	title = challenge_accepted_title
	picture = GFX_evt_bloodlines
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HF_10096_A
		trigger = {
			event_target:combatant_1 = { has_character_flag = wants_single_title_from@event_target:combatant_2 }
		}
	}
	desc = {
		text = EVTDESC_HF_10096_B
		trigger = {
			event_target:combatant_1 = { has_character_flag = wants_multiple_titles_from@event_target:combatant_2 }
		}
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_WOL_11001 # Let's fight!

		if = {
			limit = { has_character_flag = mock_duel }
			custom_tooltip = { text = EVTOPTA_HFP_10096_TT } # The duel will take place within the next few days
		}

		if = {
			limit = {
				is_tribal = yes
				has_strong_claim = event_target:combatant_1 # If attacker has strong claim on target
				event_target:combatant_1 = { is_tribal = yes }
			}

			custom_tooltip = { text = EVTOPTA_HFP_10096_CLAIM_DUEL_TT } # "This might affect the fate of <title>..."
		}

		if = {
			limit = { is_member_of_any_warrior_lodge_trigger = yes } # Warriors like a warrior who acts like one...
			add_legend_progress_trivial_effect = yes
		}

		# FALLBACK:
		hidden_effect = {
			if = { # If event_target:combatant_1 is no longer alive, clear relevant flags, etc...
				limit = { event_target:combatant_1 = { is_alive = no } }

				remove_character_modifier = recent_duel_timer
				clr_duel_flags_effect = yes
			}
			else = {
				set_character_flag = add_duel_xp
				reset_duel_timers_effect = yes
				character_event = { id = HFP.10100 } # Send hidden set-up of duel (from there: result)
			}
		}

		ai_chance = { factor = 80 }
	}

	option = { # [INTRIGUE OPTION]
		name = EVTOPTA_HF_10096 # I will do something.... special
		tooltip_info = intrigue

		trigger = {
			intrigue >= 12
			has_dlc = "Holy Fury"
		}

		custom_tooltip = { text = EVTOPTA_HF_10096_TT } # You will use any means necessary...

		set_character_flag = attacker_using_poison@event_target:combatant_2

		if = { # There is a chance the poison fails...
			limit = {
				event_target:combatant_1 = {
					OR = {
						intrigue >= ROOT # They alone can match your intrigue

						job_spymaster = {
							intrigue >= ROOT # If they can match your intrigue

							opinion = {
								who = PREV # and they like their employer
								value >= 15
							}
						}
					}
				}
			}

			set_character_flag = poison_can_fail_against@event_target:combatant_2
		}

		# FALLBACK:
		hidden_effect = {
			if = { # If event_target:combatant_1 is no longer alive, clear relevant flags, etc...
				limit = { event_target:combatant_1 = { is_alive = no } }

				remove_character_modifier = recent_duel_timer
				clr_duel_flags_effect = yes
			}
			else = {
				set_character_flag = add_duel_xp
				reset_duel_timers_effect = yes
				character_event = { id = HFP.10100 } # Send hidden set-up of duel (from there: result)
			}
		}

		ai_chance = {
			factor = 20
			dishonorable_ai_chance_increase_score = yes
		}
	}
}


### "REGULAR" duels start here...
# Get challenged (sent from duel_decision )
character_event = {
	id = HFP.10095
	picture = GFX_evt_armory
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HFP_10095_default
		trigger = {
			event_target:combatant_1 = {
				NOR = {
					has_character_flag = mock_duel
					has_character_flag = deadly_duel@ROOT
					has_character_flag = flag_courtier_challenging_regent
				}
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10095_mock_duel
		trigger = {
			event_target:combatant_1 = { has_character_flag = mock_duel } # Set in HF.10007
		}
	}
	desc = {
		text = EVTDESC_HFP_10095_deadly_duel
		trigger = {
			event_target:combatant_1 = { has_character_flag = deadly_duel@ROOT } # Set in HF.10511
		}
	}
	desc = {
		text = EVTDESC_HFP_10095_courtier_regent_duel
		trigger = {
			event_target:combatant_1 = { has_character_flag = flag_courtier_challenging_regent } # Set in regency_events
		}
	}

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { event_target:combatant_1 = { has_character_flag = mock_duel } }
			set_character_flag = mock_duel # Makes sure outcome results works correctly for both parties...
		}

		if = {
			limit = {
				NAND = {
					has_character_modifier = declined_prestige_duel_timer
					is_female = no
					event_target:combatant_1 = { is_female = yes }
					top_liege = { is_nomadic = no }
				}
			}

			add_character_modifier = {
				name = declined_prestige_duel_timer
				years = 3
				hidden = yes
			}

			set_character_flag = punish_declining
		}

		if = {
			limit = { NOT = { has_character_modifier = recent_duel_timer } }

			add_character_modifier = {
				name = recent_duel_timer
				months = 3
				hidden = yes
			}
		}

		event_target:combatant_1 = { # Challenger
			if = {
				limit = { NOT = { has_character_modifier = recent_duel_timer } } # Special circumstances, like initiation duel, etc

				add_character_modifier = {
					name = recent_duel_timer
					months = 3
					hidden = yes
				}
			}
		}

		if = { # If the challenger did this for a mission...
			limit = {
				event_target:combatant_1 = {
					has_quest = quest_warrior_lodge_duel_honor
					quest_target = { character = event_target:combatant_2 }
				}
			}

			event_target:combatant_1 = { set_character_flag = mock_duel }
			set_character_flag = mock_duel # Makes sure outcome results works correctly for both parties...
		}
	}

	option = { # Challenge accepted
		name = EVTOPTA_WOL_11000

		clr_character_flag = flag_duel_no_backsies

		random = {
			chance = 20
			remove_trait_craven_effect = yes
		}

		pacifists_lose_piety_effect = yes

		if = { # If they previously offended you, this rectifies that # TODO: Shouldn't this to be the other way around, from ROOT to event_target_1?
			limit = {
				reverse_has_opinion_modifier = {
					name = grievously_offended
					who = event_target:combatant_1
				}
			}

			reverse_remove_opinion = {
				name = grievously_offended
				who = event_target:combatant_1
			}
		}

		if = {
			limit = { is_member_of_any_warrior_lodge_trigger = yes } # Warriors like a warrior who acts like one...
			add_legend_progress_trivial_effect = yes
		}

		event_target:combatant_1 = {
			character_event = {
				id = HFP.10096
				days = 3
			}
		}

		set_character_flag = add_duel_xp
		clr_character_flag = punish_declining

		ai_chance = {
			factor = 50

			trigger = {
				trigger_if = {
					limit = { is_priest = yes }
					NOT = { religion_group = christian }
				}
			}

			mult_modifier = {
				factor = 2
				trait = proud
			}

			mult_modifier = {
				factor = 0.05
				trait = craven
			}

			mult_modifier = {
				factor = 0.3
				religion = jain
			}

			mult_modifier = {
				factor = 0.025

				is_female = no
				event_target:combatant_1 = { is_female = yes }
				top_liege = { is_nomadic = no }
			}
		}
	}

	option = { # [INTRIGUE OPTION]
		name = EVTOPTA_HF_10096 # I will do something.... special
		tooltip_info = intrigue

		trigger = {
			intrigue >= 12
			has_dlc = "Holy Fury"
			NOT = { has_character_flag = mock_duel }
		}

		custom_tooltip = { text = EVTOPTA_HF_10096_TT } # you will use any means necessary...

		set_character_flag = defender_using_poison@event_target:combatant_1

		if = {
			limit = { trait = honest }
			remove_trait = honest
		}
		else_if = {
			limit = { NOT = { trait = deceitful } }
			add_trait = deceitful
		}
		else_if = {
			limit = { trait = brave }
			remove_trait = brave
		}
		else_if = {
			limit = { NOT = { trait = craven } }
			add_trait = craven
		}

		if = { # There is a chance the poison fails...
			limit = {
				event_target:combatant_1 = {
					OR = {
						intrigue >= ROOT # They alone can match your intrigue

						job_spymaster = {
							intrigue >= ROOT # They can match your intrigue

							opinion = {
								who = PREV # and they like their employer
								value >= 15
							}
						}
					}
				}
			}

			set_character_flag = poison_can_fail_against@event_target:combatant_1
		}

		pacifists_lose_piety_effect = yes

		if = { # If they previously offended you, this rectifies that # TODO: Shouldn't this to be the other way around, from ROOT to event_target_1?
			limit = {
				reverse_has_opinion_modifier = {
					name = grievously_offended
					who = event_target:combatant_1
				}
			}

			reverse_remove_opinion = {
				name = grievously_offended
				who = event_target:combatant_1
			}
		}

		event_target:combatant_1 = {
			character_event = {
				id = HFP.10096
				days = 3
			}
		}

		set_character_flag = add_duel_xp
		clr_character_flag = punish_declining

		ai_chance = {
			factor = 20
			dishonorable_ai_chance_increase_score = yes
		}
	}

	option = { # No, that sounds dangerous
		name = EVTOPTB_WOL_11000

		trigger = {
			NOR = {
				has_character_flag = flag_duel_no_backsies

				# If set-up failed spectacularly, and it's a case of MP, the player leader will be unable to turn down the duel just for the hell of it
				event_target:duel_target = { character = event_target:hero_character }
			}
		}

		if = {
			limit = { has_character_flag = punish_declining }
			clr_character_flag = punish_declining

			if = {
				limit = { trait = brave }
				remove_trait = brave
			}
			else = {
				random = {
					chance = 30
					add_trait_craven_effect = yes
				}
			}

			prestige = -50

			add_character_modifier = {
				name = declined_prestige_duel_timer
				years = 3
				hidden = yes
			}
		}

		hidden_effect = {
			remove_character_modifier = recent_duel_timer

			event_target:combatant_1 = { # The challenger
				remove_character_modifier = recent_duel_timer

				if = {
					limit = { has_character_modifier = duels_declined }

					opinion = {
						name = opinion_declined_my_duel # For visuals
						who = ROOT
						years = 100
					}
				}
				else = {
					opinion = {
						name = opinion_fled_duel
						who = ROOT
						years = 100
					}
				}

				character_event = {
					id = HFP.10097 # Duel rejected...
					days = 3
				}
			}
		}

		increase_cowardly_status_effect = yes # Tracks duel cowardice

		if = { # For characters who were recruited by their parents...
			limit = {
				has_character_flag = is_being_recruited_to_warrior_lodge_by_parent
				event_target:recruiting_parent = { is_alive = yes }
			}

			custom_tooltip = {
				text = notify_parent_recruiter_tt # Your parent will be notified

				set_character_flag = failed_initiation
				set_character_flag = chickened_out
				clr_character_flag = society_join_block

				event_target:recruiting_parent = {
					character_event = { id = HF.10014 }
				}
			}
		}

		ai_chance = {
			factor = 10

			trigger = {
				event_target:combatant_1 = {
					NOT = { has_character_flag = mock_duel }

					trigger_if = {
						limit = {
							OR = {
								has_quest = quest_warrior_lodge_duel_honor
								has_quest = quest_warrior_lodge_duel_deadly
							}
						}

						quest_target = {
							NOT = { character = event_target:combatant_2 }
						}
					}
				}
			}

			mult_modifier = {
				factor = 1.5
				trait = craven
			}

			mult_modifier = {
				factor = 5
				is_priest = yes
			}
		}
	}
}

# Start the duel - For the attacker (combatant_1)
character_event = {
	id = HFP.10096
	picture = GFX_evt_armory
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HFP_10096
		trigger = {
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10096
		trigger = {
			has_character_flag = mock_duel # Set in quest_warrior_lodge_duel_honor mission hand-out
			has_quest = quest_warrior_lodge_duel_honor
			quest_target = { character = event_target:combatant_2 }
		}
	}
	desc = {
		text = EVTDESC_HFP_10096_mock_duel # Default initation-duel text
		picture = GFX_evt_teaching_moment
		trigger = {
			has_character_flag = mock_duel # Set in HF.10007

			NOR = {
				is_married = event_target:combatant_2
				has_quest = quest_warrior_lodge_duel_honor

				any_owned_bloodline = {
					has_bloodline_flag = bloodline_legendary_warrior
					bloodline_is_active_for = PREV
				}
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10096_mock_duel_spouse # Initation duel against spouse
		picture = GFX_evt_teaching_moment
		trigger = {
			has_character_flag = mock_duel # Set in HF.10007
			is_married = event_target:combatant_2
			NOT = { has_quest = quest_warrior_lodge_duel_honor }
		}
	}
	desc = {
		text = EVTDESC_HFP_10096_bloodline # Initiation duel as special bloodline owner
		picture = GFX_evt_teaching_moment
		trigger = {
			has_character_flag = mock_duel # Set in HF.10007

			any_owned_bloodline = {
				has_bloodline_flag = bloodline_legendary_warrior
				bloodline_is_active_for = PREV
			}

			NOR = {
				is_married = event_target:combatant_2
				has_quest = quest_warrior_lodge_duel_honor
			}
		}
	}

	is_triggered_only = yes

	option = {
		name = {
			text = EVTOPTA_WOL_11001 # Let's fight!
			trigger = {
				NOR = {
					has_character_flag = mock_duel
					has_character_flag = target_was_threatened
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10096 # A [GetDuelType], huh?
			trigger = {
				has_character_flag = mock_duel
				NOT = { has_character_flag = target_was_threatened }
			}
		}
		name = {
			text = EVTOPTB_HFP_10096 # That's what I thought...
			trigger = { has_character_flag = target_was_threatened }
		}

		if = {
			limit = { has_character_flag = mock_duel }
			custom_tooltip = { text = EVTOPTA_HFP_10096_TT } # The duel will take place within the next few days
		}

		if = {
			limit = { is_member_of_any_warrior_lodge_trigger = yes } # Warriors like a warrior who acts like one...
			add_legend_progress_trivial_effect = yes
		}

		# FALLBACK:
		hidden_effect = {
			if = { # If event_target:combatant_2 is no longer alive, clear relevant flags, etc...
				limit = { event_target:combatant_2 = { is_alive = no } }

				reset_warrior_lodge_joining_chain_effect = yes
				character_event = { id = HFP.10197 }
			}
			else = {
				set_character_flag = add_duel_xp
				reset_duel_timers_effect = yes
				character_event = { id = HFP.10100 } # Send hidden set-up of duel (from there: result)
			}
		}

		ai_chance = { factor = 80 }
	}

	option = { # [INTRIGUE OPTION]
		name = EVTOPTA_HF_10096 # I will do something.... special
		tooltip_info = intrigue

		trigger = {
			intrigue >= 12
			has_dlc = "Holy Fury"
			NOT = { has_character_flag = mock_duel }
		}

		custom_tooltip = { text = EVTOPTA_HF_10096_TT } # You will use any means necessary...

		set_character_flag = attacker_using_poison@event_target:combatant_2

		if = {
			limit = { trait = honest }
			remove_trait = honest
		}
		else_if = {
			limit = { NOT = { trait = deceitful } }
			add_trait = deceitful
		}
		else_if = {
			limit = { trait = brave }
			remove_trait = brave
		}
		else_if = {
			limit = { NOT = { trait = craven } }
			add_trait = craven
		}

		if = { # There is a chance the poison fails...
			limit = {
				event_target:combatant_2 = {
					OR = {
						intrigue >= ROOT # They alone can match your intrigue

						job_spymaster = {
							intrigue >= ROOT # If they can match your intrigue

							opinion = {
								who = PREV # and they like their employer
								value >= 15
							}
						}
					}
				}
			}

			set_character_flag = poison_can_fail_against@event_target:combatant_2
		}

		# FALLBACK:
		hidden_effect = {
			if = { # If event_target:combatant_2 is no longer alive, clear relevant flags, etc...
				limit = { event_target:combatant_2 = { is_alive = no } }
				character_event = { id = HFP.10197 }
			}
			else = {
				set_character_flag = add_duel_xp
				reset_duel_timers_effect = yes
				character_event = { id = HFP.10100 } # Send hidden set-up of duel (from there: result)
			}
		}

		ai_chance = {
			factor = 20
			dishonorable_ai_chance_increase_score = yes
		}
	}
}

# Duel rejected
character_event = {
	id = HFP.10097
	title = getDuelTitle
	desc = EVTDESC_HFP_10097
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		# To block spamming the decision when rejected...
		FROM = {
			add_character_modifier = {
				name = has_recently_declined_duel_cooldown
				months = 6
				hidden = yes
			}
		}

		if = { # Only if intrigue character...
			limit = {
				OR = {
					intrigue >= 15
					trait = elusive_shadow
					trait = master_schemer
				}

				NOT = { has_character_flag = mock_duel }
			}

			random_list = {
				20 = { # Success
					mult_modifier = {
						factor = 2

						has_bottom_tier_education_trait_trigger = no
						FROM = { has_bottom_tier_education_trait_trigger = yes }
					}

					mult_modifier = {
						factor = 2

						trait = elusive_shadow
						FROM = { NOT = { trait = elusive_shadow } }
					}

					mult_modifier = {
						factor = 2

						intrigue >= 15
						FROM = { intrigue < 15 }
					}

					mult_modifier = {
						factor = 2

						trait = master_schemer
						FROM = { NOT = { trait = master_schemer } }
					}

					mult_modifier = {
						factor = 2
						intrigue >= FROM
					}

					mult_modifier = {
						factor = 2

						is_smart_trigger = yes
						FROM = { is_smart_trigger = no }
					}

					set_character_flag = likely_to_succeed
				}

				10 = { # Failure
					mult_modifier = {
						factor = 2

						has_bottom_tier_education_trait_trigger = yes
						FROM = { has_bottom_tier_education_trait_trigger = no }
					}

					mult_modifier = {
						factor = 2

						FROM = { trait = elusive_shadow }
						NOT = { trait = elusive_shadow }
					}

					mult_modifier = {
						factor = 2

						FROM = { intrigue >= 15 }
						intrigue < 15
					}

					mult_modifier = {
						factor = 2

						FROM = { trait = master_schemer }
						NOT = { trait = master_schemer }
					}

					mult_modifier = {
						factor = 2
						intrigue < FROM
					}

					mult_modifier = {
						factor = 2

						is_dumb_trigger = yes
						FROM = { is_dumb_trigger = no }
					}

					set_character_flag = likely_to_fail
				}
			}
		}
	}

	option = { # "Corner"-option
		name = EVTOPTA_HFP_10097 # You won't get away that easily! (Only for INTRIGUE characters)
		tooltip_info = intrigue

		trigger = {
			OR = {
				intrigue >= 15
				trait = elusive_shadow
				trait = master_schemer
			}

			NOR = {
				has_character_flag = mock_duel
				has_character_flag = claim_duel@FROM
			}
		}

		custom_tooltip = { text = EVTOPTA_HFP_10097_TT }

		random_list = {
			10 = { # Success! (sends event to target)
				additive_modifier = {
					value = 60
					has_character_flag = likely_to_succeed
				}

				FROM = {
					show_scope_change = no

					character_event = {
						id = HFP.10098
						tooltip = you_succeeding_to_corner_tt
					}
				}
			}

			20 = { # Failure... (sends event to self)
				additive_modifier = {
					value = 60
					has_character_flag = likely_to_fail
				}

				character_event = {
					id = HFP.10099
					tooltip = you_failing_to_corner_tt
				}
			}
		}
	}

	option = {
		name = EVTOPTA_WOL_11002 # Pathethic
	}

	after = {
		clr_character_flag = likely_to_succeed
		clr_character_flag = likely_to_fail
		clr_character_flag = claim_duel@FROM
		clr_character_flag = wants_multiple_titles_from@FROM
		clr_character_flag = wants_single_title_from@FROM
	}
}

character_event = { # You were cornered!
	id = HFP.10098
	title = getDuelTitle
	desc = EVTDESC_HFP_10098 # "You WILL duel me..." knifey threat-style
	picture = GFX_evt_shadow
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA_HFP_10098

		FROM = {
			show_scope_change = no

			character_event = {
				id = HFP.10096
				days = 1
				tooltip = EVTOPTA_HFP_10098_TT
			}

			set_character_flag = target_was_threatened
		}
	}
}

character_event = { # I failed to corner them...
	id = HFP.10099
	title = getDuelTitle
	desc = EVTDESC_HFP_10099
	picture = GFX_evt_shadow
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA_HFP_10099

		custom_tooltip = {
			text = EVTOPTA_HFP_10099_TT

			add_character_modifier = {
				name = recent_duel_timer
				years = 1
				hidden = yes
			}
		}

		clr_duel_flags_effect = yes
	}
}


# Duel set-up event (sends outcome events to combatant_1 and combatant_2)
# The meat's in here! Send this event when you want to start any duel, that is supposed to have an outcome displaying the fight.
character_event = {
	id = HFP.10100

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		### Room for any existing pre-conditions (is this an initiation duel? Is this a Challenge for a title?):
		# -- set here, or in previous event/decision...

		# Chooses a weapon for mainly loc purposes (but has a tiny effect on outcomes, too)...
		set_dueling_weapon_effect = yes # You get a weapon!
		event_target:combatant_2 = { set_dueling_weapon_effect = yes } # and YOU get a weapon!

		# Chooses a body part for injury (if it occurs), also for loc purposes (effect handles both characters)
		set_potential_injury_flag_effect = yes

		# Scripted effect requiring event-targets combatant_1 & combatant_2! RAW NUMBERS...
		evaluate_duel_result_score_effect = yes

		# Room for extra special calculations... (based on traits, and other special circumstances?)
		evaluate_extra_duel_result_score_effect = yes

		# Send the correct result event (from random_list)...
		send_duel_result_event_effect = yes
	}
}

# Double death - Attacker (combatant_1)
character_event = {
	id = HFP.10101
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:combatant_2

	desc = {
		text = EVTDESC_HFP_10101_default
		trigger = {
			is_using_intrigue_trigger = no

			NOR = {
				has_character_flag = elegant_double_KO
				has_character_flag = clumsy_double_KO
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10101_clumsy
		trigger = {
			has_character_flag = clumsy_double_KO
			is_using_intrigue_trigger = no
		}
	}
	desc = {
		text = EVTDESC_HFP_10101_elegant
		trigger = {
			has_character_flag = elegant_double_KO
			is_using_intrigue_trigger = no
		}
	}
	desc = { # They used intrigue option to kill you (both die)
		text = EVTDESC_HFP_double_death_intrigue_poison_killed_me
		trigger = {
			is_using_intrigue_trigger = no
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
		}
	}
	desc = { # You used intrigue option to kill them (both die)
		text = EVTDESC_HFP_double_death_intrigue_poison_killed_them
		trigger = {
			is_using_intrigue_trigger = yes
			event_target:other_combatant = { is_using_intrigue_trigger = no }
		}
	}
	desc = { # BOTH used intrigue option?! OH NOES!
		text = EVTDESC_HFP_double_death_intrigue_both_used_poison
		trigger = {
			is_using_intrigue_trigger = yes
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
		}
	}

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { multiplayer = yes }

			debug_battle_death_counter_effect = yes # for debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:combatant_2
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:combatant_2
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:combatant_2
				}
			}
		}
	}

	option = {
		name = {
			text = EVTOPTA_HFP_10101_default
			trigger = {
				NOR = {
					has_character_flag = elegant_double_KO
					has_character_flag = clumsy_double_KO
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10101_clumsy
			trigger = { has_character_flag = clumsy_double_KO }
		}
		name = {
			text = EVTOPTA_HFP_10101_elegant
			trigger = { has_character_flag = elegant_double_KO }
		}

		custom_tooltip = { text = no_one_wins_the_duel_tt }

		tooltip = {
			event_target:combatant_2 = {
				show_scope_change = no

				death = {
					death_reason = death_duel
					killer = ROOT
				}
			}
		}

		if = {
			limit = { multiplayer = no }

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:combatant_2
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:combatant_2
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:combatant_2
				}
			}
		}
	}

	after = {
		if = {
			limit = {
				is_using_intrigue_trigger = no
				event_target:other_combatant = { is_using_intrigue_trigger = yes }
			}

			tooltip = {
				handle_poison_effect = yes
			}
		}

		hidden_effect = {
			clean_up_after_duel_effect = yes
		}
	}
}

# Double death - Defender
character_event = {
	id = HFP.10102
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:combatant_1

	desc = {
		text = EVTDESC_HFP_10102_default
		trigger = {
			is_using_intrigue_trigger = no

			NOR = {
				has_character_flag = elegant_double_KO
				has_character_flag = clumsy_double_KO
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10102_clumsy
		trigger = {
			has_character_flag = clumsy_double_KO
			is_using_intrigue_trigger = no
		}
	}
	desc = {
		text = EVTDESC_HFP_10102_elegant
		trigger = {
			has_character_flag = elegant_double_KO
			is_using_intrigue_trigger = no
		}
	}
	desc = { # They used intrigue option to kill you (both die)
		text = EVTDESC_HFP_double_death_intrigue_poison_killed_me
		trigger = {
			is_using_intrigue_trigger = no
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
		}
	}
	desc = { # You used intrigue option to kill them (both die)
		text = EVTDESC_HFP_double_death_intrigue_poison_killed_them
		trigger = {
			is_using_intrigue_trigger = yes
			event_target:other_combatant = { is_using_intrigue_trigger = no }
		}
	}
	desc = { # BOTH used intrigue option?! OH NOES!
		text = EVTDESC_HFP_double_death_intrigue_both_used_poison
		trigger = {
			is_using_intrigue_trigger = yes
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
		}
	}

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { multiplayer = yes }

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:combatant_1
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:combatant_1
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:combatant_1
				}
			}
		}
	}

	option = {
		name = {
			text = EVTOPTA_HFP_10102_default
			trigger = { NOR = { has_character_flag = elegant_double_KO has_character_flag = clumsy_double_KO } }
		}
		name = {
			text = EVTOPTA_HFP_10102_clumsy
			trigger = { has_character_flag = clumsy_double_KO }
		}
		name = {
			text = EVTOPTA_HFP_10102_elegant
			trigger = { has_character_flag = elegant_double_KO }
		}

		custom_tooltip = { text = no_one_wins_the_duel_tt }

		tooltip = {
			event_target:combatant_1 = {
				show_scope_change = no

				death = {
					death_reason = death_duel
					killer = ROOT
				}
			}
		}

		if = {
			limit = { multiplayer = no }

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:combatant_1
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:combatant_1
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:combatant_1
				}
			}
		}
	}

	after = {
		if = {
			limit = {
				is_using_intrigue_trigger = no
				event_target:other_combatant = { is_using_intrigue_trigger = yes }
			}

			tooltip = {
				handle_poison_effect = yes
			}
		}

		hidden_effect = {
			clean_up_after_duel_effect = yes
		}
	}
}

# DEATH: I killed my opponent - I won!
character_event = {
	id = HFP.10103
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant
	sound = duel_win

	is_triggered_only = yes

	immediate = {
		set_winner_flags_and_save_opponent_effect = yes

		random_list = {
			33 = {
				set_character_flag = desc_A
				event_target:other_combatant = { set_character_flag = desc_A }
			}

			33 = {
				set_character_flag = desc_B
				event_target:other_combatant = { set_character_flag = desc_B }
			}

			33 = {
				set_character_flag = desc_C
				event_target:other_combatant = { set_character_flag = desc_C }
			}
		}

		if = { # If this is a claim duel and the defender also has claims on combatant_1...
			limit = {
				event_target:combatant_1 = {
					has_character_flag = claim_duel@event_target:combatant_2

					any_demesne_title = {
						event_target:combatant_2 = { has_strong_claim = PREV }
					}
				}
			}

			event_target:combatant_1 = {
				random_demesne_title = {
					limit = { event_target:combatant_2 = { has_strong_claim = PREV } }
					preferred_limit = { is_primary_holder_title = yes }
					preferred_limit = { is_primary_holder_title_tier = yes }
					preferred_limit = { real_tier = KING }
					preferred_limit = { real_tier = DUKE }
					preferred_limit = { real_tier = COUNT }

					save_event_target_as = target_title_2
				}
			}
		}
	}

	desc = {
		text = EVTDESC_HF_10103_intrigue_default # I used intrigue and won
		trigger = {
			is_using_intrigue_trigger = yes

			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10103_A
		trigger = {
			has_character_flag = desc_A
			is_using_intrigue_trigger = no

			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10103_B
		trigger = {
			has_character_flag = desc_B
			is_using_intrigue_trigger = no

			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10103_C
		trigger = {
			has_character_flag = desc_C
			is_using_intrigue_trigger = no

			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}
	}

	# CLAIM DUELS...
	desc = {
		text = EVTDESC_HF_10103_A
		trigger = {
			has_character_flag = desc_A

			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
				NOT = { has_character_flag = attacker_using_poison@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HF_10103_B
		trigger = {
			has_character_flag = desc_B

			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
				NOT = { has_character_flag = attacker_using_poison@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HF_10103_C
		trigger = {
			has_character_flag = desc_C

			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
				NOT = { has_character_flag = attacker_using_poison@event_target:combatant_2 }
			}
		}
	}
	desc = { # Can happen both in regular duels and claim duels
		text = EVTDESC_HF_10103_intrigue_A_attacker # I attacked using intrigue and won
		trigger = { is_using_intrigue_trigger = yes }
	}
	desc = { # Can happen both in regular duels and claim duels
		text = EVTDESC_HF_10103_intrigue_A_defender_spymaster # They used intrigue, but I won anyway (thanks to my spymaster)
		trigger = {
			is_using_intrigue_trigger = no
			event_target:other_combatant = { is_using_intrigue_trigger = yes }

			job_spymaster = {
				intrigue >= event_target:other_combatant # If they can match their intrigue
				opinion = { who = PREV value >= 15 } # and they like their employer
			}
		}
	}
	desc = { # Can happen both in regular duels and claim duels
		text = EVTDESC_HF_10103_intrigue_A_defender_self # They used intrigue, but I won anyway (thanks to my own intrigue)
		trigger = {
			is_using_intrigue_trigger = no
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
			intrigue >= event_target:other_combatant
		}
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	### Regular option: ###

	option = {
		name = {
			text = EVTOPTA_HFP_10103_default # I... Yes, that was on purpose!
			trigger = {
				NOR = {
					trait = duelist
					trait = kind
					is_rival = event_target:other_combatant
					is_friend = event_target:other_combatant
					event_target:other_combatant = { duelist_skill_compared_to_prev_low_group_trigger = yes }
					duelist_skill_is_high_group_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10103_duelist # Another victorious match
			trigger = {
				OR = {
					trait = duelist
					event_target:other_combatant = { duelist_skill_compared_to_prev_low_group_trigger = yes }
					duelist_skill_is_high_group_trigger = yes
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10103_sad # I'm sorry it had to end this way
			trigger = {
				OR = {
					trait = kind
					is_friend = event_target:other_combatant
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10103_mean # Your death makes sense
			trigger = {
				OR = {
					trait = cruel
					is_rival = event_target:other_combatant
				}
			}
		}

		trigger = {
			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}

		custom_tooltip = { text = you_win_the_duel_tt }

		apply_generic_duel_victory_effect = yes
		add_blood_splatter_effect = yes

		event_target:other_combatant = {
			show_scope_change = no

			tooltip = {
				if = {
					limit = {
						has_nickname = no
						has_character_flag = injury_face
						has_character_flag = desc_A # Decapitation desc
					}

					give_nickname = nick_the_headless
				}

				death = {
					death_reason = death_duel
					killer = ROOT
				}
			}

			character_event = { id = HFP.10104 } # "I was decapitated" event
		}
	}

	###### Claim duels Options: #########

	option = { # If claim duel, the following options are displayed instead...
		name = EVTOPTA_HF_10103_default # You brought your own death, always available for randomization
		name = {
			text = EVTOPTA_HF_10103_sad # Curse you, for making me do this!
			trigger = {
				OR = {
					trait = kind
					is_friend = event_target:other_combatant
				}

				NOT = { is_rival = event_target:other_combatant }
			}
		}
		name = {
			text = EVTOPTA_HF_10103_mean # I had a feeling I would have to destroy you
			trigger = {
				OR = {
					trait = cruel
					is_rival = event_target:other_combatant
				}

				NOT = { is_friend = event_target:other_combatant }
			}
		}

		trigger = {
			event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 }
		}

		custom_tooltip = { text = you_win_the_duel_tt }

		apply_generic_duel_victory_effect = yes
		add_blood_splatter_effect = yes

		tooltip = {
			handle_claim_duel_result_effect = yes # Claim duels only...

			event_target:other_combatant = {
				if = {
					limit = {
						has_nickname = no
						has_character_flag = injury_face
						has_character_flag = desc_A # Decapitation desc
					}

					give_nickname = nick_the_headless
				}

				death = {
					death_reason = death_duel
					killer = ROOT
				}
			}
		}

		event_target:other_combatant = {
			character_event = { id = HFP.10104 } # "I was decapitated (CLAIM DUEL VERSION)" event
		}

		ai_chance = {
			factor = 20

			mult_modifier = {
				factor = 2
				trait = impaler
			}

			mult_modifier = {
				factor = 1.1
				trait = cruel
			}

			mult_modifier = {
				factor = 5
				is_rival = event_target:other_combatant
			}
		}
	}

	option = { # If KIND/CHARITABLE/ETC: spare their life?
		name = EVTOPTB_HF_10103 # or... we could make a deal?
		tooltip_info_custom = available_because_benevolent_tt

		trigger = {
			event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 }

			OR = {
				trait = kind
				trait = charitable
				trait = temperate
				trait = humble
				trait = patient
				trait = trusting
			}

			OR = {
				character = event_target:combatant_2 # You are the defender

				AND = { # OR, you are the attacker, but the defender also has claims on YOUR titles
					character = event_target:combatant_1

					any_demesne_title = {
						event_target:combatant_2 = { has_strong_claim = PREV }
					}
				}
			}
		}

		custom_tooltip = { text = you_win_the_duel_tt }
		custom_tooltip = { text = EVTOPTB_HF_10103_TT }

		apply_merciful_modifier_effect = yes

		tooltip = { # *actually* added further down the line...
			if = {
				limit = { has_character_flag = is_rival_fight }
				prestige = 100
			}
			else = {
				prestige = 50
			}

			add_character_modifier = {
				name = recent_duel_victory
				years = 1 # Also clears upon new duel!
			}
		}

		event_target:other_combatant = {
			if = {
				limit = {
					character = event_target:combatant_1
					has_character_flag = attacker_using_poison@event_target:combatant_2
				}

				set_character_flag = is_spared_poisoner
			}

			character_event = { id = HF.10104 } # "I could be spared (CLAIM DUEL VERSION)" event
		}

		ai_chance = {
			factor = 10

			likes_other_combatant_score = yes

			mult_modifier = {
				factor = 1.5
				has_character_modifier = the_merciful
			}
		}
	}

	after = {
		tooltip = {
			clean_up_after_duel_effect = yes
		}
	}
}

# DEATH: I died in the duel - I lost (fired from HFP.10103 above)
character_event = {
	id = HFP.10104
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	sound = duel_lose

	desc = {
		text = EVTDESC_HFP_10104_A
		trigger = {
			has_character_flag = desc_A
			is_using_intrigue_trigger = no
			NOT = { event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 } }
		}
	}
	desc = {
		text = EVTDESC_HFP_10104_B
		trigger = {
			has_character_flag = desc_B
			is_using_intrigue_trigger = no
			NOT = { event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 } }
		}
	}
	desc = {
		text = EVTDESC_HFP_10104_C
		trigger = {
			has_character_flag = desc_C
			is_using_intrigue_trigger = no
			NOT = { event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 } }
		}
	}
	desc = {
		text = EVTDESC_HF_10104_intrigue_default # They used intrigue and I lost (die)
		trigger = {
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}
	}

	# CLAIM DUELS...
	desc = {
		text = EVTDESC_HFP_10104_D
		trigger = {
			has_character_flag = desc_A

			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
				NOT = { has_character_flag = attacker_using_poison@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10104_E
		trigger = {
			has_character_flag = desc_B

			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
				NOT = { has_character_flag = attacker_using_poison@event_target:combatant_2 }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10104_F
		trigger = {
			has_character_flag = desc_C

			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
				NOT = { has_character_flag = attacker_using_poison@event_target:combatant_2 }
			}
		}
	}
	desc = { # Can happen both in regular duels and claim duels
		text = EVTDESC_HF_10104_intrigue_A_attacker # I used poison and lost
		trigger = { is_using_intrigue_trigger = yes }
	}
	desc = { # Can happen both in regular duels and claim duels
		text = EVTDESC_HF_10104_intrigue_A_defender # Attacker used poison, and I am dying
		trigger = {
			is_using_intrigue_trigger = no
			event_target:other_combatant = { is_using_intrigue_trigger = yes }
		}
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes

	immediate = {
		set_loser_flags_and_save_opponent_effect = yes

		if = {
			limit = {
				multiplayer = yes
				NOT = { event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 } }
			}

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					has_nickname = no
					has_character_flag = injury_face
					has_character_flag = desc_A
				}

				give_nickname = nick_the_headless
			}

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:other_combatant
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:other_combatant
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:other_combatant
				}
			}
		}
	}

	option = {
		name = EVTOPTA_HFP_10104 # Nooooo...!

		custom_tooltip = { text = you_lose_the_duel_tt }

		hidden_effect = { event_target:other_combatant = { handle_claim_duel_result_effect = yes } }
		handle_claim_duel_result_effect = yes # Claim duels only...

		if = {
			limit = {
				character = event_target:combatant_1
				has_character_flag = claim_duel@event_target:combatant_2
				has_character_flag = attacker_using_poison@event_target:combatant_2

				event_target:combatant_2 = {
					intrigue < ROOT

					job_spymaster = {
						intrigue >= ROOT # If they can match your intrigue

						opinion = {
							who = PREV # and they like their employer
							value >= 15
						}
					}
				}
			}

			event_target:combatant_2 = {
				show_portrait = job_spymaster
			}
		}

		if = {
			limit = {
				OR = {
					multiplayer = no
					event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 }
				}
			}

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					has_nickname = no
					has_character_flag = injury_face
					has_character_flag = desc_A
				}

				give_nickname = nick_the_headless
			}

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:other_combatant
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:other_combatant
				}
			}
			else_if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 }
				}

				if = {
					limit = { character = event_target:combatant_1 }

					death = {
						death_reason = death_claim_duel_attacker # For flavor
						killer = event_target:other_combatant
					}
				}
				else = {
					death = {
						death_reason = death_claim_duel_defender # For flavor
						killer = event_target:other_combatant
					}
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:other_combatant
				}
			}
		}
	}

	# SPECIAL OPTION: Only in Claim Duels, for players, if the opponent is an AI of your dynasty...
	option = {
		name = EVTOPTB_HFP_10104
		tooltip_info_custom = available_because_dynasty_member_tt

		trigger = {
			ai = no
			dynasty = event_target:other_combatant
			event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 }
			event_target:other_combatant = { ai = yes }
		}

		hidden_effect = { event_target:other_combatant = { handle_claim_duel_result_effect = yes } }
		handle_claim_duel_result_effect = yes # Claim duels only...

		if = {
			limit = { multiplayer = no }

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					has_nickname = no
					has_character_flag = injury_face
					has_character_flag = desc_A
				}

				give_nickname = nick_the_headless
			}

			if = {
				limit = { character = event_target:combatant_1 }

				death = {
					death_reason = death_claim_duel_attacker # For flavor
					killer = event_target:other_combatant
				}
			}
			else = {
				death = {
					death_reason = death_claim_duel_defender # For flavor
					killer = event_target:other_combatant
				}
			}
		}

		set_player_character = event_target:other_combatant # Take control of the winner...
	}

	after = {
		if = {
			limit = {
				event_target:other_combatant = { is_using_intrigue_trigger = yes }
				is_using_intrigue_trigger = no
			}

			tooltip = {
				handle_poison_effect = yes
			}
		}

		hidden_effect = {
			clean_up_after_duel_effect = yes
			event_target:other_combatant = { clean_up_after_duel_effect = yes } # Test if this works, even if character is_dying
		}
	}
}

############## SPECIAL CLAIM DUEL FOLLOW-UP (if chose to spare life) ############

# DEATH: I should've died in the duel - I lost (fired from HFP.10103)
character_event = {
	id = HF.10104
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant
	sound = duel_lose

	desc = {
		text = EVTDESC_HF_10104_A
		trigger = {
			has_character_flag = desc_A
			NOT = { has_character_flag = is_spared_poisoner }
		}
	}
	desc = {
		text = EVTDESC_HF_10104_B
		trigger = {
			has_character_flag = desc_B
			NOT = { has_character_flag = is_spared_poisoner }
		}
	}
	desc = {
		text = EVTDESC_HF_10104_C
		trigger = {
			has_character_flag = desc_C
			NOT = { has_character_flag = is_spared_poisoner }
		}
	}
	desc = {
		text = EVTDESC_HF_10104_D
		trigger = { has_character_flag = is_spared_poisoner }
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes

	immediate = {
		set_loser_flags_and_save_opponent_effect = yes
	}

	option = { # I'll walk away while I can...
		name = EVTOPTA_HF_10104

		custom_tooltip = { text = you_lose_the_duel_tt }

		# To take care of after effects...
		event_target:combatant_1 = { clr_character_flag = someone_died }
		event_target:combatant_2 = { clr_character_flag = someone_died }

		if = {
			limit = { character = event_target:combatant_1 }
			remove_all_claims_for_combatant_1_effect = yes # Claim duels only...
		}
		else = {
			remove_all_claims_for_combatant_2_effect = yes # Claim duels only...
		}

		event_target:other_combatant = {
			character_event = {
				id = HF.10105 # Follow-up
				days = 1
			}
		}

		tooltip = { clean_up_after_duel_effect = yes }

		ai_chance = {
			factor = 10
			likes_other_combatant_score = yes
		}
	}

	# I would rather DIE
	option = {
		name = EVTOPTB_HF_10104

		custom_tooltip = { text = you_lose_the_duel_tt }

		# For correct effects and tooltips...
		hidden_effect = { event_target:other_combatant = { handle_claim_duel_result_effect = yes } }
		handle_claim_duel_result_effect = yes

		if = {
			limit = {
				has_nickname = no
				has_character_flag = injury_face
				has_character_flag = desc_A
			}

			give_nickname = nick_the_headless
		}

		if = {
			limit = { character = event_target:combatant_1 }

			death = {
				death_reason = death_claim_duel_attacker # For flavor
				killer = event_target:other_combatant
			}
		}
		else = {
			death = {
				death_reason = death_claim_duel_defender # for flavor
				killer = event_target:other_combatant
			}
		}

		tooltip = { clean_up_after_duel_effect = yes }

		event_target:other_combatant = {
			character_event = {
				id = HF.10106 # Follow-up
				days = 1
			}
		}

		ai_chance = {
			factor = 10

			title_tier_reduction_score = yes # Less likely, the more they have to lose...

			mult_modifier = {
				factor = 2
				has_character_modifier = proving_bravery
			}
		}
	}

	# SPECIAL OPTION: for players, if the opponent is an AI of your dynasty...
	option = {
		name = EVTOPTC_HF_10104
		tooltip_info_custom = available_because_dynasty_member_tt

		trigger = {
			ai = no
			dynasty = event_target:other_combatant
			event_target:combatant_1 = { has_character_flag = claim_duel@event_target:combatant_2 }
			event_target:other_combatant = { ai = yes }
		}

		custom_tooltip = { text = you_lose_the_duel_tt }

		# For correct effects and tooltips...
		hidden_effect = { event_target:other_combatant = { handle_claim_duel_result_effect = yes } }
		handle_claim_duel_result_effect = yes

		if = {
			limit = {
				has_nickname = no
				has_character_flag = injury_face
				has_character_flag = desc_A
			}

			give_nickname = nick_the_headless
		}

		if = {
			limit = { character = event_target:combatant_1 }

			death = {
				death_reason = death_claim_duel_attacker # For flavor
				killer = event_target:other_combatant
			}
		}
		else = {
			death = {
				death_reason = death_claim_duel_defender # For flavor
				killer = event_target:other_combatant
			}
		}

		tooltip = { clean_up_after_duel_effect = yes }

		set_player_character = event_target:other_combatant # Take control of the winner...

		event_target:other_combatant = {
			character_event = {
				id = HF.10106 # Follow-up
				days = 1
			}
		}
	}
}

# For the merciful fighter: (FROM chose to live)...
character_event = {
	id = HF.10105
	title = duel_aftermath_title
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HF_10105_A
		trigger = { character = event_target:combatant_1 }
	}
	desc = {
		text = EVTDESC_HF_10105_A
		trigger = { character = event_target:combatant_2 }
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes

	### Become friendly
	option = { # You have my forgiveness
		name = EVTOPTA_HF_10105
		custom_tooltip = { text = EVTOPTA_HF_10105_TT }

		if = {
			limit = { trait = cruel }
			remove_trait = cruel
		}
		else_if = {
			limit = { trait = envious }
			remove_trait = envious
		}
		else_if = {
			limit = { NOT = { trait = kind } }
			add_trait = kind
		}
		else_if = {
			limit = { NOT = { trait = patient } }
			add_trait = patient
		}

		tooltip = {
			if = { # if you already have an opinion in place, become friends...
				limit = {
					OR = {
						reverse_has_opinion_modifier = {
							name = opinion_budding_friendship
							who = FROM
						}

						has_opinion_modifier = {
							name = opinion_budding_friendship
							who = FROM
						}
					}
				}

				add_friend = FROM
			}
			else = { # otherwise, add opinions... (*actually* added in follow-up)
				opinion = {
					name = opinion_budding_friendship
					who = FROM
					years = 10
				}

				reverse_opinion = {
					name = opinion_budding_friendship
					who = FROM
					years = 10
				}
			}
		}

		FROM = {
			set_character_flag = they_were_nice_about_it
		}
	}

	### Become rivals
	option = { # I will be WATCHING you...
		name = EVTOPTB_HF_10105
		tooltip_info_custom = available_because_malevolent_tt

		trigger = {
			OR = {
				trait = deceitful
				trait = cruel
				trait = arbitrary
				trait = wroth
				trait = envious
				trait = cynical
				trait = lunatic
				trait = proud
				trait = paranoid
				trait = possessed
			}
		}

		if = {
			limit = { trait = kind }
			remove_trait = kind
		}
		else_if = {
			limit = { trait = patient }
			remove_trait = patient
		}
		else_if = {
			limit = { NOT = { trait = cruel } }
			add_trait = cruel
		}
		else_if = {
			limit = { NOT = { trait = arbitrary } }
			add_trait = arbitrary
		}
		else_if = {
			limit = { NOT = { trait = envious } }
			add_trait = envious
		}

		custom_tooltip = { text = EVTOPTB_HF_10105_TT }

		tooltip = {
			FROM = {
				show_scope_change = no

				add_character_modifier = {
					name = publicly_humiliated
					years = 5
				}
			}

			if = {
				limit = { NOT = { is_rival = FROM } }
				add_rival = event_target:other_combatant
			}
		}

		FROM = {
			set_character_flag = they_were_mean_about_it
		}
	}

	after = {
		FROM = { character_event = { id = HF.10107 } }
		hidden_effect = { clean_up_after_duel_effect = yes }
	}
}

# For the merciful fighter: (FROM chose to die)...
character_event = {
	id = HF.10106
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HF_10106_A
		trigger = { character = event_target:combatant_1 }
	}
	desc = {
		text = EVTDESC_HF_10106_B
		trigger = { character = event_target:combatant_2 }
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_HF_10106 # What a waste of a man/woman

		trigger = { character = event_target:combatant_1 }
	}

	option = {
		name = EVTOPTB_HF_10106 # Such needless drama

		trigger = { character = event_target:combatant_2 }

		custom_tooltip = { text = EVTOPTB_HF_10106_TT }
	}

	after = {
		clean_up_after_duel_effect = yes

		hidden_effect = {
			FROM = { clean_up_after_duel_effect = yes }
		}
	}
}

# Final event for the defeated fighter, whose life has been spared...
character_event = {
	id = HF.10107
	title = duel_aftermath_title
	desc = EVTDESC_HF_10107_A
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war

	picture = {
		picture = GFX_evt_duel_team # snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_HF_10107 # I could never have expected this generosity

		trigger = { has_character_flag = they_were_nice_about_it }

		if = { # If you already have an opinion in place, become friends...
			limit = {
				OR = {
					reverse_has_opinion_modifier = {
						name = opinion_budding_friendship
						who = FROM
					}

					has_opinion_modifier = {
						name = opinion_budding_friendship
						who = FROM
					}
				}
			}

			add_friend = FROM
		}
		else = { # Otherwise, add opinions...
			opinion = {
				name = opinion_budding_friendship
				who = FROM
				years = 10
			}

			reverse_opinion = {
				name = opinion_budding_friendship
				who = FROM
				years = 10
			}
		}

		clr_character_flag = they_were_nice_about_it
	}

	option = {
		name = EVTOPTB_HF_10107 # I'm glad you show your true feelings...

		trigger = { has_character_flag = they_were_mean_about_it }

		add_character_modifier = {
			name = publicly_humiliated
			years = 5
		}

		if = {
			limit = { NOT = { is_rival = FROM } }
			add_rival = event_target:other_combatant
		}

		clr_character_flag = they_were_mean_about_it
	}

	after = {
		clean_up_after_duel_effect = yes

		hidden_effect = {
			FROM = { clean_up_after_duel_effect = yes }
		}
	}
}

########################################################

# Wounded (specifics?) - I won!
character_event = {
	id = HFP.10105
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant
	sound = duel_win

	# Mock duels
	desc = {
		text = EVTDESC_HFP_10105_mock_duel_A
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = desc_A
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_mock_duel_B
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = desc_B
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_mock_duel_C
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = desc_C
		}
	}

	### Regular duels
	desc = {
		text = EVTDESC_HFP_10105_intrigue_default
		trigger = {
			is_using_intrigue_trigger = yes
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_default_A
		trigger = {
			has_character_flag = desc_A
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_default_B
		trigger = {
			has_character_flag = desc_B
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_default_C
		trigger = {
			has_character_flag = desc_C
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_default_E
		trigger = {
			has_character_flag = desc_E
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10105_duel_D
		trigger = {
			has_character_flag = desc_D
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes # send_duel_result_event_effect

	immediate = {
		set_winner_flags_and_save_opponent_effect = yes

		if = {
			limit = { has_character_flag = mock_duel }

			random_list = {
				33 = {
					set_character_flag = desc_A
					event_target:other_combatant = { set_character_flag = desc_A }
				}
				33 = {
					set_character_flag = desc_B
					event_target:other_combatant = { set_character_flag = desc_B }
				}
				33 = {
					set_character_flag = desc_C
					event_target:other_combatant = { set_character_flag = desc_C }
				}
			}
		}
		else = {
			random_list = {
				20 = {
					set_character_flag = desc_A
					event_target:other_combatant = { set_character_flag = desc_A }
				}
				20 = {
					set_character_flag = desc_B
					event_target:other_combatant = { set_character_flag = desc_B }
				}
				20 = {
					set_character_flag = desc_C
					event_target:other_combatant = { set_character_flag = desc_C }
				}
				20 = {
					set_character_flag = desc_D
					event_target:other_combatant = { set_character_flag = desc_D }
				}
				20 = {
					set_character_flag = desc_E
					event_target:other_combatant = { set_character_flag = desc_E }
				}
			}
		}
	}

	option = {
		name = {
			text = EVTOPTA_HFP_10105_default
			trigger = {
				NOR = {
					trait = lunatic
					trait = kind
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10105_lunatic
			trigger = {
				OR = {
					trait = lunatic
					trait = cannibal
					trait = possessed
				}

				NOR = {
					trait = kind
					has_character_flag = mock_duel
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10105_cruel
			trigger = {
				OR = {
					trait = impaler
					trait = cruel
				}

				NOR = {
					trait = lunatic
					trait = cannibal
					trait = possessed
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10105_kind
			trigger = {
				OR = {
					trait = kind
					trait = shy
				}

				NOR = {
					trait = lunatic
					trait = cannibal
					trait = possessed
					trait = cruel
				}
			}
		}

		custom_tooltip = { text = you_win_the_duel_tt }
		apply_generic_duel_victory_effect = yes

		tooltip = {
			event_target:other_combatant = {
				show_scope_change = no
				apply_selected_duel_injury_effect = yes
			}

			clean_up_after_duel_effect = yes
		}

		event_target:other_combatant = {
			character_event = {
				id = HFP.10106 # "I was wounded somehow" event
				days = 1
			}
		}

		ai_chance = { factor = 60 }
	}

	option = { # Kill them anyway
		name = {
			text = EVTOPTB_HFP_10105_default
			trigger = {
				NOR = {
					has_character_flag = is_rival_fight
					trait = lunatic
					trait = possessed
				}
			}
		}
		name = {
			text = EVTOPTB_HFP_10105_rival
			trigger = {
				has_character_flag = is_rival_fight

				NOR = {
					trait = lunatic
					trait = possessed
				}
			}
		}
		name = {
			text = EVTOPTB_HFP_10105_lunatic
			trigger = {
				OR = {
					trait = lunatic
					trait = possessed
				}
			}
		}

		trigger = { is_allowed_deadly_duels_trigger = yes }

		custom_tooltip = { text = you_win_the_duel_tt }

		set_character_flag = someone_died # To handle Kinslayer in the effect below...
		apply_generic_duel_victory_effect = yes
		add_blood_splatter_effect = yes

		if = { # If this happens during a battle (from on_combat_pulse), no consequences...
			limit = { has_character_flag = is_battlefield_duel }
			custom_tooltip = { text = you_will_get_away_with_it_tt }
		}
		else_if = { # But if regular duel...
			limit = { NOT = { has_character_flag = flag_antagonizer_duel } } # Barring antagonizing ones...

			custom_tooltip = {
				text = EVTTOOLTIPWOL11006 # People will be upset

				hidden_effect = {
					generate_tooltip = no

					any_realm_character = {
						opinion = {
							name = opinion_ruthless
							who = ROOT
							years = 5
						}
					}
				}
			}

			if = {
				limit = { has_character_modifier = merciless }

				if = {
					limit = { has_nickname = no }
					give_nickname = nick_the_ruthless
				}
			}
			else = {
				add_character_modifier = {
					name = merciless
					duration = -1
				}
			}
		}

		tooltip = {
			event_target:other_combatant = {
				show_scope_change = no

				death = {
					death_reason = death_duel
					killer = ROOT
				}
			}

			clean_up_after_duel_effect = yes # To show that duel exp increases...

			if = {
				limit = {
					has_quest = quest_warrior_lodge_duel_deadly
					quest_target = { character = event_target:other_combatant }
				}

				if = {
					limit = {
						OR = {
							has_character_flag = is_victorious_attacker
							has_character_flag = is_victorious_defender
						}
					}

					add_society_currency_minor_effect = yes # In addition to the regular 200... (for tooltips, the effect is actually handled by clean_up_after_duel_effect)
				}
			}
		}

		event_target:other_combatant = {
			character_event = { id = HFP.10111 } # "I was murdered" event
		}

		ai_chance = {
			factor = 1

			mult_modifier = {
				factor = 0.1
				trait = kind
			}

			mult_modifier = {
				factor = 15
				trait = impaler
			}

			mult_modifier = {
				factor = 5
				trait = cruel
			}

			mult_modifier = {
				factor = 10
				has_character_flag = is_rival_fight
			}

			mult_modifier = {
				factor = 80

				is_member_of_any_warrior_lodge_trigger = yes
				NOT = { religion = event_target:other_combatant }
			}
		}
	}
}

# Wounded (specifics?) - I lost (sent from HFP.10105 above)
character_event = {
	id = HFP.10106
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant
	sound = duel_lose

	desc = {
		text = EVTDESC_HFP_10106_mock_duel_A
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = desc_A
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_mock_duel_B
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = desc_B
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_mock_duel_C
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = desc_C
		}
	}

	# Regular duels...
	desc = {
		text = EVTDESC_HFP_10106_intrigue_default
		trigger = {
			is_using_intrigue_trigger = yes
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_default_A
		trigger = {
			has_character_flag = desc_A
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_default_B
		trigger = {
			has_character_flag = desc_B
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_default_C
		trigger = {
			has_character_flag = desc_C
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_default_E
		trigger = {
			has_character_flag = desc_E
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10106_duel_D
		trigger = {
			has_character_flag = desc_D
			is_using_intrigue_trigger = no
			NOT = { has_character_flag = mock_duel }
		}
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
		}
	}

	is_triggered_only = yes

	immediate = {
		set_loser_flags_and_save_opponent_effect = yes
	}

	option = {
		name = {
			text = EVTOPTA_HFP_10106_bare_hands # HOW?! With your bare hands?
			trigger = {
				FROM = { has_character_flag = weapon_is_hand }
				has_character_flag = actually_injured
				has_character_flag = mock_duel
			}
		}
		name = {
			text = EVTOPTA_HFP_10106_sword # HOW?! With a WOODEN sword?
			trigger = {
				FROM = { has_character_flag = weapon_is_sword }
				has_character_flag = actually_injured
				has_character_flag = mock_duel
			}
		}
		name = {
			text = EVTOPTA_HFP_10106_staff # HOW?! With a wooden staff?
			trigger = {
				FROM = { has_character_flag = weapon_is_staff }
				has_character_flag = actually_injured
				has_character_flag = mock_duel
			}
		}
		name = {
			text = EVTOPTA_HFP_10106_spear # HOW?! With a wooden spear?
			trigger = {
				FROM = { has_character_flag = weapon_is_spear }
				has_character_flag = actually_injured
				has_character_flag = mock_duel
			}
		}
		name = {
			text = EVTOPTA_HFP_10106 # I don't feel so good
			trigger = {
				has_character_flag = actually_injured

				NOR = {
					trait = stubborn
					trait = envious
					has_character_flag = mock_duel
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10106_stubborn # I'll get you next time!
			trigger = {
				has_character_flag = actually_injured

				OR = {
					trait = stubborn
					trait = envious
				}

				NOT = { has_character_flag = mock_duel }
			}
		}
		name = {
			text = EVTOPTA_HFP_10106_aaargh # You won this one, [name]
			trigger = { has_character_flag = mildly_injured }
		}

		custom_tooltip = { text = you_lose_the_duel_tt }
		apply_selected_duel_injury_effect = yes
	}

	after = {
		tooltip = { clean_up_after_duel_effect = yes }

		hidden_effect = { # To handle follow-ups (rivarly/friendship/romance)
			random_list = {
				10 = {
					trigger = { has_character_flag = fight_could_spark_rivalry }

					if = {
						limit = { has_character_flag = mock_duel }
						set_character_flag = was_mock_duel@event_target:other_combatant
					}
					else_if = { limit = { has_character_flag = is_battlefield_duel }
						set_character_flag = was_battlefield_duel@event_target:other_combatant
					}

					character_event = {
						id = HFP.10112
						days = 22
						random = 5
					}
				}

				10 = {
					trigger = { has_character_flag = fight_could_spark_friendship }

					if = {
						limit = { has_character_flag = mock_duel }
						set_character_flag = was_mock_duel@event_target:other_combatant
					}
					else_if = {
						limit = { has_character_flag = is_battlefield_duel }
						set_character_flag = was_battlefield_duel@event_target:other_combatant
					}

					character_event = {
						id = HFP.10115
						days = 22
						random = 5
					}
				}

				10 = {
					trigger = { has_character_flag = fight_could_spark_romance }

					additive_modifier = {
						value = 100
						prev_is_lonely_this_romance_makes_sense_trigger = yes
					}

					if = {
						limit = { has_character_flag = mock_duel }
						set_character_flag = was_mock_duel@event_target:other_combatant
					}
					else_if = {
						limit = { has_character_flag = is_battlefield_duel }
						set_character_flag = was_battlefield_duel@event_target:other_combatant
					}

					character_event = {
						id = HFP.10118
						days = 22
						random = 5
					}
				}
			}

			character_event = {
				id = HFP.10196 # Send delayed clean-up, to ensure flags are set properly in this after effect
				days = 1
			}
		}
	}
}

# Cowardly display/Humiliation for the other combatant - I won!
character_event = {
	id = HFP.10107
	title = getDuelTitle
	desc = EVTDESC_HFP_10107
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant

	picture = {
		picture = GFX_evt_camaraderie
		trigger = { has_character_flag = use_tribal_victory_pic }
	}
	picture = {
		picture = GFX_evt_armory
		trigger = {
			NOT = { has_character_flag = use_tribal_victory_pic }
		}
	}

	is_triggered_only = yes # send_duel_result_event_effect

	immediate = {
		set_winner_flags_and_save_opponent_effect = yes
	}

	option = {
		name = EVTOPTA_HFP_10107 # Look at them run!

		custom_tooltip = { text = you_win_the_duel_tt }

		apply_generic_duel_victory_effect = yes
		handle_claim_duel_result_effect = yes # Claim duels only...
		# If expanded upon, set specific effects here
	}

	after = {
		clean_up_after_duel_effect = yes
	}
}

# Cowardly display - I lost
character_event = {
	id = HFP.10108
	title = getDuelTitle
	desc = EVTDESC_HFP_10108 # I ran away...!
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant

	is_triggered_only = yes # send_duel_result_event_effect

	immediate = {
		set_loser_flags_and_save_opponent_effect = yes
		clr_character_flag = add_duel_xp # Because you are chicken! No reward!

		if = {
			limit = {
				OR = {
					has_quest = quest_warrior_lodge_duel_honor
					has_quest = quest_warrior_lodge_duel_deadly
				}
				quest_target = { character = event_target:other_combatant }
			}

			set_character_flag = failed_mission # Because makes no sense this clears the mission...
		}
	}

	option = {
		name = {
			text = EVTOPTA_HFP_10108_craven
			trigger = { trait = craven }
		}
		name = {
			text = EVTOPTA_HFP_10108_shy
			trigger = { trait = shy }
		}
		name = {
			text = EVTOPTA_HFP_10108_wroth
			trigger = { trait = wroth }
		}
		name = {
			text = EVTOPTA_HFP_10108 # I should've stayed and fought!
			trigger = {
				NOR = {
					trait = craven
					trait = shy
					trait = wroth
				}
			}
		}

		custom_tooltip = { text = you_lose_the_duel_tt }

		handle_claim_duel_result_effect = yes # Claim duels only...

		# In case you were dueling to join a Warrior Lodge...
		if = {
			limit = { has_character_flag = awaiting_initiation_trial }

			add_character_modifier = {
				name = warrior_lodge_failed_joining_cd
				years = 10
				hidden = yes
			}
		}
	}

	after = {
		set_character_flag = skip_blood_effect
		clean_up_after_duel_effect = yes
	}
}

# Both wounded - I won!
character_event = {
	id = HFP.10109
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant

	desc = {
		text = EVTDESC_HFP_10109
		trigger = {
			NOT = { has_character_flag = is_battlefield_duel }
			has_character_flag = desc_A
		}
	}
	desc = {
		text = EVTDESC_HFP_10109_B
		trigger = {
			NOT = { has_character_flag = is_battlefield_duel }
			has_character_flag = desc_B
		}
	}
	desc = {
		text = EVTDESC_HFP_10109_C
		trigger = {
			NOT = { has_character_flag = is_battlefield_duel }
			has_character_flag = desc_C
		}
	}
	desc = {
		text = EVTDESC_HFP_10109_battlefield_duel
		trigger = { has_character_flag = is_battlefield_duel }
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
			NOT = { has_character_flag = is_battlefield_duel }
		}
	}

	is_triggered_only = yes # send_duel_result_event_effect

	immediate = {
		set_winner_flags_and_save_opponent_effect = yes
		set_character_flag = stalemate_won

		random_list = {
			33 = {
				set_character_flag = desc_A
				event_target:other_combatant = { set_character_flag = desc_A }
			}

			33 = {
				set_character_flag = desc_B
				event_target:other_combatant = { set_character_flag = desc_B }
			}

			33 = {
				set_character_flag = desc_C
				event_target:other_combatant = { set_character_flag = desc_C }
			}
		}
	}

	option = {
		name = EVTOPTA_HFP_10109 # It was all worth it

		custom_tooltip = { text = you_win_the_duel_tt }

		apply_generic_duel_victory_effect = yes
		apply_selected_duel_injury_effect = yes

		tooltip = {
			event_target:other_combatant = {
				show_scope_change = no
				apply_selected_duel_injury_effect = yes
			}

			clean_up_after_duel_effect = yes
		}

		# Sends event to opponent ("Both wounded - I lost")...
		event_target:other_combatant = {
			character_event = {
				id = HFP.10110
				days = 1
			}
		}
	}
}

# Both wounded - I lost
character_event = {
	id = HFP.10110
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war
	portrait = event_target:other_combatant

	desc = {
		text = EVTDESC_HFP_10110
		trigger = {
			has_character_flag = desc_A
			NOT = { has_character_flag = is_battlefield_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10110_B
		trigger = {
			has_character_flag = desc_B
			NOT = { has_character_flag = is_battlefield_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10110_C
		trigger = {
			has_character_flag = desc_C
			NOT = { has_character_flag = is_battlefield_duel }
		}
	}
	desc = {
		text = EVTDESC_HFP_10110_battlefield_duel
		trigger = { has_character_flag = is_battlefield_duel }
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
			NOT = { has_character_flag = is_battlefield_duel }
		}
	}

	is_triggered_only = yes

	immediate = {
		set_loser_flags_and_save_opponent_effect = yes
		set_character_flag = stalemate_lost
	}

	option = {
		name = EVTOPTA_HFP_10110 # Humiliating!

		custom_tooltip = { text = you_lose_the_duel_tt }

		apply_selected_duel_injury_effect = yes

		tooltip = {
			FROM = {
				show_scope_change = no
				apply_selected_duel_injury_effect = yes
			}
		}
	}

	after = {
		tooltip = { clean_up_after_duel_effect = yes }

		hidden_effect = { # To handle follow-ups (rivarly/friendship/romance)

			random_list = {
				10 = {
					trigger = { has_character_flag = fight_could_spark_rivalry }

					if = {
						limit = { has_character_flag = mock_duel }
						set_character_flag = was_mock_duel@event_target:other_combatant
					}
					else_if = {
						limit = { has_character_flag = is_battlefield_duel }
						set_character_flag = was_battlefield_duel@event_target:other_combatant
					}

					character_event = {
						id = HFP.10112
						days = 22
						random = 5
					}
				}

				10 = {
					trigger = { has_character_flag = fight_could_spark_friendship }

					if = {
						limit = { has_character_flag = mock_duel }
						set_character_flag = was_mock_duel@event_target:other_combatant
					}
					else_if = {
						limit = { has_character_flag = is_battlefield_duel }
						set_character_flag = was_battlefield_duel@event_target:other_combatant
					}

					character_event = {
						id = HFP.10115
						days = 22
						random = 5
					}
				}

				10 = {
					trigger = { has_character_flag = fight_could_spark_romance }

					additive_modifier = {
						value = 100
						prev_is_lonely_this_romance_makes_sense_trigger = yes
					}

					if = {
						limit = { has_character_flag = mock_duel }
						set_character_flag = was_mock_duel@event_target:other_combatant
					}
					else_if = {
						limit = { has_character_flag = is_battlefield_duel }
						set_character_flag = was_battlefield_duel@event_target:other_combatant
					}

					character_event = {
						id = HFP.10118
						days = 22
						random = 5
					}
				}
			}

			character_event = {
				id = HFP.10196 # Send delayed clean-up, to ensure flags are set properly in this after effect
				days = 1
			}
		}
	}
}

# Winner decided to kill me, mercilessly (send from HFP.10105)
character_event = {
	id = HFP.10111
	title = getDuelTitle
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HFP_10111_default
		trigger = {
			NOR = {
				has_character_flag = intrigue_options_available
				has_character_flag = is_battlefield_duel
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10111_battlefield_duel
		trigger = { has_character_flag = is_battlefield_duel }
	}
	desc = {
		text = EVTDESC_HFP_10111_intrigue
		trigger = { has_character_flag = intrigue_options_available }
	}

	picture = {
		picture = GFX_evt_duel_team # Snowy picture
		trigger = {
			capital_scope = { is_winter = yes }
			NOT = { has_character_flag = is_battlefield_duel }
		}
	}

	is_triggered_only = yes

	immediate = {
		set_loser_flags_and_save_opponent_effect = yes

		if = {
			limit = { multiplayer = yes }

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:other_combatant
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:other_combatant
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:other_combatant
				}
			}
		}
	}

	option = {
		name = EVTOPTA_HFP_10111 # Then there was nothing

		custom_tooltip = { text = you_lose_the_duel_tt }

		if = {
			limit = { multiplayer = no }

			debug_battle_death_counter_effect = yes # For debug purposes
			send_notifications_after_champion_stand_in_effect = yes

			if = {
				limit = {
					event_target:combatant_1 = { has_character_flag = deadly_duel@event_target:combatant_2 }
				}

				death = {
					death_reason = death_mission_duel # For flavor
					killer = event_target:other_combatant
				}
			}
			else_if = {
				limit = { has_character_flag = is_battlefield_duel }

				death = {
					death_reason = death_battle_duel
					killer = event_target:other_combatant
				}
			}
			else = {
				death = {
					death_reason = death_duel # Regular duel death
					killer = event_target:other_combatant
				}
			}
		}
	}

	after = {
		if = {
			limit = {
				event_target:other_combatant = { is_using_intrigue_trigger = yes }
				is_using_intrigue_trigger = no
			}

			tooltip = {
				handle_poison_effect = yes
			}
		}

		hidden_effect = {
			clean_up_after_duel_effect = yes
			event_target:other_combatant = { clean_up_after_duel_effect = yes }
		}
	}
}

# Duel led to rivarly (sent from HFP.10106 (I lost a duel - Wounded))
character_event = {
	id = HFP.10112
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_HFP_10112_mock_duel
		picture = GFX_evt_camaraderie
		trigger = {
			has_character_flag = was_mock_duel@event_target:other_combatant
			is_incapable = no
		}
	}
	desc = {
		text = EVTDESC_HFP_10112_default
		trigger = {
			NOT = { has_character_flag = was_mock_duel@event_target:other_combatant }
			is_incapable = no
		}
	}
	desc = {
		text = EVTDESC_HFP_10112_incapable
		trigger = { is_incapable = yes }
	}

	is_triggered_only = yes

	trigger = {
		event_target:other_combatant = {
			is_alive = yes
			NOT = { is_rival = ROOT }
		}
	}

	option = {
		name = EVTOPTA_HFP_10112 # I'll make them pay

		add_character_modifier = {
			name = fueled_by_rage
			years = 2
		}

		add_rival = event_target:other_combatant

		event_target:other_combatant = {
			character_event = {
				id = HFP.10113
				days = 1
			}
		}
	}

	option = {
		name = EVTOPTB_HFP_10112 # These feelings shall pass

		trigger = {
			NOT = {
				has_opinion_modifier = {
					name = opinion_fought_duel
					who = event_target:other_combatant
				}
			}
		}

		prestige = -15

		opinion = {
			name = opinion_fought_duel # Update to something cooler?
			who = event_target:other_combatant
			years = 10
		}
	}

	after = {
		clr_character_flag = was_mock_duel@event_target:other_combatant
	}
}

# Gain rival notification
character_event = {
	id = HFP.10113
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_war

	desc = {
		text = EVTDESC_WOL_11014 # They did not take lightly, being defeated and has sworn revenge
		trigger = { FROM = { is_incapable = no } }
	}
	desc = {
		text = EVTDESC_HFP_10113_incapable # The last thing they muttered before the slipped into slumber was that they'd kill me?
		trigger = { FROM = { is_incapable = yes } }
	}

	is_triggered_only = yes

	option = {
		name = {
			text = EVTOPTA_WOL_11014
			trigger = {
				num_of_rivals < 3
				FROM = { is_incapable = no }
			}
		}
		name = {
			text = EVTOPTB_WOL_11014
			trigger = {
				num_of_rivals >= 3
				FROM = { is_incapable = no }
			}
		}
		name = {
			text = EVTOPTA_HFP_10113
			trigger = {
				FROM = { is_incapable = yes }
			}
		}

		add_rival = FROM
	}
}

# Duel led to friendship (sent from HFP.10106 (I lost a duel - Wounded))
character_event = {
	id = HFP.10115
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_HFP_10115_mock_duel
		trigger = { has_character_flag = was_mock_duel@event_target:other_combatant }
	}
	desc = {
		text = EVTDESC_HFP_10115_battlefield_duel
		trigger = { has_character_flag = was_battlefield_duel@event_target:other_combatant }
	}
	desc = {
		text = EVTDESC_HFP_10115_default
		trigger = {
			NOR = {
				has_character_flag = was_mock_duel@event_target:other_combatant
				has_character_flag = was_battlefield_duel@event_target:other_combatant
			}
		}
	}

	is_triggered_only = yes

	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		event_target:other_combatant = {
			is_alive = yes
			NOT = { is_friend = ROOT }
			is_incapable = no
			prisoner = no
			is_adult = yes
		}
	}

	option = {
		name = EVTOPTA_HFP_10115 # They were a worthy opponent!

		trigger = {
			NOT = { is_friend = event_target:other_combatant }
		}

		tooltip = {
			if = { # If you already have an opinion in place, become friends...
				limit = {
					OR = {
						reverse_has_opinion_modifier = {
							name = opinion_budding_friendship
							who = event_target:other_combatant
						}

						has_opinion_modifier = {
							name = opinion_budding_friendship
							who = event_target:other_combatant
						}
					}
				}

				add_friend = event_target:other_combatant
			}
			else = { # otherwise, add opinions... (*actually* added in follow-up)
				opinion = {
					name = opinion_budding_friendship
					who = event_target:other_combatant
					years = 10
				}

				reverse_opinion = {
					name = opinion_budding_friendship
					who = event_target:other_combatant
					years = 10
				}
			}
		}

		event_target:other_combatant = {
			character_event = {
				id = HFP.10116
				days = 1
			}
		}
	}

	option = {
		name = EVTOPTB_HFP_10115 # I have enough sparring partners

		add_trait_fully_silently_proud_effect = yes

		clr_character_flag = was_mock_duel@event_target:other_combatant
		clr_character_flag = was_battlefield_duel@event_target:other_combatant
	}
}

# Gain friend notification (send from HFP.10115, above - to the winner)
character_event = {
	id = HFP.10116
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_HFP_10116_mock_duel
		trigger = { FROM = { has_character_flag = was_mock_duel@event_target:other_combatant } }
	}
	desc = {
		text = EVTDESC_HFP_10116_default
		trigger = {
			FROM = {
				NOR = {
					has_character_flag = was_mock_duel@event_target:other_combatant
					has_character_flag = was_battlefield_duel@event_target:other_combatant
				}
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10116_battlefield_duel
		trigger = { FROM = { has_character_flag = was_battlefield_duel@event_target:other_combatant } }
	}

	is_triggered_only = yes

	option = {
		name = {
			text = EVTOPTA_HFP_10116_honest # Honest? How refreshing!
			trigger = {
				trait = honest

				FROM = {
					NOR = {
						has_character_flag = was_mock_duel@event_target:other_combatant
						has_character_flag = was_battlefield_duel@event_target:other_combatant
					}
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10116_default # Don't be too hard on yourself!
			trigger = {
				NOT = { trait = honest }

				FROM = {
					NOR = {
						has_character_flag = was_mock_duel@event_target:other_combatant
						has_character_flag = was_battlefield_duel@event_target:other_combatant
					}
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10116_mock_duel # Don't be too hard on yourself!
			trigger = { FROM = { has_character_flag = was_mock_duel@event_target:other_combatant } }
		}
		name = {
			text = EVTOPTA_HFP_10116_battlefield_duel # Friendships come in many forms
			trigger = {
				FROM = {
					has_character_flag = was_battlefield_duel@event_target:other_combatant
					NOT = { has_character_flag = was_mock_duel@event_target:other_combatant }
				}
			}
		}

		if = {
			limit = {
				OR = {
					reverse_has_opinion_modifier = {
						name = opinion_budding_friendship
						who = FROM
					}

					has_opinion_modifier = {
						name = opinion_budding_friendship
						who = FROM
					}
				}
			}

			add_friend = FROM
		}
		else = {
			opinion = {
				name = opinion_budding_friendship
				who = FROM
				years = 10
			}

			reverse_opinion = {
				name = opinion_budding_friendship
				who = FROM
				years = 10
			}
		}

		FROM = {
			clr_character_flag = was_mock_duel@event_target:other_combatant
		}
	}
}

# Duel led to romance (sent from HFP.10106 (I lost a duel - Wounded))
character_event = {
	id = HFP.10118
	picture = GFX_evt_duel_scene
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_HFP_10118_new_crush_A # Not spouse/no romance past or budding
		trigger = {
			has_character_flag = desc_A

			NOR = {
				has_character_flag = carried_torch_for@event_target:other_combatant
				has_character_flag = carrying_torch_for@event_target:other_combatant
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_budding_romance }
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_marital_love }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10118_new_crush_B # Not spouse/no romance past or budding
		trigger = {
			has_character_flag = desc_B

			NOR = {
				has_character_flag = carried_torch_for@event_target:other_combatant
				has_character_flag = carrying_torch_for@event_target:other_combatant
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_budding_romance }
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_marital_love }
			}
		}
	}
	desc = {
		text = EVTDESC_HFP_10118_new_crush_C # Not spouse/no romance past or budding
		trigger = {
			has_character_flag = desc_C

			NOR = {
				has_character_flag = carried_torch_for@event_target:other_combatant
				has_character_flag = carrying_torch_for@event_target:other_combatant
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_budding_romance }
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_marital_love }
			}
		}
	}

	desc = {
		text = EVTDESC_HFP_10118_crushing_already # Not spouse/romance budding already
		trigger = {
			OR = {
				has_character_flag = carrying_torch_for@event_target:other_combatant
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_budding_romance }
			}

			NOT = { has_character_flag = carried_torch_for@event_target:other_combatant }
		}
	}
	desc = {
		text = EVTDESC_HFP_10118_crush_past # Not spouse/used to carry torch
		trigger = {
			has_character_flag = carried_torch_for@event_target:other_combatant

			NOR = {
				has_character_flag = carrying_torch_for@event_target:other_combatant
				has_opinion_modifier = { who = event_target:other_combatant name = opinion_budding_romance }
			}
		}
	}

	is_triggered_only = yes

	min_age = 16
	only_capable = yes
	prisoner = no

	trigger = {
		event_target:other_combatant = {
			is_alive = yes
			NOT = { is_lover = ROOT }
			is_incapable = no
			prisoner = no
			is_adult = yes
		}
	}

	immediate = {
		random_list = {
			33 = {
				set_character_flag = desc_A
				event_target:other_combatant = { set_character_flag = desc_A }
			}

			33 = {
				set_character_flag = desc_B
				event_target:other_combatant = { set_character_flag = desc_B }
			}

			33 = {
				set_character_flag = desc_C
				event_target:other_combatant = { set_character_flag = desc_C }
			}
		}
	}

	option = {
		name = EVTOPTA_HFP_10118 # I have to express my feelings to them!

		custom_tooltip = {
			text = EVTOPTA_HFP_10118_TT

			event_target:other_combatant = {
				if = { # If they already like you, you'll likely become lovers...
					limit = {
						OR = {
							has_opinion_modifier = {
								name = opinion_budding_romance
								who = ROOT
							}

							has_character_flag = carried_torch_for@ROOT
							has_character_flag = carrying_torch_for@ROOT
						}
					}

					set_character_flag = finally_lovers
				}
				else = { # otherwise, add opinion of them...
					set_character_flag = they_like_me
				}
			}

			opinion = {
				name = opinion_budding_romance
				who = event_target:other_combatant
				years = 10
			}
		}

		event_target:other_combatant = {
			character_event = { id = HFP.10119 }
		}

		ai_chance = {
			factor = 20

			mult_modifier = {
				factor = 2
				trait = lustful
			}

			mult_modifier = {
				factor = 2
				has_lover = no
			}

			mult_modifier = {
				factor = 2
				event_target:other_combatant = { has_fair_trait_trigger = yes }
			}
		}
	}

	option = {
		name = EVTOPTB_HFP_10118 # They can never know...!

		add_character_modifier = {
			name = carrying_torch
			years = 5
		}

		event_target:other_combatant = { save_event_target_as = dream_person }
		set_character_flag = carrying_torch_for@event_target:dream_person
		clr_character_flag = was_mock_duel@event_target:other_combatant

		character_event = {
			id = HFP.10195 # Delayed event to update torch-flag to relate to the past
			years = 5
		}

		ai_chance = {
			factor = 1

			mult_modifier = {
				factor = 200
				event_target:other_combatant = { root_has_terrible_opinion_modifier_of_this_trigger = yes }
			}
		}
	}

	after = {
		clr_character_flag = desc_A
		clr_character_flag = desc_B
		clr_character_flag = desc_C
		clr_character_flag = desc_D
	}
}

# Gain crush notification (reciprocate or not?)
character_event = {
	id = HFP.10119
	picture = GFX_evt_recieve_letter
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_HFP_10119_finally_lovers
		trigger = { has_character_flag = finally_lovers }
	}
	desc = {
		text = EVTDESC_HFP_10119_A
		trigger = {
			has_character_flag = they_like_me
			has_character_flag = desc_A
		}
	}
	desc = {
		text = EVTDESC_HFP_10119_B
		trigger = {
			has_character_flag = they_like_me
			has_character_flag = desc_B
		}
	}
	desc = {
		text = EVTDESC_HFP_10119_C
		trigger = {
			has_character_flag = they_like_me
			has_character_flag = desc_C
		}
	}

	picture = {
		picture = GFX_evt_pleasing_letter
		trigger = {
			trigger_if = {
				limit = { is_female = no }
				practical_age < 50
			}
		}
	}
	picture = {
		picture = GFX_evt_upsetting_letter
		trigger = {
			is_female = no
			practical_age >= 50
		}
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA_HFP_10119 # I want to act on these feelings!

		if = {
			limit = { has_character_flag = they_like_me }

			custom_tooltip = { text = EVTOPTA_HFP_10119_TT }

			opinion = {
				name = opinion_budding_romance
				who = FROM
				years = 10
			}
		}

		if = {
			limit = { has_character_flag = finally_lovers }
			tooltip = { add_lover = FROM }
		}

		if = {
			limit = {
				ai = no
				is_ironman = yes
			}

			set_character_flag = achievement_love_is_a_battlefield
		}

		FROM = {
			character_event = {
				id = HFP.10120
				days = 15
				random = 5
			}
		}

		ai_chance = {
			factor = 10

			mult_modifier = {
				factor = 2
				trait = lustful
			}

			mult_modifier = {
				factor = 2
				has_lover = no
			}

			mult_modifier = {
				factor = 2
				FROM = { has_fair_trait_trigger = yes }
			}

			mult_modifier = {
				factor = 2
				FROM = { has_top_tier_education_trait_trigger = yes }
			}

			mult_modifier = {
				factor = 2
				FROM = { is_benevolent_trigger = yes }
			}

			mult_modifier = {
				factor = 2
				FROM = { has_pleasant_personality_trigger = yes }
			}
		}
	}

	option = {
		name = EVTOPTB_HFP_10119 # I think I'd rather not get involved with <from>.

		if = {
			limit = { has_character_flag = they_like_me }
			custom_tooltip = { text = EVTOPTA_HFP_10119_TT }
		}

		FROM = {
			character_event = {
				id = HFP.10121
				days = 15
				random = 5
			}

			clr_character_flag = was_mock_duel@event_target:other_combatant
			clr_character_flag = was_battlefield_duel@event_target:other_combatant
		}

		ai_chance = {
			factor = 1

			mult_modifier = {
				factor = 200
				FROM = { root_has_terrible_opinion_modifier_of_this_trigger = yes }
			}

			mult_modifier = {
				factor = 10
				FROM = { has_negative_congenital_trigger = yes }
			}

			mult_modifier = {
				factor = 2
				FROM = { has_bottom_tier_education_trait_trigger = yes }
			}

		}
	}

	after = {
		clr_character_flag = desc_A
		clr_character_flag = desc_B
		clr_character_flag = desc_C
		clr_character_flag = desc_D
	}
}

character_event = { # Response: Embraced! (for the one originally struck with feelings)
	id = HFP.10120
	picture = GFX_evt_recieve_letter
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_HFP_10120_finally_lovers
		trigger = { FROM = { has_character_flag = finally_lovers } }
	}
	desc = {
		text = EVTDESC_HFP_10120_A
		trigger = { FROM = { has_character_flag = they_like_me } }
	}

	picture = {
		picture = GFX_evt_pleasing_letter
		trigger = {
			trigger_if = {
				limit = { is_female = no }
				practical_age < 50
			}
		}
	}
	picture = {
		picture = GFX_evt_upsetting_letter
		trigger = {
			is_female = no
			practical_age >= 50
		}
	}

	is_triggered_only = yes

	immediate = { # Selects a trait effect...
		if = {
			limit = {
				NOR = {
					trait = honest
					trait = deceitful
				}
			}

			set_character_flag = add_honest
		}
		else_if = {
			limit = {
				NOR = {
					trait = lustful
					trait = chaste
				}
			}

			set_character_flag = add_lustful
		}
		else_if = {
			limit = { trait = shy }
			set_character_flag = remove_shy
		}
		else_if = {
			limit = { trait = envious }
			set_character_flag = remove_envious
		}
		else_if = {
			limit = {
				trait = cruel
				FROM = { trait = kind }
			}

			set_character_flag = remove_cruel
		}
		else_if = {
			limit = {
				NOT = { trait = kind }
				FROM = { trait = kind }
			}

			set_character_flag = add_kind
		}
	}

	option = {
		name = {
			text = EVTOPTA_HFP_10120_honest
			trigger = {
				NOR = {
					has_character_flag = add_honest
					has_character_flag = add_lustful
					has_character_flag = remove_shy
					has_character_flag = add_kind
					has_character_flag = remove_envious
					has_character_flag = remove_cruel
				}
			}
		}
		name = {
			text = EVTOPTA_HFP_10120_honest
			trigger = { has_character_flag = add_honest }
		}
		name = {
			text = EVTOPTA_HFP_10120_lustful
			trigger = { has_character_flag = add_lustful }
		}
		name = {
			text = EVTOPTA_HFP_10120_shy
			trigger = { has_character_flag = remove_shy }
		}
		name = {
			text = EVTOPTA_HFP_10120_kind
			trigger = { has_character_flag = add_kind }
		}
		name = {
			text = EVTOPTA_HFP_10120_envious
			trigger = { has_character_flag = remove_envious }
		}
		name = {
			text = EVTOPTA_HFP_10120_cruel
			trigger = { has_character_flag = remove_cruel }
		}

		if = {
			limit = { FROM = { has_character_flag = finally_lovers } }
			add_lover = FROM
		}
		else = {
			custom_tooltip = { text = EVTOPTA_HFP_10119_TT } # FROM has received the opinion Budding Romance

			trigger_switch = {
				on_trigger = has_character_flag

				add_honest     = { add_trait = honest }
				add_lustful    = { add_trait = lustful }
				add_kind       = { add_trait = kind }
				remove_shy     = { remove_trait = shy }
				remove_envious = { remove_trait = envious }
				remove_cruel   = { remove_trait = cruel }
			}
		}

		if = {
			limit = {
				ai = no
				is_ironman = yes
			}

			set_character_flag = achievement_love_is_a_battlefield
		}

		FROM = {
			clr_character_flag = finally_lovers
			clr_character_flag = they_like_me
		}

		clr_character_flag = add_honest
		clr_character_flag = add_lustful
		clr_character_flag = remove_shy
		clr_character_flag = add_kind
		clr_character_flag = remove_envious
		clr_character_flag = remove_cruel
	}
}

character_event = { # Response: Rejected! (for the one originally struck with feelings)
	id = HFP.10121
	desc = EVTDESC_HFP_10121
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	immediate = {
		job_chancellor = { # For GetMyChancellorName
			save_event_target_as = advisor_target
		}
	}

	option = {
		name = EVTOPTA_HFP_10121 # I will keep this to myself then...

		add_character_modifier = {
			name = carrying_torch
			years = 5
		}

		hidden_effect = {
			event_target:other_combatant = { save_event_target_as = dream_person }
			set_character_flag = carrying_torch_for@event_target:dream_person
			clr_character_flag = was_mock_duel@event_target:other_combatant

			character_event = {
				id = HFP.10195 # Delayed event to update torch-flag to relate to the past
				years = 5
			}
		}
	}

	option = {
		name = EVTOPTB_HFP_10121 # It is useless

		add_trait_silently_depressed_effect = yes
	}

	after = {
		FROM = {
			clr_character_flag = finally_lovers
			clr_character_flag = they_like_me
		}
	}
}

# Delayed hidden event for figuring out who is your main crush, sort of
character_event = {
	id = HFP.10195

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		clr_character_flag = carrying_torch_for@event_target:dream_person
		set_character_flag = carried_torch_for@event_target:dream_person
	}
}

# Delayed hidden event for cleaning up after duels...
character_event = {
	id = HFP.10196

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		event_target:combatant_1 = { clean_up_after_duel_effect = yes }
		event_target:combatant_2 = { clean_up_after_duel_effect = yes }
	}
}

# Notification "My duel target died before we could start the duel..."
character_event = {
	id = HFP.10197
	desc = EVTDESC_HFP_10196
	picture = GFX_evt_battle

	is_triggered_only = yes
	notification = yes

	option = { # Alas
		name = ALAS
	}
}

# Consequence of turning down duels: Random subjects: Become Craven, like your liege!
character_event = {
	id = HF.16000
	picture = GFX_evt_camaraderie
	border = GFX_event_normal_frame_war
	portrait = event_target:craven_ruler

	desc = {
		text = EVTDESC_HF_16000_A
		trigger = { dynasty = event_target:craven_ruler }
	}
	desc = {
		text = EVTDESC_HF_16000_B
		trigger = {
			NOT = { dynasty = event_target:craven_ruler }
		}
	}

	is_triggered_only = yes

	only_capable = yes
	prisoner = no

	trigger = {
		NOT = { trait = craven }
		is_inaccessible_trigger = no

		FROM = {
			is_alive = yes
			has_character_modifier = duels_declined
			trait = craven
			is_incapable = no
		}

		NAND = { # One part should be AI, for ease of choices
			ai = no
			FROM = { ai = no }
		}
	}

	immediate = {
		FROM = { save_event_target_as = craven_ruler }
	}

	option = { # Yes, you can't be too careful
		name = EVTOPTA_HF_16000

		if = {
			limit = { ai = no } # Otherwise, liege is player, and traits are added later

			add_trait_partially_silently_craven_effect = yes
		}

		event_target:craven_ruler = {
			character_event = {
				id = HF.16001
				days = 1
			}
		}

		ai_chance = {
			factor = 50

			mult_modifier = {
				factor = 1.5
				trait = trusting
			}

			mult_modifier = {
				factor = 1.5
				trait = weak
			}

			mult_modifier = {
				factor = 1.5
				trait = frail
			}

			mult_modifier = {
				factor = 1.5

				opinion = {
					who = event_target:craven_ruler
					value >= 50
				}
			}

			mult_modifier = {
				factor = 1.5

				opinion = {
					who = event_target:craven_ruler
					value >= 70
				}
			}

			mult_modifier = {
				factor = 1.5

				opinion = {
					who = event_target:craven_ruler
					value >= 80
				}
			}

			mult_modifier = {
				factor = 1.5
				is_child_of = event_target:craven_ruler
			}
		}
	}

	option = { # No, I am ashamed of my liege
		name = EVTOPTB_HF_16000

		tooltip = { # Added for real in follow up event
			opinion = {
				name = opinion_renowned_chicken
				who = event_target:craven_ruler
				years = 20
			}

			reverse_opinion = {
				name = opinion_disrespectful_subject
				who = event_target:craven_ruler
				years = 20
			}
		}

		event_target:craven_ruler = {
			character_event = {
				id = HF.16002
				days = 1
			}
		}

		ai_chance = {
			factor = 50

			mult_modifier = {
				factor = 1.5
				trait = wroth
			}

			mult_modifier = {
				factor = 1.5
				trait = ambitious
			}

			mult_modifier = {
				factor = 1.5
				trait = strong
			}

			mult_modifier = {
				factor = 1.5
				trait = brawny
			}

			mult_modifier = {
				factor = 1.5

				opinion = {
					who = event_target:craven_ruler
					value < 25
				}
			}

			mult_modifier = {
				factor = 1.5

				opinion = {
					who = event_target:craven_ruler
					value < 0
				}
			}

			mult_modifier = {
				factor = 1.5

				opinion = {
					who = event_target:craven_ruler
					value < -25
				}
			}
		}
	}
}

# Liege finds out their subject wants to be Craven, just like them
character_event = {
	id = HF.16001
	desc = EVTDESC_HF_16001
	picture = GFX_evt_camaraderie
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA_HF_16001 # Thank you! Let's be Craven together

		prestige = 10

		FROM = {
			show_scope_change = no

			add_trait_partially_silently_craven_effect = yes
		}
	}

	option = {
		name = EVTOPTB_HF_16001 # No, do as I SAY, not what... Argh..

		custom_tooltip = { text = EVTOPTB_HF_16001_TT }

		FROM = {
			show_scope_change = no

			opinion = {
				name = opinion_hypocrit_ruler
				who = ROOT
				years = 20
			}

			clr_character_flag = reacting_to_craven_duelist
		}
	}
}

# Liege finds out their subject is ashamed of them, just like them
character_event = {
	id = HF.16002
	desc = EVTDESC_HF_16002
	picture = GFX_evt_upsetting_letter
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	trigger = {
		FROM = { is_alive = yes }
	}

	option = {
		name = EVTOPTA_HF_16002 # They... have a point

		random = {
			chance = 20
			remove_trait_craven_effect = yes
		}

		reverse_opinion = {
			name = opinion_renowned_chicken
			who = FROM
			years = 20
		}
	}

	option = {
		name = EVTOPTB_HF_16002 # Political nonsense! I do as I please!

		prestige = 10

		opinion = {
			name = opinion_disrespectful_subject
			who = FROM
			years = 20
		}

		reverse_opinion = {
			name = opinion_renowned_chicken
			who = FROM
			years = 20
		}
	}

	after = {
		FROM = { clr_character_flag = reacting_to_craven_duelist }
	}
}