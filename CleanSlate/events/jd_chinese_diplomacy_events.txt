### DIPLOMACY EVENTS FOR CHINA OFF-MAP POWER###

# IDs
# JD. 7000- 7010
# JD.10009-10032
# JD.20000-20020
# JD.30000-30012
# JD.40000-40011
# JD.60010-60016
# JD.70000-70009

# Written by:
# Milla Isaksson
# Joel Hansson
# Mathilda Bjarnehed
# Drikus Kuiper
# Daniel Moore
# Alexander Oltner

namespace = JD

### Chinese guests (the Governor's councilor comes to visit)
letter_event = {
	id = JD.20002
	border = GFX_event_letter_frame_diplomacy
	portrait = event_target:chinese_guest

	desc = {
		text = EVTDESC_JD_20002_A
		trigger = {
			NOT = {
				is_tributary = {
					type = offmap
					suzerain = event_target:the_protector_general
				}
			}
		}
	}
	desc = {
		text = EVTDESC_JD_20002_B
		trigger = {
			is_tributary = {
				type = offmap
				suzerain = event_target:the_protector_general
			}
		}
	}

	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	min_age = 16
	only_capable = yes
	prisoner = no
	war = no

	trigger = {
		china_diplo_interaction_trigger = yes
		is_inaccessible_trigger = no
		NOT = { has_character_flag = chinese_governor_councilor_guest }

		offmap_china = {
			governor = {
				is_landed = yes # to make sure there is a councilor to send
				NOT = { character = ROOT }
			}

			NOR = {
				has_status = china_civil_war
				has_status = china_plague
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 0.6
			offmap_china = { has_status = china_unrest }
		}
		mult_modifier = {
			factor = 0.3
			offmap_china = { has_status = china_mongol_invasion }
		}
		mult_modifier = {
			factor = 0.3
			offmap_china = { has_status = china_jurchen_invasion }
		}
		mult_modifier = {
			factor = 0.3
			offmap_china = { has_status = china_famine }
		}
		mult_modifier = {
			factor = 1.5
			offmap_china = { has_status = china_golden_age }
		}
		mult_modifier = {
			factor = 1.5
			offmap_china = { has_policy = china_expansionist }
		}
		mult_modifier = {
			factor = 1.5
			has_grace_medium_trigger = yes
		}
		mult_modifier = {
			factor = 1.5
			has_grace_major_trigger = yes
		}
		mult_modifier = {
			factor = 0.1
			has_grace_trivial_trigger = no
		}
		mult_modifier = {
			factor = 1.5

			is_tributary = {
				type = offmap
				suzerain = e_china_west_governor
			}
		}
	}

	immediate = {
		offmap_china = {
			governor = {
				save_event_target_as = the_protector_general

				# Selects a diplomat
				random_list = {
					20 = {
						trigger = {
							job_chancellor = {
								OR = {
									culture_group = chinese_group
									culture_group = altaic
								}

								NOT = { character = ROOT }
							}
						}

						job_chancellor = {
							# Picks a reason for visiting
							set_character_flag = cg_diplomatic_visit
							save_event_target_as = chinese_guest

							save_persistent_event_target = {
								name = host_of_chinese_diplomat
								scope = ROOT
							}
						}
					}

					20 = {
						trigger = {
							job_marshal = {
								OR = {
									culture_group = chinese_group
									culture_group = altaic
								}

								NOT = { character = ROOT }
							}
						}

						job_marshal = {
							# Picks a reason for visiting
							if = {
								limit = {
									ROOT = {
										is_tributary = {
											type = offmap
											suzerain = event_target:the_protector_general
										}
									}
								}

								set_character_flag = cg_oversee_troops
							}
							else = {
								set_character_flag = cg_study_military
							}

							save_event_target_as = chinese_guest

							save_persistent_event_target = {
								name = host_of_chinese_diplomat
								scope = ROOT
							}
						}
					}

					20 = {
						trigger = {
							job_treasurer = {
								OR = {
									culture_group = chinese_group
									culture_group = altaic
								}

								NOT = { character = ROOT }
							}
						}

						job_treasurer = {
							# Picks a reason for visiting
							if = {
								limit = {
									ROOT = {
										is_tributary = {
											type = offmap
											suzerain = event_target:the_protector_general
										}
									}
								}

								set_character_flag = cg_oversee_tax_collection
							}
							else = {
								set_character_flag = cg_trade
							}

							save_event_target_as = chinese_guest

							save_persistent_event_target = {
								name = host_of_chinese_diplomat
								scope = ROOT
							}
						}
					}

					20 = {
						trigger = {
							job_spiritual = {
								OR = {
									culture_group = chinese_group
									culture_group = altaic
								}

								NOT = { character = ROOT }
							}
						}

						job_spiritual = {
							# Picks a reason for visiting
							if = {
								limit = {
									ROOT = {
										is_tributary = {
											type = offmap
											suzerain = event_target:the_protector_general
										}
									}
								}

								set_character_flag = cg_preaching
							}
							else = {
								set_character_flag = cg_study_theology
							}

							save_event_target_as = chinese_guest

							save_persistent_event_target = {
								name = host_of_chinese_diplomat
								scope = ROOT
							}
						}
					}
				}
			}
		}
	}

	# Welcome!
	option = {
		name = EVTOPTA_JD_20002

		custom_tooltip = { text = EVTOPTA_JD_20002_TT }

		add_grace_trivial_effect = yes
		sound_effect = china_grace_gain
		set_character_flag = chinese_governor_councilor_guest

		event_target:chinese_guest = {
			character_event = { id = JD.20003 days = 50 random = 20 }
		}
	}

	# Go away
	option = {
		name = EVTOPTB_JD_20002

		custom_tooltip = { text = EVTOPTB_JD_20002_TT }

		detract_grace_major_effect = yes

		event_target:chinese_guest = {
			show_scope_change = no

			opinion = {
				name = opinion_offended
				who = ROOT
				years = 15
			}

			liege = {
				show_scope_change = no

				opinion = {
					name = opinion_offended
					who = ROOT
					years = 15
				}
			}
		}
	}
}

character_event = { # Fired from on_death to the character receiving the chinese diplomat
	id = JD.10022

	hide_window = yes
	is_triggered_only = yes # on_death, on_become_imprisoned_any_reason

	trigger = {
		persistent_event_target:host_of_chinese_diplomat = { always = yes }
	}

	immediate = {
		persistent_event_target:host_of_chinese_diplomat = {
			character_event = { id = JD.10023 } # visible event for player
		}
	}
}

character_event = { # Fallback (in case the visitor died/imprisoned)
	id = JD.10023
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_JD_10023_death
		trigger = {
			NOT = { FROM = { is_alive = yes } }
			death_no_trace_trigger = no
		}
	}
	desc = {
		text = EVTDESC_JD_10023_prison
		trigger = { FROM = { prisoner = yes } }
	}
	desc = {
		text = EVTDESC_JD_10023_missing
		trigger = {
			FROM = { death_no_trace_trigger = yes }
		}
	}

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		FROM = { death_in_china_trigger = no }
	}

	option = {
		name = EVTOPTA_JD_10023

		prestige = -50
		wealth = -15

		add_offmap_currency = {
			offmap = offmap_china
			value = 15
		}

		offmap_china = {
			governor = {
				show_portrait = yes
			}
		}
	}

	option = {
		name = EVTOPTB_JD_10023
	}

	after = {
		# Clean-up event
		character_event = { id = JD.20020 days = 1 }
		FROM = { clear_persistent_event_target = host_of_chinese_diplomat }
	}
}

# Tombola for outcomes
character_event = {
	id = JD.20003

	hide_window = yes
	is_triggered_only = yes

	has_dlc = "Jade Dragon"
	prisoner = no

	trigger = {
		offmap_china = { governor = { is_liege_of = ROOT } }
	}

	immediate = {
		FROM = {
			# Save corresponding councilor
			if = {
				limit = { ROOT = { has_job_title = job_chancellor } }
				job_chancellor = { save_event_target_as = corresponding_councilor }
			}
			else_if = {
				limit = { ROOT = { has_job_title = job_marshal } }
				job_marshal = { save_event_target_as = corresponding_councilor }
			}
			else_if = {
				limit = { ROOT = { has_job_title = job_treasurer } }
				job_treasurer = { save_event_target_as = corresponding_councilor }
			}
			else_if = {
				limit = { ROOT = { has_job_title = job_spiritual } }
				job_spiritual = { save_event_target_as = corresponding_councilor }
			}

			# Tombola
			random_list = { # All is well
				30 = {
					trigger = { event_target:corresponding_councilor = { always = yes } }

					mult_modifier = {
						factor = 0.5

						event_target:corresponding_councilor = {
							trigger_if = {
								limit = { has_job_title = job_chancellor }
								diplomacy < 8
							}
							trigger_else_if = {
								limit = { has_job_title = job_marshal }
								martial < 8
							}
							trigger_else_if = {
								limit = { has_job_title = job_treasurer }
								stewardship < 8
							}
							trigger_else = {
								has_job_title = job_spiritual
								learning < 8
							}
						}
					}

					character_event = { id = JD.20004 }
				}

				10 = { # Falling stars
					character_event = { id = JD.20005 }
				}

				10 = { # Greet in chinese?
					trigger = {
						NOT = { culture = event_target:chinese_guest }
					}

					mult_modifier = {
						factor = 1.3
						is_learned_trigger = yes
					}

					character_event = { id = JD.20006 }
				}

				10 = { # Wearing the clothes wrong
					trigger = {
						NOT = { culture = event_target:chinese_guest }
					}

					mult_modifier = {
						factor = 1.3
						is_dumb_trigger = yes
					}
					mult_modifier = {
						factor = 1.3
						trait = greedy
					}

					character_event = { id = JD.20011 }
				}

				10 = { # What you said (apparently) had a deep hidden meaning
					mult_modifier = {
						factor = 1.3
						is_smart_trigger = yes
					}
					mult_modifier = {
						factor = 1.3
						trait = gregarious
					}
					mult_modifier = {
						factor = 1.5
						trait = poet
					}
					mult_modifier = {
						factor = 1.3
						trait = socializer
					}

					character_event = { id = JD.20012 }
				}
			}

			# Clear-up event
			character_event = { id = JD.20020 months = 3 }
		}
	}
}

# The visit went well
character_event = {
	id = JD.20004
	desc = EVTDESC_JD_20004
	picture = GFX_evt_china_diplomatic_success
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_20004

		add_grace_minor_effect = yes
		sound_effect = china_grace_gain

		event_target:chinese_guest = {
			show_portrait = yes
			clear_persistent_event_target = host_of_chinese_diplomat
		}

		hidden_effect = {
			random = {
				chance = 20

				mult_modifier = {
					factor = 0.1
					any_artifact = { has_artifact_flag = chinese }
				}

				character_event = { id = JD.60004 days = 1 }
			}
		}
	}
}

# Falling stars
character_event = {
	id = JD.20005
	picture = GFX_evt_comet
	border = GFX_event_normal_frame_religion

	desc = {
		text = EVTDESC_JD_20005
		trigger = {
			offmap_china = { offmap_ruler = { NOT = { culture = ROOT } } }
		}
	}
	desc = {
		text = EVTDESC_JD_20005_B
		trigger = {
			offmap_china = { offmap_ruler = { culture = ROOT } }
		}
	}

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_20005

		custom_tooltip = { text = EVTOPTA_JD_20005_tt }

		detract_grace_minor_effect = yes

		event_target:chinese_guest = {
			show_portrait = yes
			clear_persistent_event_target = host_of_chinese_diplomat
		}
	}
}

# Greeting guest in Chinese
character_event = {
	id = JD.20006
	desc = EVTDESC_JD_20006
	picture = GFX_evt_daughter_asking_father
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	# Study hard
	option = {
		name = EVTOPTA_JD_20006

		trigger = { NOT = { has_character_modifier = multilingual } }

		random_list = {
			35 = { # Succeed
				mult_modifier = { learning >= 12 factor = 1.15 }
				mult_modifier = { learning >= 14 factor = 1.15 }
				mult_modifier = { learning >= 16 factor = 1.15 }
				mult_modifier = { learning >= 18 factor = 1.2 }
				mult_modifier = { learning >= 20 factor = 1.2 }
				mult_modifier = { is_smart_trigger = yes factor = 1.5 }
				mult_modifier = { is_learned_trigger = yes factor = 1.5 }
				mult_modifier = { has_character_modifier = student_of_language factor = 1.5 }

				custom_tooltip = { text = EVTOPTA_JD_20006_SUCCESS_TT }

				# Showing tooltip for language modifiers
				if = {
					limit = { has_character_modifier = student_of_language }
					custom_tooltip = { text = multilingual_tt }
				}
				else = {
					custom_tooltip = { text = student_of_language_tt }
				}

				tooltip = { add_grace_major_effect = yes }

				character_event = { id = JD.20007 days = 3 }
			}

			65 = { # Fail and fall asleep
				mult_modifier = { is_dumb_trigger = yes factor = 2 }
				mult_modifier = { learning < 6 factor = 1.5 }

				custom_tooltip = { text = EVTOPTA_JD_20006_FAILURE_TT }

				tooltip = { detract_grace_major_effect = yes }

				character_event = { id = JD.20008 days = 3 }
			}
		}
	}

	# Wing it
	option = {
		name = EVTOPTB_JD_20006

		trigger = { NOT = { has_character_modifier = multilingual } }

		random_list = {
			65 = { # You do okay
				mult_modifier = { learning >= 12 factor = 1.15 }
				mult_modifier = { learning >= 14 factor = 1.15 }
				mult_modifier = { learning >= 16 factor = 1.15 }
				mult_modifier = { learning >= 18 factor = 1.2 }
				mult_modifier = { learning >= 20 factor = 1.2 }
				mult_modifier = { is_smart_trigger = yes factor = 1.5 }
				mult_modifier = { is_learned_trigger = yes factor = 1.5 }
				mult_modifier = { has_character_modifier = student_of_language factor = 1.5 }

				custom_tooltip = { text = EVTOPTB_JD_20006_SUCCESS_TT }

				tooltip = { add_grace_medium_effect = yes }

				character_event = { id = JD.20009 days = 3 }
			}

			35 = { # You mess up the words
				mult_modifier = { is_dumb_trigger = yes factor = 2 }
				mult_modifier = { learning < 6 factor = 1.5 }

				custom_tooltip = { text = EVTOPTB_JD_20006_FAILURE_TT }

				tooltip = { detract_grace_minor_effect = yes }

				character_event = { id = JD.20010 days = 3 }
			}
		}
	}

	# You're multilingual already! - END
	option = {
		name = EVTOPTC_JD_20006
		tooltip_info_custom = multilingual_option_available_tt

		trigger = { has_character_modifier = multilingual }

		custom_tooltip = { text = EVTOPTC_JD_20006_TT }

		add_grace_medium_effect = yes
		sound_effect = china_grace_gain

		event_target:chinese_guest = {
			clear_persistent_event_target = host_of_chinese_diplomat
		}
	}

	# Let your translator do the hard work. - END
	option = {
		name = EVTOPTD_JD_20006

		custom_tooltip = { text = EVTOPTD_JD_20006_TT }

		add_grace_minor_effect = yes
		sound_effect = china_grace_gain

		event_target:chinese_guest = {
			clear_persistent_event_target = host_of_chinese_diplomat
		}
	}
}

# You learn about languages!
character_event = {
	id = JD.20007
	desc = EVTDESC_JD_20007
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:chinese_guest = {
			is_alive = yes
			prisoner = no
		}
	}

	option = {
		name = EVTOPTA_JD_20007

		custom_tooltip = { text = EVTOPTA_JD_20007_TT }

		if = {
			limit = { has_character_modifier = student_of_language }

			hidden_effect = { remove_character_modifier = student_of_language }

			add_character_modifier = {
				name = multilingual
				duration = -1
			}
		}
		else = {
			add_character_modifier = {
				name = student_of_language
				duration = -1
			}
		}

		add_grace_major_effect = yes
		sound_effect = china_grace_gain

		hidden_effect = {
			random = {
				chance = 30

				mult_modifier = {
					factor = 0.1
					any_artifact = { has_artifact_flag = chinese }
				}

				character_event = { id = JD.60004 days = 1 }
			}

			event_target:chinese_guest = {
				clear_persistent_event_target = host_of_chinese_diplomat
			}
		}
	}
}

# You fell asleep!
character_event = {
	id = JD.20008
	desc = EVTDESC_JD_20008
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_religion

	hide_from = yes
	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:chinese_guest = {
			is_alive = yes
			prisoner = no
		}
	}

	option = {
		name = EVTOPTA_JD_20008

		custom_tooltip = { text = EVTOPTA_JD_20008_TT }

		detract_grace_major_effect = yes

		event_target:chinese_guest = {
			clear_persistent_event_target = host_of_chinese_diplomat
		}
	}
}

# You greet them nicely
character_event = {
	id = JD.20009
	desc = EVTDESC_JD_20009
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:chinese_guest = {
			is_alive = yes
			prisoner = no
		}
	}

	option = {
		name = EVTOPTA_JD_20009

		custom_tooltip = { text = EVTOPTA_JD_20009_TT }

		add_grace_medium_effect = yes
		sound_effect = china_grace_gain

		hidden_effect = {
			random = {
				chance = 20

				mult_modifier = {
					factor = 0.1
					any_artifact = { has_artifact_flag = chinese }
				}

				character_event = { id = JD.60004 days = 1 }
			}

			event_target:chinese_guest = {
				clear_persistent_event_target = host_of_chinese_diplomat
			}
		}
	}
}

# You greet them awkwardly
character_event = {
	id = JD.20010
	desc = EVTDESC_JD_20010
	picture = GFX_evt_china_diplomatic_incident
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:chinese_guest = {
			is_alive = yes
			prisoner = no
		}
	}

	option = {
		name = EVTOPTA_JD_20010

		custom_tooltip = { text = EVTOPTA_JD_20010_TT }

		detract_grace_minor_effect = yes

		event_target:chinese_guest = {
			clear_persistent_event_target = host_of_chinese_diplomat
		}
	}
}

# Closet malfunction
character_event = {
	id = JD.20011
	desc = EVTDESC_JD_20011
	picture = GFX_evt_china_diplomatic_incident
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:chinese_guest = {
			is_alive = yes
			prisoner = no
		}
	}

	option = {
		name = EVTOPTA_JD_20011

		custom_tooltip = { text = EVTOPTA_JD_20011_tt }

		detract_grace_minor_effect = yes

		event_target:chinese_guest = {
			clear_persistent_event_target = host_of_chinese_diplomat
		}
	}
}

# Deep meaningful insight
character_event = {
	id = JD.20012
	picture = GFX_evt_garden
	border = GFX_event_normal_frame_diplomacy

	desc = {
		text = EVTDESC_JD_20012
		trigger = {
			offmap_china = { offmap_ruler = { NOT = { culture = ROOT } } }
		}
	}
	desc = {
		text = EVTDESC_JD_20012_B
		trigger = {
			offmap_china = { offmap_ruler = { culture = ROOT } }
		}
	}

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:chinese_guest = {
			is_alive = yes
			prisoner = no
		}
	}

	option = {
		name = EVTOPTA_JD_20012

		custom_tooltip = { text = EVTOPTA_JD_20012_tt }

		add_grace_medium_effect = yes
		sound_effect = china_grace_gain

		hidden_effect = {
			random = {
				chance = 30

				mult_modifier = {
					factor = 0.1
					any_artifact = { has_artifact_flag = chinese }
				}

				character_event = { id = JD.60004 days = 1 }
			}

			event_target:chinese_guest = {
				clear_persistent_event_target = host_of_chinese_diplomat
			}
		}
	}
}

# Cleanup
character_event = {
	id = JD.20020

	hide_window = yes
	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	immediate = {
		clr_character_flag = chinese_governor_councilor_guest

		event_target:chinese_guest = {
			clr_character_flag = cg_diplomatic_visit
			clr_character_flag = cg_oversee_troops
			clr_character_flag = cg_study_military
			clr_character_flag = cg_oversee_tax_collection
			clr_character_flag = cg_trade
			clr_character_flag = cg_preaching
			clr_character_flag = cg_study_theology

			if = {
				limit = {
					persistent_event_target:host_of_chinese_diplomat = { always = yes }
				}

				clear_persistent_event_target = host_of_chinese_diplomat
			}
		}

		FROMFROM = { # for the fallback if death/prison
			clr_character_flag = cg_diplomatic_visit
			clr_character_flag = cg_oversee_troops
			clr_character_flag = cg_study_military
			clr_character_flag = cg_oversee_tax_collection
			clr_character_flag = cg_trade
			clr_character_flag = cg_preaching
			clr_character_flag = cg_study_theology

			if = {
				limit = {
					persistent_event_target:host_of_chinese_diplomat = { always = yes }
				}

				clear_persistent_event_target = host_of_chinese_diplomat
			}
		}
	}
}


### Mini-Expedition to China ####

# Your courtier wants to travel to China!
character_event = {
	id = JD.10011
	desc = EVTDESC_JD_10011
	picture = GFX_evt_china_open
	border = GFX_event_normal_frame_diplomacy
	portrait = event_target:adventurous_spirit

	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	only_playable = yes
	min_age = 13
	only_capable = yes
	prisoner = no
	war = no

	trigger = {
		china_diplo_interaction_trigger = yes
		is_inaccessible_trigger = no
		mercenary = no

		NOR = {
			has_character_flag = chinese_governor_councilor_guest
			has_character_flag = is_sending_someone_to_china
		}

		offmap_china = {
			NOR = {
				governor = { character = ROOT }
				has_status = china_civil_war
				has_status = china_plague
			}
		}

		any_courtier = {
			count >= 2

			ai = yes
			is_ruler = no
			is_heir = no
			block_general_event_trigger = no

			NOR = {
				culture_group = chinese_group
				has_minor_title = title_commander
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = { # more likely if China is doing great
			factor = 1.5
			china_is_fine_trigger = yes
		}
		mult_modifier = { # less likely if China is NOT doing great
			factor = 0.5
			china_is_suffering_trigger = yes
		}
		mult_modifier = { # less likely if China is isolationist
			factor = 0.5
			offmap_china = { has_policy = china_isolationist }
		}
	}

	immediate = {
		offmap_china = {
			governor = {
				save_event_target_as = the_protector_general
			}
		}

		# Saves home court in case of death of ROOT...
		capital_scope = {
			save_event_target_as = original_court_province_target
		}

		any_courtier = {
			limit = {
				ai = yes
				is_ruler = no
				is_heir = no
				block_general_event_trigger = no

				NOR = {
					culture_group = chinese_group
					has_minor_title = title_commander
					has_character_flag = originated_from_chinese_court
				}
			}

			score_value = { # Prioritizes selecting an interesting courtier...
				value = 10
				interesting_courtier_selection_score = yes

				additive_modifier = {
					value = 1000
					is_liked_by_China_trigger = yes
				}
			}

			save_event_target_as = adventurous_spirit
		}

		# Find a suitable back-up for the journey... (preferably a spouse, then a lover, then a friend, and in worst case, some random person at court)
		any_courtier = {
			limit = {
				ai = yes
				is_ruler = no
				block_general_event_trigger = no

				NOR = {
					culture_group = chinese_group
					has_minor_title = title_commander
					has_character_flag = originated_from_chinese_court
					character = event_target:adventurous_spirit
				}
			}

			score_value = { # Prioritizes selecting an interesting courtier...
				value = 10
				interesting_courtier_selection_score = yes

				additive_modifier = {
					value = 4000
					is_married = ROOT
				}
				additive_modifier = {
					value = 2000
					is_lover = ROOT
				}
				additive_modifier = {
					value = 1000
					is_friend = ROOT
					NOT = { is_lover = ROOT }
				}
			}

			save_event_target_as = back_up_target_1
		}

		# Find a suitable second back-up for the journey... (preferably a child who's not an heir, otherwise a grown-up un-landed child, and in worst case, some random person at court)
		any_courtier = {
			limit = {
				ai = yes
				is_ruler = no
				block_general_event_trigger = no

				NOR = {
					culture_group = chinese_group
					has_minor_title = title_commander
					has_character_flag = originated_from_chinese_court
					character = event_target:adventurous_spirit
					character = event_target:back_up_target_1
				}
			}

			score_value = { # Prioritizes selecting an interesting courtier...
				value = 10
				interesting_courtier_selection_score = yes

				additive_modifier = {
					value = 2000
					is_child_of = ROOT
					NOT = { is_heir = ROOT }
				}
				additive_modifier = {
					value = 1000
					is_child_of = ROOT
				}
			}

			save_event_target_as = back_up_target_2
		}

		set_character_flag = is_sending_someone_to_china
	}

	option = {
		name = EVTOPTA_JD_10011

		custom_tooltip = { text = EVTOPTA_JD_10011_TT }

		event_target:adventurous_spirit = {
			show_scope_change = no

			check_likes_or_dislikes_THIS_effect = yes

			add_character_modifier = {
				name = out_traveling
				years = 1
			}
		}
	}

	option = {
		name = EVTOPTB_JD_10011

		trigger = { event_target:back_up_target_1 = { always = yes } }

		custom_tooltip = { text = EVTOPTB_JD_10011_TT }

		event_target:back_up_target_1 = {
			show_scope_change = no

			check_likes_or_dislikes_THIS_effect = yes

			add_character_modifier = {
				name = out_traveling
				years = 1
			}

			save_event_target_as = adventurous_spirit
		}
	}

	option = {
		name = EVTOPTC_JD_10011

		trigger = { event_target:back_up_target_2 = { always = yes } }

		custom_tooltip = { text = EVTOPTC_JD_10011_TT }

		event_target:back_up_target_2 = {
			show_scope_change = no

			check_likes_or_dislikes_THIS_effect = yes

			add_character_modifier = {
				name = out_traveling
				years = 1
			}

			save_event_target_as = adventurous_spirit
		}
	}

	option = {
		name = EVTOPTD_JD_10011

		custom_tooltip = { text = EVTOPTD_JD_10011_TT }

		clr_character_flag = is_sending_someone_to_china
	}

	after = {
		hidden_effect = {
			if = {
				limit = { has_character_flag = is_sending_someone_to_china }

				event_target:adventurous_spirit = {
					force_host = event_target:the_protector_general

					character_event = {
						id = JD.10012
						days = 200
						random = 160
					}
				}

				character_event = { id = JD.10020 days = 370 } # Fallback event (in case the traveler has died)
			}
		}
	}
}

# Delayed ping event and tombola for figuring out how the journey went... (fires for the traveler)
character_event = {
	id = JD.10012

	hide_window = yes
	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	immediate = {
		offmap_china = {
			governor = {
				save_event_target_as = the_protector_general # in case the old one has died, resave
			}
		}

		if = {
			limit = { is_ruler = no } # Hasn't become a ruler since going on a journey

			# If the old liege is still alive... (most often the case, we assume)!
			if = {
				limit = {
					FROM = { is_alive = yes }
				}

				FROM = { save_event_target_as = home_liege }
				force_host = FROM
			}
			# In case the liege who sent them away has died, send them back from where they came anyway...
			else = {
				event_target:original_court_province_target = {
					owner = {
						save_event_target_as = home_liege

						ROOT = { # moves ROOT to the new host
							force_host = PREV
							move_character = PREV
						}
					}
				}
			}
		}

		random_list = { # random outcomes for the traveler...
			5 = {
				trigger = {
					offmap_china = {
						NOR = {
							has_status = china_civil_war
							has_status = china_plague
						}
					}
				}

				mult_modifier = {
					factor = 1.1
					china_is_fine_trigger = yes
				}
				mult_modifier = {
					factor = 0.5
					china_is_suffering_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					has_pleasant_trait_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					has_pleasant_personality_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 10
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 13
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 15
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 17
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 20
				}
				mult_modifier = {
					factor = 1.1
					stewardship >= 10
				}
				mult_modifier = {
					factor = 1.1
					stewardship >= 15
				}
				mult_modifier = {
					factor = 1.1
					stewardship >= 20
				}
				mult_modifier = {
					factor = 1.2
					is_liked_by_China_trigger = yes
				}
				mult_modifier = {
					factor = 1.2
					is_disliked_by_China_trigger = no
				}

				event_target:home_liege = { character_event = { id = JD.10013 } } # great
			}
			10 = {
				trigger = {
					offmap_china = {
						NOR = {
							has_status = china_civil_war
							has_status = china_plague
						}
					}
				}

				mult_modifier = {
					factor = 1.5
					china_is_fine_trigger = yes
				}
				mult_modifier = {
					factor = 0.5
					china_is_suffering_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 10
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 15
				}
				mult_modifier = {
					factor = 1.1
					diplomacy >= 20
				}
				mult_modifier = {
					factor = 1.1
					stewardship >= 10
				}
				mult_modifier = {
					factor = 1.1
					is_liked_by_China_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					is_disliked_by_China_trigger = no
				}

				event_target:home_liege = { character_event = { id = JD.10014 } } # good
			}

			10 = {
				event_target:home_liege = { character_event = { id = JD.10015 } } # decent
			}

			10 = {
				mult_modifier = {
					factor = 1.5
					china_is_suffering_trigger = yes
				}
				mult_modifier = {
					factor = 0.5
					china_is_fine_trigger = yes
				}
				mult_modifier = {
					factor = 0.7
					has_top_tier_education_trait_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					is_liked_by_China_trigger = no
				}
				mult_modifier = {
					factor = 1.1
					is_disliked_by_China_trigger = yes
				}

				event_target:home_liege = { character_event = { id = JD.10016 } } # bad
			}

			5 = {
				mult_modifier = {
					factor = 1.5
					china_is_suffering_trigger = yes
				}
				mult_modifier = {
					factor = 0.5
					is_smart_trigger = yes
				}
				mult_modifier = {
					factor = 0.7
					has_top_tier_education_trait_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					is_dumb_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					diplomacy < 10
				}
				mult_modifier = {
					factor = 1.1
					diplomacy < 8
				}
				mult_modifier = {
					factor = 1.1
					diplomacy < 5
				}
				mult_modifier = {
					factor = 1.1
					diplomacy < 3
				}
				mult_modifier = {
					factor = 1.1
					has_unattractive_trait_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					is_unattractive_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					is_liked_by_China_trigger = no
				}
				mult_modifier = {
					factor = 1.5
					is_disliked_by_China_trigger = yes
				}

				event_target:home_liege = { character_event = { id = JD.10017 } } # terrible
			}

			10 = { # They return with a new lover
				trigger = {
					is_married = no
					has_lover = no

					NOR = {
						is_consort = event_target:home_liege
						trait = celibate
					}
				}

				mult_modifier = {
					factor = 1.1
					is_attractive_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					has_attractive_trait_trigger = yes
				}
				mult_modifier = {
					factor = 1.1
					is_liked_by_China_trigger = yes
				}
				mult_modifier = {
					factor = 0.9
					is_liked_by_China_trigger = no
				}
				mult_modifier = {
					factor = 0.5
					is_disliked_by_China_trigger = yes
				}

				event_target:home_liege = { character_event = { id = JD.10018 } } # Special case 1
			}

			10 = { # They return but want to go back
				trigger = {
					is_landed = no
					NOT = { is_married = event_target:home_liege }
				}

				mult_modifier = {
					factor = 1.1
					is_ill = no
				}
				mult_modifier = {
					factor = 1.2
					is_liked_by_China_trigger = yes
				}
				mult_modifier = {
					factor = 0.9
					is_liked_by_China_trigger = no
				}
				mult_modifier = {
					factor = 0.1
					is_disliked_by_China_trigger = yes
				}

				event_target:home_liege = { character_event = { id = JD.10019 } } # Special case 2
			}
		}
	}
}

character_event = { # Things went great
	id = JD.10013
	desc = EVTDESC_JD_10013
	picture = GFX_evt_whispers
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	immediate = {
		# Chance of returning with artifact
		if = {
			limit = {
				NOT = { any_artifact = { has_artifact_flag = chinese } }
			}

			set_character_flag = chinese_traveler_artifact

			offmap_china = {
				governor = {
					random_list = {
						 5 = { add_artifact = jade_dragon }
						15 = { add_artifact = chinese_dragon_amulet }
						20 = { add_artifact = chinese_ceremonial_robes }
						20 = { add_artifact = silk_shroud }
						15 = { add_artifact = water_clock }
						15 = { add_artifact = jian_sword }
						10 = { add_artifact = classic_of_poetry }

						40 = {
							add_artifact = chinese_artwork
							new_artifact = { set_name = chinese_artwork_name }
						}

						40 = {
							add_artifact = chinese_calligraphy
							new_artifact = { set_name = chinese_calligraphy_name }
						}

						40 = {
							add_artifact = chinese_sculpture
							new_artifact = { set_name = chinese_sculpture_name }
						}

						20 = {
							trigger = {
								ROOT = { has_education_martial_trigger = yes }
							}

							mult_modifier = {
								factor = 2
								ROOT = { martial >= 14 }
							}
							mult_modifier = {
								factor = 2
								ROOT = { martial >= 18 }
							}
							mult_modifier = {
								factor = 2
								ROOT = { martial >= 22 }
							}
							mult_modifier = {
								factor = 2
								ROOT = { martial >= 24 }
							}

							add_artifact = art_of_war
						}
					}

					new_artifact = {
						transfer_artifact = {
							from = PREV
							to = ROOT
						}

						save_event_target_as = chinese_artifact
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTA_JD_10013

		custom_tooltip = { text = EVTOPTA_JD_10013_TT }

		FROM = {
			show_scope_change = no

			add_trait_partially_silently_proud_effect = yes

			random = {
				chance = 50
				add_trait_brave_effect = yes
			}

			hidden_effect = { remove_character_modifier = out_traveling }
		}

		wealth = 25

		if = {
			limit = { has_character_flag = chinese_traveler_artifact }

			clr_character_flag = chinese_traveler_artifact

			tooltip = {
				event_target:chinese_artifact = {
					show_scope_change = no

					transfer_artifact = {
						to = ROOT
						from = FROM
					}
				}
			}
		}

		add_grace_medium_effect = yes
		sound_effect = china_grace_gain
		clr_character_flag = is_sending_someone_to_china
	}
}

character_event = { # Things went well
	id = JD.10014
	desc = EVTDESC_JD_10014
	picture = GFX_evt_feast
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_10014

		FROM = {
			show_scope_change = no

			random = {
				chance = 50
				add_trait_patient_effect = yes
			}

			hidden_effect = { remove_character_modifier = out_traveling }
		}

		add_grace_minor_effect = yes
		sound_effect = china_grace_gain
		clr_character_flag = is_sending_someone_to_china
	}
}

character_event = { # Things went decently
	id = JD.10015
	desc = EVTDESC_JD_10015
	picture = GFX_evt_recieve_letter
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_10015

		add_grace_trivial_effect = yes
		sound_effect = china_grace_gain

		hidden_effect = {
			FROM = { remove_character_modifier = out_traveling }
		}

		clr_character_flag = is_sending_someone_to_china
	}
}

character_event = { # Things went poorly
	id = JD.10016
	desc = EVTDESC_JD_10016
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_10016

		detract_grace_trivial_effect = yes

		FROM = {
			show_scope_change = no

			random = {
				chance = 50
				add_trait_stressed_effect = yes
			}

			hidden_effect = { remove_character_modifier = out_traveling }
		}

		clr_character_flag = is_sending_someone_to_china
	}
}

character_event = { # Things went terribly
	id = JD.10017
	desc = EVTDESC_JD_10017
	picture = GFX_evt_quarrel
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_10017
		custom_tooltip = { text = EVTOPTA_JD_10017_TT }

		detract_grace_minor_effect = yes

		FROM = {
			show_scope_change = no

			add_trait_partially_silently_shy_effect = yes

			random = {
				chance = 25
				add_trait_depressed_effect = yes
			}

			hidden_effect = { remove_character_modifier = out_traveling }
		}

		clr_character_flag = is_sending_someone_to_china
	}
}

character_event = { # Special case 1 - The courtier you sent away to China has returned with a lover/spouse
	id = JD.10018
	desc = EVTDESC_JD_10018
	picture = GFX_evt_scandal
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes
	hide_new = yes

	has_dlc = "Jade Dragon"

	immediate = {
		if = {
			limit = {
				FROM = { prefers_men_trigger = yes }
			}

			create_character = {
				age = 25
				dynasty = actually_culture
				religion = event_target:the_protector_general
				culture = event_target:the_protector_general
				female = no
				health = 6
				random_traits = yes
				historical = yes
			}
		}
		else = {
			create_character = {
				age = 25
				dynasty = actually_culture
				religion = event_target:the_protector_general
				culture = event_target:the_protector_general
				female = yes
				health = 6
				random_traits = yes
				historical = yes
			}
		}

		new_character = {
			save_event_target_as = new_found_lover
			add_lover = FROM

			if = {
				limit = { same_sex = FROM }
				add_trait = homosexual
			}
		}

		FROM = { add_ambition = obj_get_married }
	}

	option = { # They bring someone home
		name = EVTOPTA_JD_10018

		custom_tooltip = { text = EVTOPTA_JD_10018_TT }

		# moves the lover to your court (and leaves a flag for later marriage hook-in)...
		event_target:new_found_lover = {
			show_scope_change = no

			move_character = ROOT
			# set_character_flag = gets_to_stay # CleanSlate: Flag appears to be unused
		}
	}

	option = { # We don't have room for strangers
		name = EVTOPTB_JD_10018

		reverse_opinion = {
			name = opinion_sent_my_lover_away
			who = FROM
			years = 20
		}

		FROM = {
			show_scope_change = no

			if = { # if they are already stressed, this depressed them
				limit = { trait = stressed }
				add_trait_depressed_effect = yes
			}
		}

		event_target:new_found_lover = {
			# set_character_flag = has_to_leave # CleanSlate: Flag appears to be unused
			hidden_effect = { leave_court_for_china_effect = yes }
		}
	}

	after = {
		add_grace_medium_effect = yes
		sound_effect = china_grace_gain
		clr_character_flag = is_sending_someone_to_china

		hidden_effect = {
			FROM = { remove_character_modifier = out_traveling }
		}
	}
}

character_event = { # Special case 2 - The courtier you sent away to China has returned but wants to go back
	id = JD.10019
	desc = EVTDESC_JD_10019
	picture = GFX_evt_son_asking_father
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = { # They go back to China, forever
		name = {
			text = EVTOPTA_JD_10019
			trigger = {
				is_dumb_trigger = no

				NOR = {
					trait = lunatic
					trait = poet
					trait = kind
				}
			}
		}
		name = {
			text = EVTOPTA_JD_10019_lunatic
			trigger = { trait = lunatic }
		}
		name = {
			text = EVTOPTA_JD_10019_imbecile
			trigger = { is_dumb_trigger = yes }
		}
		name = {
			text = EVTOPTA_JD_10019_poet
			trigger = {
				OR = {
					trait = poet
					trait = kind
				}
			}
		}

		FROM = {
			if = { # Do they have family?
				limit = {
					OR = {
						is_married = yes

						any_child = {
							is_adult = no
							NOT = { is_child_of = ROOT }
						}
					}
				}

				custom_tooltip = { text = EVTOPTA_JD_10019_TT_family } # Explains that they will take their family with them
			}
			else = { # Are they single and without children?
				custom_tooltip = { text = EVTOPTA_JD_10019_TT_solo } # Explains that they'll just go on their own
			}

			hidden_effect = {
				remove_character_modifier = out_traveling

				leave_court_for_china_effect = yes

				# They take their spouse with them
				any_spouse = {
					leave_court_for_china_effect = yes
				}

				# They take any children with them
				any_child = {
					limit = {
						is_adult = no
						NOT = { is_child_of = ROOT }
					}

					leave_court_for_china_effect = yes
				}
			}
		}

		add_grace_major_effect = yes

		# if = {
		#	limit = { FROM = { is_child_of = ROOT } }
		#	set_character_flag = let_child_go_to_china # Potential hook-in for future events?
		# }
	}

	option = { # They are angry
		name = EVTOPTB_JD_10019

		add_grace_medium_effect = yes

		reverse_opinion = {
			name = opinion_angry
			who = FROM
			years = 15
		}
	}

	option = { # They will get over it
		name = EVTOPTC_JD_10019
		tooltip_info = diplomacy

		trigger = { diplomacy >= 15 }

		add_grace_medium_effect = yes

		reverse_opinion = {
			name = opinion_disgruntled
			who = FROM
			years = 15
		}
	}

	option = { # Plead to them from the bottom of your heart
		name = EVTOPTD_JD_10019
		tooltip_info_custom = EVTOPTD_JD_10019_TT

		trigger = {
			reverse_opinion = {
				who = FROM
				value >= 60
			}
		}

		add_grace_medium_effect = yes

		reverse_opinion = {
			name = opinion_feels_appreciated
			who = FROM
			years = 10
		}
	}

	after = {
		sound_effect = china_grace_gain
		clr_character_flag = is_sending_someone_to_china

		hidden_effect = {
			FROM = { remove_character_modifier = out_traveling }
		}
	}
}

character_event = { # Fallback (in case the traveler died)
	id = JD.10020
	desc = EVTDESC_JD_10020
	picture = GFX_evt_recieve_letter
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		has_character_flag = is_sending_someone_to_china

		event_target:adventurous_spirit = {
			is_alive = no
			death_in_china_trigger = no
			death_no_trace_trigger = no
		}
	}

	option = {
		name = EVTOPTA_JD_10020

		custom_tooltip = { text = EVTOPTA_JD_10020_TT }

		clr_character_flag = is_sending_someone_to_china
	}
}



### Dishonest traders event

# A letter arrives from the governor stating that the Emperor is upset about dishonest traders
letter_event = {
	id = JD.30002
	desc = EVTDESC_JD_30002
	border = GFX_event_letter_frame_diplomacy
	portrait = event_target:the_protector_general

	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	only_playable = yes

	trigger = {
		china_diplo_interaction_trigger = yes

		any_demesne_province = {
			has_trade_post = yes
			trade_route = silk_road
			owned_by = PREV
		}

		any_vassal = {
			num_of_count_titles_in_realm >= 1

			any_realm_province = {
				has_city = yes
				NOT = { has_province_modifier = reprimanded_merchants }
				held_under_PREV = yes
			}
		}

		NOT = {
			offmap_china = {
				governor = {
					character = ROOT
				}
			}
		}
	}

	immediate = {
		offmap_china = {
			governor = { save_event_target_as = the_protector_general }
		}

		job_marshal = {
			save_event_target_as = target_marshal
		}

		random_vassal = {
			limit = {
				num_of_count_titles_in_realm >= 1

				any_realm_province = {
					has_city = yes
					NOT = { has_province_modifier = reprimanded_merchants }
					held_under_PREV = yes
				}
			}

			save_event_target_as = target_vassal_1
		}

		random_vassal = {
			limit = {
				num_of_count_titles_in_realm >= 1

				any_realm_province = {
					has_city = yes
					NOT = { has_province_modifier = reprimanded_merchants }
					held_under_PREV = yes
				}

				NOT = { character = event_target:target_vassal_1 }
			}

			save_event_target_as = target_vassal_2
		}

		random_vassal = {
			limit = {
				num_of_count_titles_in_realm >= 1

				any_realm_province = {
					has_city = yes
					NOT = { has_province_modifier = reprimanded_merchants }
					held_under_PREV = yes
				}

				NOR = {
					character = event_target:target_vassal_1
					character = event_target:target_vassal_2
				}
			}

			save_event_target_as = target_vassal_3
		}
	}

	# Punish all traders in realm
	option = {
		name = EVTOPTA_JD_30002

		trigger = {
			event_target:target_vassal_1 = { always = yes }
			event_target:target_vassal_2 = { always = yes }
			# event_target:target_vassal_3 = { always = yes } # intentionally left out
		}

		add_offmap_currency = {
			offmap = offmap_china
			value = 150
		}

		capital_scope = {
			show_scope_change = no

			add_province_modifier = {
				name = reprimanded_merchants
				years = 10
			}
		}

		event_target:target_vassal_1 = {
			show_scope_change = no

			character_event = {
				id = JD.30003
				days = 14
				random = 30
			}

			random_realm_province = {
				show_scope_change = no

				limit = {
					has_city = yes
					NOT = { has_province_modifier = reprimanded_merchants }
					held_under_PREV = yes
				}

				add_province_modifier = {
					name = reprimanded_merchants
					years = 10
				}
			}
		}

		event_target:target_vassal_2 = {
			show_scope_change = no

			character_event = {
				id = JD.30003
				days = 14
				random = 30
			}

			random_realm_province = {
				show_scope_change = no

				limit = {
					has_city = yes
					NOT = { has_province_modifier = reprimanded_merchants }
					held_under_PREV = yes
				}

				add_province_modifier = {
					name = reprimanded_merchants
					years = 10
				}
			}
		}

		event_target:target_vassal_3 = {
			show_scope_change = no

			character_event = {
				id = JD.30003
				days = 14
				random = 30
			}

			random_realm_province = {
				show_scope_change = no

				limit = {
					has_city = yes
					NOT = { has_province_modifier = reprimanded_merchants }
					held_under_PREV = yes
				}

				add_province_modifier = {
					name = reprimanded_merchants
					years = 10
				}
			}
		}
	}

	# Task your marshal to find the worst troublemakers
	option = {
		name = EVTOPTB_JD_30002

		add_offmap_currency = {
			offmap = offmap_china
			value = 50
		}

		capital_scope = {
			show_scope_change = no

			add_province_modifier = {
				name = reprimanded_merchants
				years = 10
			}
		}

		event_target:target_marshal = {
			show_scope_change = no

			if = {
				limit = { intrigue < 5 }

				add_character_modifier = {
					name = dealing_with_dishonest_traders
					years = 4
				}
			}
			else_if = {
				limit = { intrigue < 10 }

				add_character_modifier = {
					name = dealing_with_dishonest_traders
					years = 1
				}
			}
		}
	}

	# Don't do anything
	option = {
		name = EVTOPTC_JD_30002

		add_offmap_currency = {
			offmap = offmap_china
			value = -150
		}
	}
}

# Your liege has limited your merchants privileges
character_event = {
	id = JD.30003
	desc = EVTDESC_JD_30003
	picture = GFX_evt_monk
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	# Publicly condemn the action
	option = {
		name = EVTOPTA_JD_30003

		ai_chance = {
			factor = 10

			mult_modifier = {
				factor = 3
				trait = ambitious
			}
			mult_modifier = {
				factor = 3
				trait = just
			}
			mult_modifier = {
				factor = 3
				is_rival = FROM
			}
		}

		add_character_modifier = {
			name = defending_vassal_rights
			years = 10
		}

		reverse_opinion = {
			name = opinion_annoyed
			who = ROOT
			years = 5
			multiplier = 2
		}

		FROM = {
			character_event = { id = JD.30004 days = 14 }
		}
	}

	# Don't bother
	option = {
		name = EVTOPTB_JD_30003

		ai_chance = {
			factor = 40

			mult_modifier = {
				factor = 2
				trait = craven
			}
		}

		prestige = -25
	}

	after = {
		tooltip = {
			any_demesne_province = {
				limit = { has_province_modifier = reprimanded_merchants }

				add_province_modifier = {
					name = reprimanded_merchants
					years = 10
				}
			}
		}
	}
}

# Your vassals are upset about legislating rules on their subjects
character_event = {
	id = JD.30004
	desc = EVTDESC_JD_30004
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	# Too bad
	option = {
		name = EVTOPTA_JD_30004

		prestige = -20

		tooltip = {
			reverse_opinion = {
				name = opinion_annoyed
				who = FROM
				years = 5
				multiplier = 2
			}
		}
	}
}


### Courtier from Chinese court compliments/berates you after a stay in your court.

character_event = {
	id = JD.30010

	hide_window = yes
	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	only_playable = yes
	min_age = 16

	trigger = {
		offmap_china = {
			NOR = {
				governor = { character = ROOT }
				has_policy = china_isolationist
			}
		}

		any_courtier = {
			block_general_event_trigger = no
			has_character_flag = originated_from_chinese_court
			has_character_flag = chinese_courtier_original_court_@ROOT

			NOR = {
				has_character_flag = is_escaped_chinese_noble
				has_character_flag = is_chinese_refugee
				has_character_flag = had_opinions_about_host_court
				has_character_flag = ignore_refund
			}
		}
	}

	weight_multiplier = {
		factor = 1
	}

	immediate = {
		random_courtier = {
			limit = {
				block_general_event_trigger = no
				has_character_flag = originated_from_chinese_court

				NOR = {
					has_character_flag = is_escaped_chinese_noble
					has_character_flag = is_chinese_refugee
					has_character_flag = had_opinions_about_host_court
					has_character_flag = ignore_refund
				}
			}

			set_character_flag = had_opinions_about_host_court
			save_event_target_as = chinese_courtier

			random_list = {
				10 = { # Compliment
					trigger = {
						opinion = {
							who = ROOT
							value >= -30
						}
					}

					mult_modifier = {
						factor = 2

						liege = {
							calc_true_if = {
								amount >= 2

								trait = honest
								trait = gregarious
								trait = trusting
								trait = affectionate
								trait = playful
								trait = socializer
								trait = charitable
								trait = patient
								trait = kind
							}
						}
					}

					mult_modifier = {
						factor = 5

						OR = {
							AND = {
								is_benevolent_trigger = yes
								liege = { is_benevolent_trigger = yes }
							}
							AND = {
								is_evil_trigger = yes
								liege = { is_evil_trigger = yes }
							}
							AND = {
								is_pious_trigger = yes
								liege = { is_pious_trigger = yes }
							}
							AND = {
								is_impious_trigger = yes
								liege = { is_impious_trigger = yes }
							}
							AND = {
								has_pleasant_personality_trigger = yes
								liege = { has_pleasant_personality_trigger = yes }
							}
							AND = {
								has_unpleasant_personality_trigger = yes
								liege = { has_unpleasant_personality_trigger = yes }
							}
							AND = {
								is_attractive_trigger = yes
								liege = { is_attractive_trigger = yes }
							}
							AND = {
								is_unattractive_trigger = yes
								liege = { is_unattractive_trigger = yes }
							}
							AND = {
								is_smart_trigger = yes
								liege = { is_smart_trigger = yes }
							}
							AND = {
								is_dumb_trigger = yes
								liege = { is_dumb_trigger = yes }
							}
							AND = {
								is_strong_trigger = yes
								liege = { is_strong_trigger = yes }
							}
							AND = {
								is_weak_trigger = yes
								liege = { is_weak_trigger = yes }
							}
							AND = {
								has_symptom_trigger = yes
								liege = { has_symptom_trigger = yes }
							}
							AND = {
								is_ill = yes
								liege = { is_ill = yes }
							}
							AND = {
								has_injury_trigger = yes
								liege = { has_injury_trigger = yes }
							}
							AND = {
								has_medium_disability_trigger = yes
								liege = { has_medium_disability_trigger = yes }
							}
							AND = {
								OR = {
									trait = stressed
									trait = depressed
								}
								liege = {
									OR = {
										trait = stressed
										trait = depressed
									}
								}
							}
							AND = {
								has_top_tier_education_trait_trigger = yes
								liege = { has_top_tier_education_trait_trigger = yes }
							}
							AND = {
								trait = gardener
								liege = { trait = gardener }
							}
							AND = {
								trait = hunter
								liege = { trait = hunter }
							}
							AND = {
								trait = poet
								liege = { trait = poet }
							}
							AND = {
								trait = falconer
								liege = { trait = falconer }
							}
							AND = {
								trait = mystic
								liege = { trait = mystic }
							}
							AND = {
								is_learned_trigger = yes
								liege = { is_learned_trigger = yes }
							}
						}
					}

					liege = {
						character_event = { id = JD.30011 }
					}
				}

				5 = { # Berate
					liege = {
						character_event = { id = JD.30012 }
					}
				}

				1 = { } # Don't comment on stay
			}
		}

	}
}

character_event = {
	id = JD.30011
	desc = EVTDESC_JD_30011
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	option = {
		name = EVTOPTA_JD_30011

		sound_effect = china_grace_gain

		add_offmap_currency = {
			offmap = offmap_china
			value = 150
		}
	}

	option = {
		name = EVTOPTB_JD_30011

		prestige = 50

		random = {
			chance = 35
			add_trait_proud_effect = yes
		}

		add_offmap_currency = {
			offmap = offmap_china
			value = 100
		}
	}
}

character_event = {
	id = JD.30012
	desc = EVTDESC_JD_30012
	picture = GFX_evt_china_diplomatic_incident
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	immediate = {
		offmap_china = {
			governor = {
				save_event_target_as = the_protector_general
			}
		}
	}

	option = {
		name = EVTOPTA_JD_30012

		add_offmap_currency = {
			offmap = offmap_china
			value = -100
		}
	}

	option = {
		name = EVTOPTB_JD_30012

		event_target:chinese_courtier = {
			show_scope_change = no

			hidden_effect = {
				imprison = ROOT
				remove_character_modifier = the_dungeon
			}

			add_character_modifier = {
				name = house_arrest
				duration = -1
			}
		}

		random_list = {
			60 = { add_trait_fully_arbitrary_effect = yes }
			40 = { add_trait_fully_cruel_effect = yes }
		}
	}
}


### Chinese Trade Competition ###
#
# # CleanSlate: Not entirely sure why this event chain was disabled. My best guesses are either that it just wasn't interesting, or because there wasn't any way to get the ai to actually try to win it.
#
# # Hidden Governor set-up event
# character_event = {
#	id = JD.40000
#
#	hide_window = yes
#	is_triggered_only = yes # on_offmap_yearly_pulse
#
#	has_dlc = "Jade Dragon"
#
#	trigger = {
#		# always = no # disabled here instead of in on_actions
#		is_offmap_tag = offmap_china
#		NOT = { has_character_modifier = trade_competition_in_progress } # No new trade competition should fire while one is in progress
#
#		offmap_china = {
#			NOR = {
#				has_policy = china_isolationist
#				has_status = china_famine
#				has_status = china_plague
#			}
#		}
#	}
#
#	immediate = {
#		random_list = {
#			95 = { }
#			5 = {
#				add_character_modifier = { # Setting timer
#					name = trade_competition_in_progress # Should last 5 years
#					days = 1830 # CleanSlate: But is actually 5 years, 5 days
#					hidden = yes
#				}
#				random_list = {
#					25 = {
#						trigger = { # No trade competition of the same type should fire within 20 years of one another
#							NOT = { has_character_modifier = trade_competition_count }
#						}
#						set_character_flag = trade_competition_count
#
#						add_character_modifier = { # Setting timer
#							name = trade_competition_count
#							years = 15
#							hidden = yes
#						}
#
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = COUNT
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_1
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = COUNT
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_2
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = COUNT
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_3
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = COUNT
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_4
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = COUNT
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_5
#						}
#					}
#					25 = {
#						trigger = { # No trade competition of the same type should fire within 20 years of one another
#							NOT = { has_character_modifier = trade_competition_duke }
#						}
#						add_character_modifier = { # Setting timer
#							name = trade_competition_duke
#							years = 15
#							hidden = yes
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = DUKE
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_1
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = DUKE
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_2
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = DUKE
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_3
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = DUKE
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_4
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = DUKE
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_5
#						}
#					}
#					25 = {
#						trigger = { # No trade competition of the same type should fire within 20 years of one another
#							NOT = { has_character_modifier = trade_competition_king }
#						}
#						add_character_modifier = { # Setting timer
#							name = trade_competition_king
#							years = 15
#							hidden = yes
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = KING
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_1
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = KING
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_2
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = KING
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_3
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = KING
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_4
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = KING
#								is_nomadic = no
#								NOR = {
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_5
#						}
#					}
#					25 = {
#						trigger = { # No trade competition of the same type should fire within 15 years of one another
#							NOT = { has_character_modifier = trade_competition_emperor }
#
#							# No point in having this competition if there is only one emperor in range
#							any_independent_ruler = {
#								count >= 2
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = EMPEROR
#								is_nomadic = no
#								NOR = {
#									is_offmap_governor = yes # makes sure it doesn't fire for the governor themselves
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#								}
#							}
#						}
#						add_character_modifier = { # Setting timer
#							name = trade_competition_emperor
#							years = 15
#							hidden = yes
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = EMPEROR
#								is_nomadic = no
#								NOR = {
#									is_offmap_governor = yes # makes sure it doesn't fire for the governor themselves
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_1
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = EMPEROR
#								is_nomadic = no
#								NOR = {
#									is_offmap_governor = yes # makes sure it doesn't fire for the governor themselves
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_2
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = EMPEROR
#								is_nomadic = no
#								NOR = {
#									is_offmap_governor = yes # makes sure it doesn't fire for the governor themselves
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_3
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = EMPEROR
#								is_nomadic = no
#								NOR = {
#									is_offmap_governor = yes # makes sure it doesn't fire for the governor themselves
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_4
#						}
#						random_playable_ruler = {
#							limit = {
#								china_diplo_interaction_trigger = yes
#								any_demesne_province = {
#									trade_route = silk_road
#									owned_by = PREV
#								}
#								real_tier = EMPEROR
#								is_nomadic = no
#								NOR = {
#									is_offmap_governor = yes # makes sure it doesn't fire for the governor themselves
#									has_character_modifier = china_raid_active
#									has_character_modifier = china_raid_grace_cd
#									has_character_flag = trade_competition_participant
#								}
#							}
#							set_character_flag = trade_competition_participant
#							save_event_target_as = trade_competitor_5
#						}
#					}
#				}
#				random_list = {
#					50 = { # Build a city on the Silk Road
#						trigger = {
#							NOT = { has_character_flag = trade_competition_count } # Should not fire for counts who would likely have trouble getting enough gold to build a city anyway
#
#							any_trade_route_province = {
#								trade_route = silk_road
#								has_empty_holding = yes
#							}
#						}
#
#						event_target:trade_competitor_1 = {
#							set_character_flag = trade_competition_build_city
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_2 = {
#							set_character_flag = trade_competition_build_city
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_3 = {
#							set_character_flag = trade_competition_build_city
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_4 = {
#							set_character_flag = trade_competition_build_city
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_5 = {
#							set_character_flag = trade_competition_build_city
#							letter_event = { id = JD.40001 }
#						}
#						offmap_china = {
#							governor = {
#								character_event = { id = JD.40006 years = 5 } # Failure event in case nobody built a city
#							}
#						}
#					}
#					50 = { # Accumulate Prestige
#						clr_character_flag = trade_competition_count
#
#						event_target:trade_competitor_1 = {
#							set_character_flag = trade_competition_accumulate_prestige
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_2 = {
#							set_character_flag = trade_competition_accumulate_prestige
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_3 = {
#							set_character_flag = trade_competition_accumulate_prestige
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_4 = {
#							set_character_flag = trade_competition_accumulate_prestige
#							letter_event = { id = JD.40001 }
#						}
#						event_target:trade_competitor_5 = {
#							set_character_flag = trade_competition_accumulate_prestige
#							letter_event = { id = JD.40001 }
#						}
#
#						offmap_china = {
#							governor = {
#								character_event = { id = JD.40008 days = 913 }
#							}
#						}
#					}
#				}
#			}
#		}
#	}
# }
#
# # A letter arrives from the governor stating that the Emperor is looking for 'the best trade partner'
# letter_event = {
#	id = JD.40001
#	border = GFX_event_letter_frame_diplomacy
#
#	desc = {
#		text = EVTDESC_JD_40001_A
#		trigger = { has_character_flag = trade_competition_build_city }
#	}
#	desc = {
#		text = EVTDESC_JD_40001_C
#		trigger = { has_character_flag = trade_competition_accumulate_prestige }
#	}
#
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	# Accept the challenge - City
#	option = {
#		name = EVTOPTA_JD_40001
#
#		if = {
#			limit = { has_character_flag = trade_competition_build_city }
#			custom_tooltip = { text = trade_competition_build_city_TT }
#		}
#		else = {
#			custom_tooltip = { text = trade_competition_prestige_TT }
#		}
#
#		show_portrait = event_target:trade_competitor_1
#		show_portrait = event_target:trade_competitor_2
#		show_portrait = event_target:trade_competitor_3
#		show_portrait = event_target:trade_competitor_4
#		show_portrait = event_target:trade_competitor_5
#	}
# }
#
# # On-action start event for city construction
# character_event = {
#	id = JD.40002
#
#	hide_window = yes
#	is_triggered_only = yes # on_settlement_construction_start
#
#	has_dlc = "Jade Dragon"
#	has_character_flag = trade_competition_build_city
#
#	immediate = {
#		set_character_flag = started_building_holding
#	}
# }
#
# # On-action completion event for city construction
# character_event = {
#	id = JD.40003
#
#	hide_window = yes
#	is_triggered_only = yes # on_settlement_construction_completed
#
#	has_dlc = "Jade Dragon"
#	has_character_flag = trade_competition_build_city
#
#	trigger = {
#		has_character_flag = started_building_holding
#		FROM = { holding_type = city }
#	}
#
#	immediate = {
#		FROM = {
#			save_event_target_as = trade_competition_new_city
#		}
#		set_character_flag = trade_competition_city_winner
#		save_event_target_as = trade_competition_city_winner
#		clr_character_flag = started_building_holding
#
#		offmap_china = {
#			governor = {
#				character_event = { id = JD.40004 } # Result ping event
#			}
#		}
#	}
# }
#
# # Governor Ping event for City Construction
# character_event = {
#	id = JD.40004
#
#	hide_window = yes
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	immediate = {
#		event_target:trade_competitor_1 = {
#			letter_event = { id = JD.40005 } # Result event
#		}
#		event_target:trade_competitor_2 = {
#			letter_event = { id = JD.40005 } # Result event
#		}
#		event_target:trade_competitor_3 = {
#			letter_event = { id = JD.40005 } # Result event
#		}
#		event_target:trade_competitor_4 = {
#			letter_event = { id = JD.40005 } # Result event
#		}
#		event_target:trade_competitor_5 = {
#			letter_event = { id = JD.40005 } # Result event
#		}
#	}
# }
#
# # A letter arrives from the governor naming the winner
# letter_event = {
#	id = JD.40005
#	border = GFX_event_letter_frame_diplomacy
#
#	desc = {
#		text = EVTDESC_JD_40005_A # winner
#		trigger = { has_character_flag = trade_competition_city_winner }
#	}
#	desc = {
#		text = EVTDESC_JD_40005_B # loser
#		trigger = { NOT = { has_character_flag = trade_competition_city_winner } }
#	}
#
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	# Hurray I won!
#	option = {
#		name = EVTOPTA_JD_40005
#		trigger = { has_character_flag = trade_competition_city_winner }
#
#		sound_effect = china_grace_gain
#
#		clr_character_flag = trade_competition_build_city
#		clr_character_flag = trade_competition_participant
#		clr_character_flag = trade_competition_city_winner
#
#		add_offmap_currency = {
#			offmap = offmap_china
#			value = 1000
#		}
#
#		if = {
#			limit = {
#				NOT = { has_character_modifier = chinese_imperial_trade_contract }
#			}
#			add_character_modifier = {
#				name = chinese_imperial_trade_contract
#				years = 15
#			}
#		}
#	}
#
#	# Boo I lost :(
#	option = {
#		name = EVTOPTB_JD_40005
#		trigger = {
#			NOT = { has_character_flag = trade_competition_city_winner }
#		}
#
#		show_portrait = event_target:trade_competition_city_winner
#
#		add_offmap_currency = {
#			offmap = offmap_china
#			value = -100
#		}
#
#		clr_character_flag = trade_competition_build_city
#		clr_character_flag = trade_competition_participant
#	}
# }
#
# # Governor Ping failure event for City Construction
# character_event = {
#	id = JD.40006
#	has_dlc = "Jade Dragon"
#
#	hide_window = yes
#	is_triggered_only = yes
#
#	trigger = {
#		OR = {
#			event_target:trade_competitor_1 = {
#				has_character_flag = trade_competition_build_city
#			}
#			event_target:trade_competitor_2 = {
#				has_character_flag = trade_competition_build_city
#			}
#			event_target:trade_competitor_3 = {
#				has_character_flag = trade_competition_build_city
#			}
#			event_target:trade_competitor_4 = {
#				has_character_flag = trade_competition_build_city
#			}
#			event_target:trade_competitor_5 = {
#				has_character_flag = trade_competition_build_city
#			}
#		}
#	}
#
#	immediate = {
#		event_target:trade_competitor_1 = {
#			letter_event = { id = JD.40007 }
#		}
#		event_target:trade_competitor_2 = {
#			letter_event = { id = JD.40007 }
#		}
#		event_target:trade_competitor_3 = {
#			letter_event = { id = JD.40007 }
#		}
#		event_target:trade_competitor_4 = {
#			letter_event = { id = JD.40007 }
#		}
#		event_target:trade_competitor_5 = {
#			letter_event = { id = JD.40007 }
#		}
#	}
# }
#
# # Nobody built a city failure event
# letter_event = {
#	id = JD.40007
#
#	desc = EVTDESC_JD_40007
#	border = GFX_event_letter_frame_diplomacy
#
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	# Damnit
#	option = {
#		name = EVTOPTA_JD_40007
#
#		add_offmap_currency = {
#			offmap = offmap_china
#			value = -250
#		}
#
#		show_portrait = event_target:trade_competitor_1
#		show_portrait = event_target:trade_competitor_2
#		show_portrait = event_target:trade_competitor_3
#		show_portrait = event_target:trade_competitor_4
#		show_portrait = event_target:trade_competitor_5
#
#		clr_character_flag = trade_competition_participant
#		clr_character_flag = started_building_holding
#		clr_character_flag = trade_competition_build_city
#	}
# }
#
# # Governor Ping event for half-time status update
# character_event = {
#	id = JD.40008
#
#	hide_window = yes
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	immediate = {
#		any_playable_ruler = {
#			limit = { has_character_flag = trade_competition_accumulate_prestige }
#
#			score_value = {
#				value = 0
#				chinese_trade_prestige_score = yes # Adds prestige
#			}
#
#			set_character_flag = trade_competition_halftime_winner
#			save_event_target_as = trade_competition_halftime_winner
#		}
#
#		event_target:trade_competitor_1 = {
#			character_event = { id = JD.40009 }
#		}
#		event_target:trade_competitor_2 = {
#			character_event = { id = JD.40009 }
#		}
#		event_target:trade_competitor_3 = {
#			character_event = { id = JD.40009 }
#		}
#		event_target:trade_competitor_4 = {
#			character_event = { id = JD.40009 }
#		}
#		event_target:trade_competitor_5 = {
#			character_event = { id = JD.40009 }
#		}
#		character_event = { id = JD.40010 days = 912 }
#	}
# }
#
# # Half-time status update event
# character_event = {
#	id = JD.40009
#	picture = GFX_evt_china_stable
#	border = GFX_event_normal_frame_diplomacy
#
#	desc = {
#		text = EVTDESC_JD_40009_A # ahead
#		trigger = { has_character_flag = trade_competition_halftime_winner }
#	}
#	desc = {
#		text = EVTDESC_JD_40009_B # not ahead
#		trigger = { NOT = { has_character_flag = trade_competition_halftime_winner } }
#	}
#
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	# I'm da bestest!
#	option = {
#		name = EVTOPTA_JD_40009
#		trigger = { has_character_flag = trade_competition_halftime_winner }
#		custom_tooltip = { text = trade_competition_prestige_halftime_winner_TT }
#		clr_character_flag = trade_competition_halftime_winner
#
#		show_portrait = event_target:trade_competitor_1
#		show_portrait = event_target:trade_competitor_2
#		show_portrait = event_target:trade_competitor_3
#		show_portrait = event_target:trade_competitor_4
#		show_portrait = event_target:trade_competitor_5
#	}
#
#	# Got to work harder
#	option = {
#		name = EVTOPTB_JD_40009
#		trigger = {
#			NOT = { has_character_flag = trade_competition_halftime_winner }
#		}
#		custom_tooltip = { text = trade_competition_prestige_halftime_loser_TT }
#		# show_portrait = event_target:trade_competition_halftime_winner
#
#		show_portrait = event_target:trade_competitor_1
#		show_portrait = event_target:trade_competitor_2
#		show_portrait = event_target:trade_competitor_3
#		show_portrait = event_target:trade_competitor_4
#		show_portrait = event_target:trade_competitor_5
#	}
# }
#
# # Governor Ping event for end result
# character_event = {
#	id = JD.40010
#	has_dlc = "Jade Dragon"
#
#	hide_window = yes
#	is_triggered_only = yes
#
#	immediate = {
#		any_playable_ruler = {
#			limit = { has_character_flag = trade_competition_accumulate_prestige }
#
#			score_value = {
#				value = 0
#				chinese_trade_prestige_score = yes # Adds prestige
#			}
#
#			set_character_flag = trade_competition_winner
#			save_event_target_as = trade_competition_winner
#		}
#
#		event_target:trade_competitor_1 = {
#			letter_event = { id = JD.40011 }
#		}
#		event_target:trade_competitor_2 = {
#			letter_event = { id = JD.40011 }
#		}
#		event_target:trade_competitor_3 = {
#			letter_event = { id = JD.40011 }
#		}
#		event_target:trade_competitor_4 = {
#			letter_event = { id = JD.40011 }
#		}
#		event_target:trade_competitor_5 = {
#			letter_event = { id = JD.40011 }
#		}
#	}
# }
#
# # Ending notification event
# letter_event = {
#	id = JD.40011
#	border = GFX_event_letter_frame_diplomacy
#
#	desc = {
#		text = EVTDESC_JD_40011_A # winner trade modifier
#		trigger = { has_character_flag = trade_competition_winner_modifier }
#	}
#	desc = {
#		text = EVTDESC_JD_40011_B # loser
#		trigger = { NOT = { has_character_flag = trade_competition_winner } }
#	}
#	desc = {
#		text = EVTDESC_JD_40011_C # winner artifact
#		trigger = { has_character_flag = trade_competition_winner_artifact }
#	}
#	desc = {
#		text = EVTDESC_JD_40011_D # winner grace
#		trigger = { has_character_flag = trade_competition_winner_grace }
#	}
#
#	is_triggered_only = yes
#
#	has_dlc = "Jade Dragon"
#
#	immediate = {
#		if = {
#			limit = { has_character_flag = trade_competition_winner }
#
#			if = {
#				limit = {
#					NOT = { has_character_modifier = chinese_imperial_trade_contract }
#				}
#				set_character_flag = trade_competition_winner_modifier
#			}
#			else_if = {
#				limit = {
#					NOT = { any_artifact = { has_artifact_flag = chinese } }
#				}
#				offmap_china = {
#					governor = {
#						random_list = {
#							 5 = { add_artifact = jade_dragon }
#							15 = { add_artifact = chinese_dragon_amulet }
#							20 = { add_artifact = chinese_ceremonial_robes }
#							20 = { add_artifact = silk_shroud }
#							15 = { add_artifact = water_clock }
#							15 = { add_artifact = jian_sword }
#							10 = { add_artifact = classic_of_poetry }
#							40 = {
#								add_artifact = chinese_artwork
#								new_artifact = { set_name = chinese_artwork_name }
#							}
#							40 = {
#								add_artifact = chinese_calligraphy
#								new_artifact = { set_name = chinese_calligraphy_name }
#							}
#							40 = {
#								add_artifact = chinese_sculpture
#								new_artifact = { set_name = chinese_sculpture_name }
#							}
#							20 = {
#								trigger = {
#									ROOT = { has_education_martial_trigger = yes }
#								}
#
#								mult_modifier = {
#									factor = 0.1
#									ROOT = { has_artifact = art_of_war }
#								}
#								mult_modifier = {
#									factor = 2
#									ROOT = { martial >= 14 }
#								}
#								mult_modifier = {
#									factor = 2
#									ROOT = { martial >= 18 }
#								}
#								mult_modifier = {
#									factor = 2
#									ROOT = { martial >= 22 }
#								}
#								mult_modifier = {
#									factor = 2
#									ROOT = { martial >= 24 }
#								}
#
#								add_artifact = art_of_war
#							}
#						}
#
#						new_artifact = {
#							transfer_artifact = {
#								from = PREV
#								to = ROOT
#							}
#							save_event_target_as = chinese_artifact
#						}
#					}
#				}
#				set_character_flag = trade_competition_winner_artifact
#			}
#			else = {
#				set_character_flag = trade_competition_winner_grace
#			}
#		}
#	}
#
#	# Hurray
#	option = {
#		name = EVTOPTA_JD_40005
#		trigger = { has_character_flag = trade_competition_winner }
#
#		sound_effect = china_grace_gain
#
#		clr_character_flag = trade_competition_winner
#		clr_character_flag = trade_competition_participant
#		clr_character_flag = trade_competition_accumulate_prestige
#
#		trigger_switch = {
#			on_trigger = has_character_flag
#
#			trade_competition_winner_modifier = {
#				add_character_modifier = {
#					name = chinese_imperial_trade_contract
#					years = 15
#				}
#				add_offmap_currency = {
#					offmap = offmap_china
#					value = 750
#				}
#				clr_character_flag = trade_competition_winner_modifier
#			}
#			trade_competition_winner_artifact = {
#				tooltip = {
#					event_target:chinese_artifact = {
#						show_scope_change = no
#
#						transfer_artifact = {
#							from = FROM
#							to = ROOT
#						}
#					}
#				}
#				add_offmap_currency = {
#					offmap = offmap_china
#					value = 750
#				}
#				clr_character_flag = trade_competition_winner_artifact
#			}
#			trade_competition_winner_grace = {
#				add_offmap_currency = {
#					offmap = offmap_china
#					value = 1500
#				}
#				clr_character_flag = trade_competition_winner_grace
#			}
#		}
#	}
#
#	# Boo
#	option = {
#		name = EVTOPTB_JD_40005
#		trigger = {
#			NOT = { has_character_flag = trade_competition_winner }
#		}
#
#		show_portrait = event_target:trade_competition_winner
#
#		clr_character_flag = trade_competition_participant
#		clr_character_flag = trade_competition_accumulate_prestige
#
#		add_offmap_currency = {
#			offmap = offmap_china
#			value = -100
#		}
#	}
# }


### Chinese Noble escapes to your court ###
character_event = { # Escaped Chinese Noble appears
	id = JD.70002
	desc = EVTDESC_JD_70002
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_diplomacy
	portrait = event_target:escaped_chinese_noble

	is_triggered_only = yes # on_yearly_pulse, random_events
	show_root = yes

	has_dlc = "Jade Dragon"
	min_age = 16
	only_playable = yes
	only_capable = yes
	prisoner = no

	trigger = {
		china_diplo_interaction_trigger = yes
		is_inaccessible_trigger = no
		NOT = { has_character_flag = escaped_chinese_noble }

		offmap_china = {
			NOR = {
				governor = { character = ROOT }
				has_status = china_civil_war
				has_status = china_plague
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 0.05
			ai = yes # Quick fix to reduce the amount of time the AI gets the events
		}
	}

	immediate = {
		offmap_china = {
			offmap_ruler = {
				save_event_target_as = chinese_emperor
			}
		}

		set_character_flag = escaped_chinese_noble

		create_character = {
			random_traits = yes
			dynasty = actually_culture
			religion = taoist
			culture = han
			historical = yes
		}

		new_character = {
			save_event_target_as = escaped_chinese_noble
			set_character_flag = originated_from_chinese_court
			set_character_flag = no_court_invites
			set_character_flag = ignore_refund
			set_character_flag = is_escaped_chinese_noble
		}
	}

	option = {
		name = EVTOPTA_JD_70002

		custom_tooltip = { text = EVTOPTA_JD_70002_TT }

		reverse_opinion = {
			name = opinion_very_grateful
			who = event_target:escaped_chinese_noble
			years = 5
		}

		hidden_effect = {
			random_list = {
				50 = { letter_event    = { id = JD.70003 months = 1 } }
				50 = { character_event = { id = JD.70004 days = 100 } }
			}
		}
	}

	option = {
		name = EVTOPTC_JD_70002

		custom_tooltip = { text = EVTOPTC_JD_70002_TT }

		reverse_opinion = {
			name = opinion_very_grateful
			who = event_target:escaped_chinese_noble
			years = 5
		}

		hidden_effect = {
			random_list = {
				50 = { character_event = { id = JD.70005 months = 2 } }
				50 = { character_event = { id = JD.70008 months = 2 } }
			}
		}
	}

	option = {
		name = EVTOPTB_JD_70002

		custom_tooltip = { text = EVTOPTB_JD_70002_TT }

		hidden_effect = {
			event_target:escaped_chinese_noble = {
				leave_court_and_die_effect = yes
			}
		}
	}
}

letter_event = { # China finds out
	id = JD.70003
	desc = EVTDESC_JD_70003
	border = GFX_event_letter_frame_diplomacy
	portrait = event_target:the_protector_general

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:escaped_chinese_noble = {
			is_alive = yes
			is_landed = no
		}
	}

	immediate = {
		offmap_china = {
			governor = { save_event_target_as = the_protector_general }
		}
	}

	option = {
		name = EVTOPTA_JD_70003

		custom_tooltip = { text = EVTOPTA_JD_70003_TT }

		character_event = { id = JD.70005 months = 2 }
	}

	option = {
		name = EVTOPTB_JD_70003

		custom_tooltip = { text = EVTOPTB_JD_70003_TT }

		detract_grace_major_effect = yes

		hidden_effect = {
			random_list = {
				50 = { character_event = { id = JD.70009 months = 2 } }
				50 = { character_event = { id = JD.70004 days = 100 } }
			}
		}
	}
}

character_event = { # China does not find out
	id = JD.70004
	desc = EVTDESC_JD_70004
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_diplomacy

	hide_from = yes
	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:escaped_chinese_noble = {
			is_alive = yes
			prisoner = no # This will effectively break the chain if the courtier is imprisoned... leaving no trace of the end of the chain.
			is_incapable = no
			is_landed = no
		}
	}

	option = {
		name = EVTOPTA_JD_70004

		show_portrait = event_target:escaped_chinese_noble

		if = {
			limit = {
				NOT = { has_artifact = chinese_dragon_amulet }
			}

			add_artifact = chinese_dragon_amulet
		}
		else_if = {
			limit = {
				NOT = { has_artifact = silk_shroud }
			}

			add_artifact = silk_shroud
		}
		else = {
			add_artifact = chinese_prev_emperor_sculpture
			new_artifact = { set_name = chinese_figurine_name }
		}


		custom_tooltip = {
			text = EVTOPTA_JD_70004_TT

			event_target:escaped_chinese_noble = {
				leave_court_and_die_effect = yes
			}
		}
	}
}

character_event = { # You let China know
	id = JD.70005
	desc = EVTDESC_JD_70005
	picture = GFX_evt_china_diplomatic_success
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:escaped_chinese_noble = {
			is_alive = yes
			is_landed = no
		}
	}

	option = {
		name = EVTOPTA_JD_70005

		add_grace_medium_effect = yes
		sound_effect = china_grace_gain

		event_target:escaped_chinese_noble = {
			show_scope_change = no

			death = { death_reason = death_executed_by_chinese_emperor }
		}
	}
}

character_event = { # You let China know but the noble escapes
	id = JD.70008
	desc = EVTDESC_JD_70008
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_diplomacy

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:escaped_chinese_noble = {
			is_alive = yes
			is_landed = no
		}
	}

	immediate = {
		detract_grace_minor_effect = yes

		event_target:escaped_chinese_noble = {
			leave_court_and_die_effect = yes
		}
	}

	option = {
		name = EVTOPTA_JD_70008

		tooltip = {
			detract_grace_minor_effect = yes
		}
	}
}

character_event = { # China Assassinates the noble
	id = JD.70009
	desc = EVTDESC_JD_70009
	picture = GFX_evt_shadow
	border = GFX_event_normal_frame_diplomacy

	hide_from = yes
	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:escaped_chinese_noble = {
			is_alive = yes
			is_landed = no
		}
	}

	immediate = {
		event_target:escaped_chinese_noble = {
			death = {
				death_reason = death_murder_unknown_strangle
				killer = event_target:chinese_emperor
			}
		}
	}

	option = {
		name = EVTOPTA_JD_70009

		tooltip = {
			event_target:escaped_chinese_noble = {
				show_scope_change = no

				death = {
					death_reason = death_murder_unknown_strangle
					killer = event_target:chinese_emperor
				}
			}
		}
	}
}


# Inform of China's response to you breaking free via decision
letter_event = {
	id = JD.60011
	desc = EVTDESC_JD_60011
	portrait = event_target:the_protector_general

	is_triggered_only = yes

	has_dlc = "Jade Dragon"
	ai = no

	immediate = {
		offmap_china = {
			governor = { save_event_target_as = the_protector_general }
		}
	}

	option = {
		name = EVTOPTA_JD_60011
	}
}


### Chinese Refugees appear at your court ###
character_event = {
	id = JD.10032
	picture = GFX_evt_chinese_bureaucrat
	border = GFX_event_normal_frame_diplomacy
	portrait = event_target:chinese_refugee

	desc = {
		text = EVTDESC_JD_10032_A # chinese_administrator
		trigger = { has_character_flag = received_administrator }
	}
	desc = {
		text = EVTDESC_JD_10032_B # chinese_master_engineer
		trigger = { has_character_flag = received_engineer }
	}
	desc = {
		text = EVTDESC_JD_10032_C # chinese_strategist
		trigger = { has_character_flag = received_strategist }
	}
	desc = {
		text = EVTDESC_JD_10032_D # chinese_doctor
		trigger = { has_character_flag = received_physician }
	}

	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	min_age = 10
	only_playable = yes
	only_capable = yes
	prisoner = no

	trigger = {
		trigger_if = {
			limit = { has_character_flag = received_chinese_refugee }
			had_character_flag = { flag = received_chinese_refugee years >= 20 }
		}

		china_diplo_interaction_trigger = yes
		is_inaccessible_trigger = no

		NAND = {
			has_assigned_minor_title = title_administrator
			has_assigned_minor_title = title_master_engineer
			has_assigned_minor_title = title_strategist

			trigger_if = {
				limit = { has_dlc = Reapers }
				has_assigned_minor_title = title_court_physician
			}
		}

		offmap_china = {
			NOT = {
				governor = {
					character = ROOT
				}
			}

			OR = {
				has_status = china_mongol_invasion
				has_status = china_jurchen_invasion
				has_status = china_civil_war
				has_status = china_famine
				has_status = china_plague
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 0.8
			offmap_china = { has_policy = china_isolationist }
		}
		mult_modifier = {
			factor = 0.5
			offmap_china = { has_status = china_civil_war }
		}
		mult_modifier = {
			factor = 0.25
			offmap_china = { has_status = china_famine }
		}
		mult_modifier = {
			factor = 0.25
			offmap_china = { has_status = china_plague }
		}

		mult_modifier = {
			factor = 1.5

			any_demesne_province = {
				trade_route = silk_road
				owned_by = PREV
			}
		}

	}

	immediate = {
		offmap_china = {
			offmap_ruler = {
				save_event_target_as = chinese_emperor
			}
		}

		random_list = {
			25 = {
				trigger = { NOT = { has_assigned_minor_title = title_administrator } }
				set_character_flag = received_administrator
			}

			25 = {
				trigger = { NOT = { has_assigned_minor_title = title_master_engineer } }
				set_character_flag = received_engineer
			}

			25 = {
				trigger = { NOT = { has_assigned_minor_title = title_strategist } }
				set_character_flag = received_strategist
			}

			25 = {
				trigger = {
					has_dlc = Reapers
					NOT = { has_assigned_minor_title = title_court_physician }
				}

				set_character_flag = received_physician
			}
		}

		set_character_flag = received_chinese_refugee

		####

		trigger_switch = {
			on_trigger = has_character_flag

			received_administrator = {
				random_list = {
					50 = { # Female
						mult_modifier = {
							factor = 0.05

							NOT = {
								has_game_rule = {
									name = gender
									value = all
								}
							}
						}

						create_character = {
							age = 30
							religion = taoist
							culture = han
							dynasty = actually_culture
							female = yes
							health = 6
							random_traits = no

							attributes = {
								martial = 2
								diplomacy = 4
								stewardship = 6
								intrigue = 2
								learning = 5
							}
						}
					}

					50 = { # Male
						create_character = {
							age = 30
							religion = taoist
							culture = han
							dynasty = actually_culture
							female = no
							health = 6
							random_traits = no

							attributes = {
								martial = 2
								diplomacy = 4
								stewardship = 6
								intrigue = 2
								learning = 5
							}
						}
					}
				}

				new_character = {
					# Education & other basic stuff
					save_event_target_as = chinese_administrator
					save_event_target_as = chinese_refugee

					add_character_modifier = {
						name = jd_administrator
						duration = -1
					}

					set_character_flag = is_chinese_refugee
					set_character_flag = is_chinese_administrator
					set_character_flag = originated_from_chinese_court
					set_character_flag = chinese_courtier_original_court_@PREV
					set_character_flag = no_court_invites
					set_character_flag = ignore_refund

					random_list = {
						30 = { add_trait = thrifty_clerk }
						15 = { add_trait = fortune_builder }
						 5 = { add_trait = midas_touched }
						30 = { add_trait = dutiful_cleric }
						15 = { add_trait = scholarly_theologian }
						 5 = { add_trait = mastermind_theologian }
					}

					random_list = {
						20 = { } # Nothing
						30 = { add_trait = erudite }
						25 = { add_trait = shrewd }
						15 = { add_trait = quick }
						 5 = { add_trait = genius }
						 5 = { add_trait = attractive }
					}

					random_list = {
						85 = { } # Nothing
						 1 = { add_trait = clubfooted }
						 2 = { add_trait = harelip }
						 2 = { add_trait = hunchback }
						 3 = { add_trait = lisp }
						 3 = { add_trait = stutter }
						 2 = {
							remove_trait = attractive
							add_trait = ugly
						}
						 1 = { add_trait = dwarf }
						 1 = { add_trait = weak }
					}

					random = {
						chance = 10
						add_trait = homosexual
					}

					opinion = {
						name = opinion_servant
						who = PREV
						years = 100
					}

					# Add archetype
					random_list = {
						# Conservative
						25 = {
							set_character_flag = archetype_conservative
							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									50 = { add_trait = scholar }
									50 = { add_trait = administrator }
								}
							}

							random = {
								chance = 50
								add_trait = zealous
							}

							add_trait = stubborn
							add_trait = temperate

							random_list = {
								20 = { add_trait = greedy }
								20 = { add_trait = wroth }
								20 = { add_trait = deceitful }
								20 = { add_trait = shy }
								20 = { add_trait = cruel }
							}

							random_list = {
								25 = { add_trait = poet }
								25 = { add_trait = chaste }
								25 = { add_trait = patient }
								25 = { add_trait = just }
							}
						}

						# Supportive
						25 = {
							set_character_flag = archetype_supportive
							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									50 = { add_trait = administrator }
									25 = { add_trait = scholar }
									25 = { add_trait = gardener }
								}
							}

							add_trait = humble
							add_trait = patient

							random_list = {
								33 = { add_trait = slothful }
								33 = { add_trait = craven }
								33 = { add_trait = shy }
							}

							random_list = {
								25 = { add_trait = content }
								25 = { add_trait = charitable }
								25 = { add_trait = kind }
								25 = { add_trait = trusting }
							}
						}

						# Decisive
						25 = {
							set_character_flag = archetype_decisive

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									75 = { add_trait = administrator }
									25 = { add_trait = architect }
								}
							}

							add_trait = ambitious
							add_trait = cynical

							random_list = {
								20 = { add_trait = cruel }
								20 = { add_trait = stubborn }
								20 = { add_trait = greedy }
								20 = { add_trait = wroth }
								20 = { add_trait = proud }
							}

							random_list = {
								20 = { add_trait = falconer }
								20 = { add_trait = diligent }
								20 = { add_trait = brave }
								20 = { add_trait = honest }
								20 = { add_trait = gregarious }
							}
						}

						# Sociable
						25 = {
							set_character_flag = archetype_sociable

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									25 = { add_trait = administrator }
									30 = { add_trait = socializer }
									25 = { add_trait = hedonist }

									20 = {
										trigger = { is_female = yes }
										add_trait = master_seductress
										add_trait = lustful
									}

									20 = {
										trigger = { is_female = no }
										add_trait = master_seducer
										add_trait = lustful
									}
								}
							}

							add_trait = gregarious
							add_trait = charitable

							random_list = {
								25 = { add_trait = craven }
								25 = { add_trait = envious }
								25 = { add_trait = gluttonous }
								25 = { add_trait = proud }
							}

							random_list = {
								25 = { add_trait = poet }
								25 = { add_trait = kind }
								25 = { add_trait = honest }
								25 = { add_trait = lustful }
							}
						}
					}
				}
			}

			received_engineer = {
				random_list = {
					50 = { # Female
						mult_modifier = {
							factor = 0.05

							NOT = {
								has_game_rule = {
									name = gender
									value = all
								}
							}
						}

						create_character = {
							age = 30
							religion = taoist
							culture = han
							dynasty = actually_culture
							female = yes
							health = 6
							random_traits = no

							attributes = {
								martial = 5
								diplomacy = 2
								stewardship = 6
								intrigue = 3
								learning = 3
							}
						}
					}

					50 = { # Male
						create_character = {
							age = 30
							religion = taoist
							culture = han
							dynasty = actually_culture
							female = no
							health = 6
							random_traits = no

							attributes = {
								martial = 5
								diplomacy = 2
								stewardship = 6
								intrigue = 3
								learning = 3
							}
						}
					}
				}

				new_character = {
					# Education & other basic stuff
					save_event_target_as = chinese_master_engineer
					save_event_target_as = chinese_refugee

					add_character_modifier = {
						name = jd_master_engineer
						duration = -1
					}

					set_character_flag = is_chinese_refugee
					set_character_flag = is_chinese_master_engineer
					set_character_flag = originated_from_chinese_court
					set_character_flag = chinese_courtier_original_court_@PREV
					set_character_flag = no_court_invites
					set_character_flag = ignore_refund

					random_list = {
						30 = { add_trait = thrifty_clerk }
						15 = { add_trait = fortune_builder }
						 5 = { add_trait = midas_touched }
						30 = { add_trait = tough_soldier }
						15 = { add_trait = skilled_tactician }
						 5 = { add_trait = brilliant_strategist }
					}

					random_list = {
						20 = { } # Nothing
						20 = { add_trait = erudite }
						20 = { add_trait = shrewd }
						15 = { add_trait = quick }
						 5 = { add_trait = genius }
						10 = { add_trait = brawny }
						 5 = { add_trait = strong }
						 5 = { add_trait = attractive }
					}

					random_list = {
						85 = { } # Nothing
						 1 = { add_trait = clubfooted }
						 2 = { add_trait = harelip }
						 2 = { add_trait = hunchback }
						 3 = { add_trait = lisp }
						 3 = { add_trait = stutter }

						 2 = {
							remove_trait = attractive
							add_trait = ugly
						}

						 1 = { add_trait = dwarf }

						 1 = {
							remove_trait = strong
							remove_trait = brawny
							add_trait = weak
						}
					}

					random = {
						chance = 10
						add_trait = homosexual
					}

					opinion = {
						name = opinion_servant
						who = PREV
						years = 100
					}

					# Add archetype
					random_list = {
						# Conservative
						25 = {
							set_character_flag = archetype_conservative

							if = {
								limit = { has_dlc = "Way of Life" }
								random_list = {
									75 = { add_trait = architect }
									25 = { add_trait = theologian }
								}
							}

							random = {
								chance = 50
								add_trait = zealous
							}

							add_trait = stubborn
							add_trait = temperate

							random_list = {
								20 = { add_trait = greedy }
								20 = { add_trait = wroth }
								20 = { add_trait = deceitful }
								20 = { add_trait = shy }
								20 = { add_trait = cruel }
							}

							random_list = {
								25 = { add_trait = poet }
								25 = { add_trait = chaste }
								25 = { add_trait = patient }
								25 = { add_trait = just }
							}
						}

						# Supportive
						25 = {
							set_character_flag = archetype_supportive

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									50 = { add_trait = architect }
									25 = { add_trait = socializer }
									25 = { add_trait = gardener }
								}
							}

							add_trait = humble
							add_trait = patient

							random_list = {
								33 = { add_trait = slothful }
								33 = { add_trait = craven }
								33 = { add_trait = shy }
							}

							random_list = {
								25 = { add_trait = content }
								25 = { add_trait = charitable }
								25 = { add_trait = kind }
								25 = { add_trait = trusting }
							}
						}

						# Decisive
						25 = {
							set_character_flag = archetype_decisive

							if = {
								limit = { has_dlc = "Way of Life" }
								random_list = {
									50 = { add_trait = architect }
									50 = { add_trait = strategist }
								}
							}

							add_trait = ambitious
							add_trait = cynical

							random_list = {
								20 = { add_trait = cruel }
								20 = { add_trait = stubborn }
								20 = { add_trait = greedy }
								20 = { add_trait = wroth }
								20 = { add_trait = proud }
							}

							random_list = {
								20 = { add_trait = falconer }
								20 = { add_trait = diligent }
								20 = { add_trait = brave }
								20 = { add_trait = honest }
								20 = { add_trait = gregarious }
							}
						}

						# Sociable
						25 = {
							set_character_flag = archetype_sociable

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									25 = { add_trait = architect }
									30 = { add_trait = socializer }
									25 = { add_trait = hedonist }

									20 = {
										trigger = { is_female = yes }
										add_trait = master_seductress
										add_trait = lustful
									}

									20 = {
										trigger = { is_female = no }
										add_trait = master_seducer
										add_trait = lustful
									}
								}
							}

							add_trait = gregarious
							add_trait = charitable

							random_list = {
								25 = { add_trait = craven }
								25 = { add_trait = envious }
								25 = { add_trait = gluttonous }
								25 = { add_trait = proud }
							}

							random_list = {
								25 = { add_trait = poet }
								25 = { add_trait = kind }
								25 = { add_trait = honest }
								25 = { add_trait = lustful }
							}
						}
					}
				}
			}

			received_strategist = {
				random_list = {
					50 = { # Female
						trigger = {
							has_game_rule = {
								name = gender
								value = all
							}
						}

						create_character = {
							age = 30
							religion = taoist
							culture = han
							dynasty = actually_culture
							female = yes
							health = 7
							random_traits = no

							attributes = {
								martial = 6
								diplomacy = 2
								stewardship = 3
								intrigue = 4
								learning = 2
							}
						}
					}

					50 = { # Male
						create_character = {
							age = 30
							religion = taoist
							culture = han
							dynasty = actually_culture
							female = no
							health = 7
							random_traits = no

							attributes = {
								martial = 6
								diplomacy = 2
								stewardship = 3
								intrigue = 4
								learning = 2
							}
						}
					}
				}

				new_character = {
					# Education & other basic stuff
					save_event_target_as = chinese_strategist
					save_event_target_as = chinese_refugee

					add_character_modifier = {
						name = jd_strategist
						duration = -1
					}

					set_character_flag = is_chinese_refugee
					set_character_flag = is_chinese_strategist
					set_character_flag = originated_from_chinese_court
					set_character_flag = chinese_courtier_original_court_@PREV
					set_character_flag = no_court_invites
					set_character_flag = ignore_refund

					random_list = {
						80 = { add_trait = skilled_tactician }
						20 = { add_trait = brilliant_strategist }
					}

					random_list = {
						20 = { add_trait = brave }
						20 = { add_trait = strong }
						20 = { add_trait = shrewd }
						40 = { add_trait = brawny }
					}

					random_list = {
						71 = { } # Nothing
						20 = { add_scarred_tiered_effect = yes }

						5 = {
							trigger = { has_dlc = Reapers }
							add_trait = one_eyed
							change_martial = 1
						}

						2 = {
							trigger = { has_dlc = Reapers }
							add_trait = one_handed
							change_martial = 1
						}

						2 = { add_trait = ugly }
					}

					random = {
						chance = 10
						add_trait = homosexual
					}

					opinion = {
						name = opinion_servant
						who = PREV
						years = 100
					}

					# Add archetype
					random_list = {
						# Conservative
						25 = {
							set_character_flag = archetype_conservative

							if = {
								limit = { has_dlc = "Way of Life" }
								add_trait = strategist
							}

							add_trait = logistics_expert

							if = {
								limit = {
									offmap_china = { has_status = china_golden_age }
								}

								random_list = {
									33 = { add_trait = master_of_flame }
									33 = { add_trait = sapper }
									33 = { add_trait = levy_coordinator }
								}
							}

							random = {
								chance = 50
								add_trait = zealous
							}

							add_trait = stubborn
							add_trait = temperate

							random_list = {
								20 = { add_trait = greedy }
								20 = { add_trait = wroth }
								20 = { add_trait = deceitful }
								20 = { add_trait = shy }
								20 = { add_trait = cruel }
							}

							random_list = {
								25 = { add_trait = poet }
								25 = { add_trait = chaste }
								25 = { add_trait = patient }
								25 = { add_trait = just }
							}
						}

						# Supportive
						25 = {
							set_character_flag = archetype_supportive

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									50 = { add_trait = hunter }
									50 = { add_trait = strategist }
								}
							}

							add_trait = sapper

							if = {
								limit = {
									offmap_china = {
										has_status = china_golden_age
									}
								}

								random_list = {
									33 = { add_trait = master_of_flame }
									33 = { add_trait = logistics_expert }
									33 = { add_trait = levy_coordinator }
								}
							}

							add_trait = humble
							add_trait = patient

							random_list = {
								30 = { add_trait = slothful }
								70 = { add_trait = shy }
							}

							random_list = {
								25 = { add_trait = content }
								25 = { add_trait = charitable }
								25 = { add_trait = kind }
								25 = { add_trait = trusting }
							}
						}

						# Decisive
						25 = {
							set_character_flag = archetype_decisive

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									50 = { add_trait = strategist }
									50 = { add_trait = duelist }
								}
							}

							add_trait = master_of_flame

							if = {
								limit = {
									offmap_china = {
										has_status = china_golden_age
									}
								}

								random_list = {
									33 = { add_trait = logistics_expert }
									33 = { add_trait = levy_coordinator }
									33 = { add_trait = sapper }
								}
							}

							add_trait = ambitious
							add_trait = cynical

							random_list = {
								20 = { add_trait = cruel }
								20 = { add_trait = stubborn }
								20 = { add_trait = greedy }
								20 = { add_trait = wroth }
								20 = { add_trait = proud }
							}

							random_list = {
								20 = { add_trait = falconer }
								20 = { add_trait = diligent }
								20 = { add_trait = brave }
								20 = { add_trait = honest }
								20 = { add_trait = gregarious }
							}
						}

						# Sociable
						25 = {
							set_character_flag = archetype_sociable

							if = {
								limit = { has_dlc = "Way of Life" }

								random_list = {
									20 = { add_trait = duelist }
									40 = { add_trait = hunter }
									40 = { add_trait = game_master }
								}
							}

							add_trait = levy_coordinator

							if = {
								limit = {
									offmap_china = {
										has_status = china_golden_age
									}
								}

								random_list = {
									33 = { add_trait = master_of_flame }
									33 = { add_trait = logistics_expert }
									33 = { add_trait = sapper }
								}
							}

							add_trait = gregarious
							add_trait = charitable

							random_list = {
								33 = { add_trait = envious }
								33 = { add_trait = gluttonous }
								33 = { add_trait = proud }
							}

							random_list = {
								25 = { add_trait = falconer }
								25 = { add_trait = kind }
								25 = { add_trait = honest }
								25 = { add_trait = lustful }
							}
						}
					}

					# Add second commander trait
					if = {
						limit = { offmap_china = { has_status = china_golden_age } }

						random_list = {
							25 = {
								trigger = { NOT = { trait = master_of_flame } }
								add_trait = master_of_flame
							}

							25 = {
								trigger = { NOT = { trait = logistics_expert } }
								add_trait = logistics_expert
							}

							25 = {
								trigger = { NOT = { trait = levy_coordinator } }
								add_trait = levy_coordinator
							}

							25 = {
								trigger = { NOT = { trait = sapper } }
								add_trait = sapper
							}
						}
					}
				}
			}

			received_physician = {
				random_list = {
					50 = { # Female
						mult_modifier = {
							factor = 0.05

							NOT = {
								has_game_rule = {
									name = gender
									value = all
								}
							}
						}

						create_character = {
							age = 35
							dynasty = actually_culture
							religion = taoist
							culture = han
							female = yes
							health = 6
							random_traits = no

							attributes = {
								martial = 2
								diplomacy = 5
								stewardship = 3
								intrigue = 3
								learning = 6
							}
						}
					}

					50 = { # Male
						create_character = {
							age = 35
							dynasty = actually_culture
							religion = taoist
							culture = han
							female = no
							health = 6
							random_traits = no

							attributes = {
								martial = 2
								diplomacy = 5
								stewardship = 3
								intrigue = 3
								learning = 6
							}
						}
					}
				}

				new_character = {
					# Education & other basic stuff
					save_event_target_as = chinese_doctor
					save_event_target_as = chinese_refugee

					set_character_flag = is_chinese_refugee
					set_character_flag = is_chinese_doctor
					set_character_flag = originated_from_chinese_court
					set_character_flag = chinese_courtier_original_court_@PREV
					set_character_flag = no_court_invites
					set_character_flag = ignore_refund

					random_list = {
						50 = { add_trait = scholarly_theologian }
						25 = { add_trait = mastermind_theologian }
					}

					add_trait = physician

					random_list = {
						20 = { } # Nothing
						30 = { add_trait = erudite }
						30 = { add_trait = shrewd }
						15 = { add_trait = quick }
						 5 = { add_trait = genius }
					}

					random_list = {
						80 = { } # Nothing
						 2 = { add_trait = clubfooted }
						 2 = { add_trait = harelip }
						 2 = { add_trait = hunchback }
						 4 = { add_trait = lisp }
						 4 = { add_trait = stutter }
						 2 = { add_trait = ugly }
						 2 = { add_trait = dwarf }
						 2 = { add_trait = weak }
					}

					random_list = {
						50 = { } # Nothing
						25 = { add_trait = patient }
						25 = { add_trait = diligent }
					}

					random = {
						chance = 10
						add_trait = homosexual
					}

					opinion = {
						who = PREV
						name = opinion_servant
						years = 100
					}

					# Add archetype
					random_list = {
						20 = { # Combat medic
							set_character_flag = archetype_decisive

							random_list = {
								50 = { add_trait = duelist }
								50 = { add_trait = scholar }
							}

							add_scarred_tiered_effect = yes
							remove_trait = dwarf
							remove_trait = weak
							add_trait = brawny
							add_trait = brave

							random_list = {
								60 = { } # Nothing

								20 = {
									trigger = { has_dlc = Reapers }
									add_trait = one_legged
								}

								20 = {
									trigger = { has_dlc = Reapers }
									add_trait = one_eyed
								}
							}

							random_list = {
								30 = { } # Nothing
								50 = { add_trait = cynical }

								10 = {
									add_trait = cynical
									add_trait = depressed
								}

								10 = {
									add_trait = cynical
									add_trait = depressed
									add_trait = drunkard
								}
							}

							random_list = {
								50 = { } # Nothing
								20 = { add_trait = kind }
								30 = { add_trait = honest }
							}
						}

						# Dr Jerk
						15 = {
							set_character_flag = archetype_decisive

							remove_trait = patient
							add_trait = scholar
							add_trait = wroth
							add_trait = honest
							add_trait = cynical

							random_list = {
								30 = { add_trait = proud }
								30 = { add_trait = envious }
								40 = { } # Nothing
							}

							random = {
								chance = 30
								add_trait = drunkard
							}

							random_list = {
								60 = { }

								20 = {
									add_trait = clubfooted
									set_name = Wu # House
								}

								20 = {
									trigger = { has_dlc = Reapers }
									add_trait = one_legged
									set_name = Wu # House
								}
							}
						}

						10 = { # Mad genius
							set_character_flag = archetype_sociable

							random_list = {
								50 = { add_trait = impaler }
								50 = { add_trait = mystic }
							}

							random_list = {
								33 = { add_trait = drunkard }
								33 = { add_trait = lunatic }
								33 = { add_trait = possessed }
							}

							remove_trait = quick
							remove_trait = shrewd
							add_trait = genius
							add_trait = paranoid

							random_list = {
								25 = { add_trait = gluttonous }
								25 = { add_trait = wroth }
								25 = { add_trait = proud }
								25 = { add_trait = greedy }
							}
						}

						20 = { # Herbalist
							set_character_flag = archetype_supportive

							remove_trait = weak
							add_trait = gardener
							add_trait = diligent
							add_trait = humble

							random_list = {
								33 = { add_trait = content }
								33 = { add_trait = shy }
								33 = { add_trait = poet }
							}

							random = {
								chance = 50
								add_trait = brawny
							}
						}

						20 = { # Health nut
							set_character_flag = archetype_conservative

							add_trait = mystic
							add_trait = celibate
							add_trait = chaste
							add_trait = temperate

							random_list = {
								50 = { add_trait = craven }
								25 = { add_trait = shy }
								25 = { add_trait = content }
							}

							set_focus = focus_scholarship # TODO: Isn't this useless for nonplayable characters?
						}

						20 = { # Compassionate doctor
							set_character_flag = archetype_supportive

							random_list = {
								50 = { add_trait = socializer }
								50 = { add_trait = scholar }
							}

							add_trait = kind
							add_trait = patient

							random_list = {
								25 = { add_trait = content }
								25 = { add_trait = humble }
								25 = { add_trait = trusting }
								25 = { add_trait = charitable }
							}

							set_focus = focus_family # TODO: Isn't this useless for nonplayable characters?
						}

						15 = { # McDreamy
							set_character_flag = archetype_sociable

							remove_trait = clubfooted
							remove_trait = harelip
							remove_trait = hunchback
							remove_trait = lisp
							remove_trait = stutter
							remove_trait = ugly
							remove_trait = dwarf
							remove_trait = giant
							remove_trait = weak
							add_trait = lustful

							if = {
								limit = { is_female = yes }
								add_trait = master_seductress
							}
							else = {
								add_trait = master_seducer
							}

							random_list = {
								50 = { } # Nothing
								25 = { add_trait = poet }
								25 = { add_trait = falconer }
							}

							random_list = {
								30 = { add_trait = attractive }
								50 = { add_trait = strong }
							}

							random_list = {
								35 = { add_trait = ambitious }
								35 = { add_trait = gregarious }
								30 = { } # Nothing
							}

							set_focus = focus_seduction # TODO: Isn't this useless for nonplayable characters?
						}
					}

					if = {
						limit = {
							offmap_china = { has_status = china_golden_age }
						}

						change_learning = 5
					}
				}
			}
		}
	}

	option = { # Welcome to stay, Administrator
		name = EVTOPTA_JD_10032

		trigger = { has_character_flag = received_administrator }

		custom_tooltip = { text = EVTOPTA_JD_10032_TT }

		event_target:chinese_administrator = {
			show_scope_change = no

			if = {
				limit = {
					offmap_china = { has_status = china_golden_age }
				}

				set_character_flag = jd_administrator_golden_age # so you can't reappoint during golden age to get better modifier
			}

			give_minor_title = title_administrator # effects in minor title definition
		}

		tooltip = {
			if = {
				limit = {
					offmap_china = { has_status = china_golden_age }
				}

				add_character_modifier = {
					name = employing_jd_administrator_golden_age
					duration = -1
				}
			}
			else = {
				add_character_modifier = {
					name = employing_jd_administrator
					duration = -1
				}
			}
		}

		reverse_opinion = {
			name = opinion_grateful
			who = event_target:chinese_refugee
			years = 100
		}
	}

	option = { # Welcome to stay, Engineer
		name = EVTOPTB_JD_10032

		trigger = { has_character_flag = received_engineer }

		custom_tooltip = { text = EVTOPTA_JD_10032_TT }

		event_target:chinese_master_engineer = {
			show_scope_change = no

			if = {
				limit = {
					offmap_china = { has_status = china_golden_age }
				}

				set_character_flag = china_master_engineer_golden_age # so you can't reappoint in golden age to get better effects
			}

			set_character_flag = master_engineer_just_spawned
			give_minor_title = title_master_engineer # effects in minor title definition
		}

		reverse_opinion = {
			name = opinion_grateful
			who = event_target:chinese_refugee
			years = 100
		}
	}

	option = { # Welcome to stay, Strategist
		name = EVTOPTC_JD_10032

		trigger = { has_character_flag = received_strategist }

		custom_tooltip = { text = EVTOPTA_JD_10032_TT } #(yes, the same as opt A)

		event_target:chinese_strategist = {
			show_scope_change = no

			if = {
				limit = {
					can_hold_title = title_strategist
					ROOT = { can_grant_title = title_strategist }
				}

				give_minor_title = title_strategist
			}

			if = {
				limit = {
					can_hold_title = title_commander
					ROOT = { can_grant_title = title_commander }
				}

				give_minor_title = title_commander
			}
		}

		reverse_opinion = {
			name = opinion_grateful
			who = event_target:chinese_refugee
			years = 100
		}

	}

	option = { # Welcome to stay, Doctor
		name = EVTOPTD_JD_10032

		trigger = { has_character_flag = received_physician }

		custom_tooltip = { text = EVTOPTA_JD_10032_TT }

		event_target:chinese_doctor = {
			show_scope_change = no

			give_minor_title = title_court_physician
		}

		reverse_opinion = {
			name = opinion_grateful
			who = event_target:chinese_refugee
			years = 100
		}

	}

	option = { # Opt out (they leave court and die)...
		name = {
			text = EVTOPTE_JD_10032_1 # "Surely this [chinese_refugee.GetManWoman] can find shelter elsewhere."
			trigger = { has_character_flag = received_administrator }
		}
		name = {
			text = EVTOPTE_JD_10032_2 # "This is a waste of my time."
			trigger = { has_character_flag = received_engineer }
		}
		name = {
			text = EVTOPTE_JD_10032_3 # "I'm sorry, but we can hardly afford to feed our own..."
			trigger = { has_character_flag = received_strategist }
		}
		name = {
			text = EVTOPTE_JD_10032_4 # "I'm sure [chinese_refugee.GetSheHe] wants to be left alone"
			trigger = { has_character_flag = received_physician }
		}

		if = {
			limit = { has_character_flag = received_physician }
			custom_tooltip = { text = EVTOPTE_JD_10032_4_TT } # "You let the refugee be.\n"
		}
		else = {
			custom_tooltip = { text = EVTOPTE_JD_10032_1_TT } # "You send the [chinese_refugee.GetManWoman] away.\n"
		}

		hidden_effect = {
			event_target:chinese_refugee = {
				leave_court_and_die_effect = yes
			}
		}
	}


	after = { # clear (almost) all flags...
		clr_character_flag = received_administrator
		clr_character_flag = received_engineer
		clr_character_flag = received_strategist
		clr_character_flag = received_physician
	}
}


################
# Suzerain dies, inform tributary relationship ends
character_event = {
	id = JD.60015

	hide_window = yes
	is_triggered_only = yes # on_death

	only_rulers = yes

	trigger = {
		any_tributary = {
			ai = no
			is_tributary = { type = default }
		}
	}

	immediate = {
		any_tributary = {
			limit = {
				ai = no
				is_tributary = { type = default }
			}

			character_event = { id = JD.60016 }
		}
	}
}

character_event = {
	id = JD.60016
	desc = EVTDESC_JD_60016
	picture = GFX_evt_bandits

	is_triggered_only = yes
	notification = yes

	option = { }
}

######
# Chinese Mini-Flavor Events
######

character_event = { # Traveling Teacher
	id = JD.7000
	desc = EVTDESC_JD_7000
	picture = GFX_evt_china_stable

	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	min_age = 16
	only_playable = yes
	only_capable = yes
	prisoner = no
	war = no

	trigger = {
		is_inaccessible_trigger = no
		NOT = { has_character_flag = traveling_teacher_visit }

		any_realm_province = {
			trade_route = silk_road
			held_under_PREV = yes
		}

		any_child = {
			ai = yes
			age >= 6
			is_adult = no
			is_inaccessible_or_incapable_trigger = no
			host = { character = ROOT }

			NOR = {
				has_character_flag = taught_by_traveling_teacher
				trait = inbred
			}
		}

		offmap_china = {
			NOR = {
				has_status = china_plague
				has_status = china_famine
			}
		}
	}

	immediate = {
		create_random_priest = {
			random_traits = yes
			dynasty = actually_culture
			female = no
			age = 42
			culture = han
			religion = taoist

			attributes = {
				diplomacy = 2
				learning = 14
				stewardship = 2
				intrigue = 2
				martial = 2
			}
		}

		new_character = {
			remove_trait = slow
			remove_trait = imbecile
			remove_trait = dull

			remove_trait = mystic
			remove_trait = socializer
			remove_trait = game_master
			remove_trait = hedonist
			remove_trait = duelist
			remove_trait = hunter
			remove_trait = strategist
			remove_trait = administrator
			remove_trait = architect
			remove_trait = gardener
			remove_trait = master_schemer
			remove_trait = impaler
			remove_trait = master_seducer
			remove_trait = master_seductress
			remove_trait = theologian

			add_trait = poet
			add_trait = scholar
			add_trait = erudite

			set_character_flag = originated_from_chinese_court
			set_character_flag = ignore_refund

			save_event_target_as = traveling_teacher
		}

		random_realm_province = {
			limit = {
				trade_route = silk_road
				held_under_PREV = yes
			}

			save_event_target_as = tavern_location
		}

		random_child = {
			limit = {
				ai = yes
				age >= 6
				is_adult = no
				is_inaccessible_or_incapable_trigger = no
				host = { character = ROOT }
				NOR = {
					has_character_flag = taught_by_traveling_teacher
					trait = inbred
				}
			}

			preferred_limit = {
				is_primary_heir = ROOT
			}

			save_event_target_as = child_to_be_taught
		}

		set_character_flag = traveling_teacher_visit
	}

	option = { # Bring him to court
		name = EVTOPTA_JD_7000

		custom_tooltip = { text = EVTOPTA_JD_7000_TT }

		show_portrait = event_target:traveling_teacher
		show_portrait = event_target:child_to_be_taught

		character_event = { id = JD.7001 }
	}

	option = { # Bring him over for... dinner
		name = EVTOPTC_JD_7000
		tooltip_info = cannibal

		trigger = { trait = cannibal }

		custom_tooltip = { text = EVTOPTC_JD_7000_TT }

		event_target:traveling_teacher = {
			show_scope_change = no

			death = {
				death_reason = death_execution_eaten
				killer = ROOT
			}
		}

		remove_trait_silently_stressed_effect = yes
		remove_trait_silently_depressed_effect = yes
	}

	option = { # Leave it be
		name = EVTOPTB_JD_7000

		custom_tooltip = { text = EVTOPTB_JD_7000_TT }

		hidden_effect = {
			event_target:traveling_teacher = {
				leave_court_and_die_effect = yes
			}
		}
	}
}

character_event = { # Accept Teacher into Court
	id = JD.7001
	desc = EVTDESC_JD_7001
	picture = GFX_evt_child_reading

	is_triggered_only = yes

	has_dlc = "Jade Dragon"

	trigger = {
		event_target:traveling_teacher = { is_alive = yes }
		event_target:child_to_be_taught = { is_alive = yes }
	}

	option = {
		name = EVTOPTA_JD_7001 # Basic teaching

		transfer_scaled_wealth = {
			to = event_target:traveling_teacher
			value = 0.25
			min = 50
		}

		event_target:child_to_be_taught = {
			show_scope_change = no

			change_learning = 2
		}

		ai_chance = {
			factor = 1

			trigger = { wealth >= 100 }
		}
	}

	option = {
		name = EVTOPTB_JD_7001 # Read Confucian and Taoist Classics to the child

		trigger = {
			event_target:child_to_be_taught = {
				NOT = { trait = erudite }
			}
		}

		transfer_scaled_wealth = {
			to = event_target:traveling_teacher
			value = 0.5
			min = 100
		}

		event_target:child_to_be_taught = {
			show_scope_change = no

			change_learning = 1
			add_trait = erudite

			hidden_effect = {
				if = {
					limit = {
						NOT = { religion = taoist }
					}

					random = {
						chance = 2
						set_secret_religion = taoist
					}
				}
			}
		}

		ai_chance = {
			factor = 1

			trigger = { wealth >= 100 }
		}
	}

	option = { # Teach child surgery and poetry
		name = EVTOPTC_JD_7001

		trigger = {
			event_target:child_to_be_taught = {
				NOR = {
					trait = dull
					trait = poet
				}
			}
		}

		transfer_scaled_wealth = {
			to = event_target:traveling_teacher
			value = 0.5
			min = 100
		}

		event_target:child_to_be_taught = {
			show_scope_change = no

			change_learning = 1
			add_trait = poet
		}

		ai_chance = {
			factor = 1

			trigger = { wealth >= 200 }
		}
	}

	option = { # Read Confucian Classics to the child
		name = EVTOPTD_JD_7001

		trigger = {
			event_target:child_to_be_taught = { trait = dull }
		}

		transfer_scaled_wealth = {
			to = event_target:traveling_teacher
			value = 2
			min = 200
		}

		event_target:child_to_be_taught = {
			show_scope_change = no

			change_learning = 1
			remove_trait = dull
		}

		ai_chance = {
			factor = 1

			trigger = { wealth >= 200 }
		}
	}

	option = { # This is outrageously expensive, send the teacher away!
		name = EVTOPTE_JD_7001

		custom_tooltip = { text = EVTOPTB_JD_7000_TT }

		prestige = -5

		hidden_effect = {
			event_target:traveling_teacher = {
				leave_court_and_die_effect = yes
			}
		}
	}
}

character_event = { # Radhanite Merchant
	id = JD.7010
	desc = EVTDESC_JD_7010
	picture = GFX_evt_jewish_market

	is_triggered_only = yes # on_yearly_pulse, random_events

	has_dlc = "Jade Dragon"
	min_age = 16
	only_playable = yes
	only_capable = yes
	prisoner = no
	war = no

	trigger = {
		NOR = {
			has_character_flag = radhanite_visit
			has_character_modifier = expelled_jewish

			has_alternate_start_parameter = {
				key = religion_names
				value = random
			}
		}

		any_realm_province = {
			trade_route = silk_road
			held_under_PREV = yes

			NOR = {
				has_province_modifier = radhanite_favor
				has_province_modifier = radhanite_favor_big
			}

			any_province_holding = {
				holding_type = city

				holder_scope = { tier = BARON }
			}
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 2

			any_owned_bloodline = {
				has_bloodline_flag = jewish_saintly_bloodline
			}
		}
	}

	immediate = {
		create_random_steward = {
			random_traits = yes
			dynasty = actually_culture
			female = no
			age = 33
			culture = ashkenazi
			religion = jewish
			flag = ai_flag_refuse_conversion

			attributes = {
				diplomacy = 2
				learning = 2
				stewardship = 14
				intrigue = 2
				martial = 2
			}
		}

		new_character = {
			remove_trait = slow
			remove_trait = imbecile
			remove_trait = dull
			add_trait = shrewd

			wealth = 50

			save_event_target_as = radhanite_merchant
		}

		random_realm_province = {
			limit = {
				trade_route = silk_road
				held_under_PREV = yes

				NOR = {
					has_province_modifier = radhanite_favor
					has_province_modifier = radhanite_favor_big
				}

				any_province_holding = {
					holding_type = city
					holder_scope = { tier = BARON }
				}
			}

			save_event_target_as = radhanite_location

			random_province_holding = {
				limit = {
					holding_type = city
					holder_scope = { tier = BARON }
				}

				save_event_target_as = radhanite_location_barony

				holder_scope = {
					save_event_target_as = radhanite_location_barony_holder
				}
			}
		}

		set_character_flag = radhanite_visit
	}

	option = { # Accept offer
		name = EVTOPTA_JD_7010

		custom_tooltip = { text = EVTOPTA_JD_7010_TT }

		show_portrait = event_target:radhanite_merchant

		transfer_scaled_wealth = {
			to = event_target:radhanite_merchant
			value = 0.5
			min = 100
		}

		event_target:radhanite_location = {
			show_scope_change = no

			add_province_modifier = {
				name = radhanite_favor
				years = 50
			}
		}

		ai_chance = {
			factor = 10

			trigger = { wealth >= 200 }
		}
	}

	option = { # Bring him over for... dinner
		name = EVTOPTB_JD_7010
		tooltip_info = cannibal

		trigger = { trait = cannibal }

		event_target:radhanite_merchant = {
			show_scope_change = no

			death = {
				death_reason = death_execution_eaten
				killer = ROOT
			}
		}

		wealth = 50

		remove_trait_silently_stressed_effect = yes
		remove_trait_silently_depressed_effect = yes

		ai_chance = { factor = 100 }
	}

	option = { # One-up the radhanite
		name = EVTOPTC_JD_7010

		trigger = {
			event_target:radhanite_location = { always = yes }
			event_target:radhanite_location_barony = { always = yes }
			event_target:radhanite_location_barony_holder = { always = yes }
		}

		custom_tooltip = { text = EVTOPTC_JD_7010_TT }

		prestige = -100

		transfer_scaled_wealth = {
			to = event_target:radhanite_merchant
			value = 0.5
			min = 100
		}

		event_target:radhanite_merchant = {
			show_scope_change = no

			usurp_title = event_target:radhanite_location_barony

			opinion = {
				name = opinion_loyal_servant
				who = ROOT
				years = 100
			}
		}

		event_target:radhanite_location = {
			show_scope_change = no

			add_province_modifier = {
				name = radhanite_favor_big
				years = 100
			}
		}

		reverse_opinion = {
			name = opinion_outraged
			who = event_target:radhanite_location_barony_holder
			years = 100
		}

		ai_chance = {
			factor = 5

			trigger = { wealth >= 200 }
		}
	}

	option = { # Politely decline
		name = EVTOPTD_JD_7010

		custom_tooltip = { text = EVTOPTD_JD_7010_TT }

		hidden_effect = {
			event_target:radhanite_merchant = {
				leave_court_and_die_effect = yes
			}
		}

		ai_chance = { factor = 100 }
	}
}