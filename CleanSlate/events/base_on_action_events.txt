####################################
# Reserved IDs: 0-999, 40000 - 44999
####################################

namespace = diploresponse
namespace = CK2

# ID 1 and 2 are empty dummy events that are used by the message system to spawn messages
# that should be displayed as events, their descriptions are filled in by the message system
letter_event = {
	id = 1

	is_triggered_only = yes
}

character_event = {
	id = 2

	is_triggered_only = yes
}

# Killer discovered after murder - consequences.
# Should be fired for the killer just before the victim dies. Victim is event_target:target_victim.
character_event = {
	id = 10

	hide_window = yes
	is_triggered_only = yes # not actually on_action, called in various event chains

	immediate = {
		if = {
			limit = {
				NOT = { has_character_modifier = known_murderer }
			}

			add_character_modifier = {
				name = known_murderer
				years = 50
			}
		}

		event_target:target_victim = {
			save_event_target_as = kinslayer_target
		}

		add_kinslayer_trait_effect = yes

		event_target:target_victim = {
			any_spouse = {
				opinion = {
					name = opinion_spouse_slayer
					who = ROOT
					years = 5
				}
			}

			any_liege = {
				if = {
					limit = {
						is_close_relative = PREV

						NOR = {
							character = ROOT
							is_close_relative = ROOT
						}
					}

					opinion = {
						name = opinion_regicide_traitor
						who = ROOT
					}
				}
			}

			if = {
				limit = {
					NOT = { dynasty = ROOT }
				}

				any_dynasty_member = {
					opinion = {
						name = opinion_dishonorable
						who = ROOT
						years = 5
					}
				}
			}

			top_liege = {
				opinion = {
					name = opinion_dishonorable
					who = ROOT
					years = 5
				}

				any_realm_lord = {
					opinion = {
						name = opinion_dishonorable
						who = ROOT
						years = 5
					}
				}
			}

			religion_head = {
				opinion = {
					name = opinion_dishonorable
					who = ROOT
					years = 5
				}
			}

			any_close_relative = {
				limit = {
					is_parent_of = PREV

					NOR = {
						character = ROOT
						is_parent_of = ROOT
					}
				}

				opinion = {
					name = opinion_killed_close_kin
					who = ROOT
					years = 100
				}

				add_rival = ROOT
			}

			any_child = {
				limit = {
					NOR = {
						character = ROOT
						is_child_of = ROOT
					}
				}

				opinion = {
					name = opinion_killed_close_kin
					who = ROOT
					years = 100
				}

				add_rival = ROOT
			}

			any_sibling = {
				limit = {
					NOR = {
						character = ROOT
						sibling = ROOT
					}
				}

				opinion = {
					name = opinion_killed_close_kin
					who = ROOT
					years = 100
				}
			}
		}
	}
}

# Attacker discovered after failed murder - consequences.
# Should be fired for the attacker. The victim is event_target:target_victim.
character_event = {
	id = 11

	hide_window = yes
	is_triggered_only = yes # not actually on_action, called in various event chains

	immediate = {
		event_target:target_victim = {
			opinion = {
				name = opinion_murder_attempt
				who = ROOT
				years = 50
			}

			any_liege = {
				limit = {
					is_close_relative = PREV

					NOR = {
						dynasty = ROOT
						character = ROOT
					}
				}

				opinion = {
					name = opinion_dishonorable
					who = ROOT
					years = 5
				}
			}

			if = {
				limit = {
					NOT = { dynasty = ROOT }
				}

				any_dynasty_member = {
					opinion = {
						name = opinion_dishonorable
						who = ROOT
						years = 5
					}
				}
			}

			any_close_relative = {
				limit = {
					is_parent_of = PREV

					NOR = {
						character = PREV
						is_parent_of = PREV
					}
				}

				opinion = {
					name = attempted_murder_of_child
					who = ROOT
					years = 10
				}
			}

			any_child = {
				limit = {
					NOR = {
						is_child_of = ROOT
						character = ROOT
					}
				}

				opinion = {
					name = attempted_murder_of_parent
					who = ROOT
					years = 10
				}
			}

			any_sibling = {
				limit = {
					NOR = {
						sibling = ROOT
						character = ROOT
					}
				}

				opinion = {
					name = attempted_murder_of_sibling
					who = ROOT
					years = 5
				}
			}
		}
	}
}

##########################################
# ADULTERY DISCOVERED
##########################################
# Fired for an unfaithful spouse who was discovered cheating
# Do not fire for both adulterers!
# Adulterer: event_target:target_adulterer
###########################################

character_event = {
	id = 20

	hide_window = yes
	is_triggered_only = yes # not actually on_action, called in various event chains

	trigger = {
		NOT = { is_married = event_target:target_adulterer }
	}

	immediate = {
		set_character_flag = adultery_discovered

		if = {
			limit = {
				has_nickname = no
				random < 5 # 5% chance
			}

			give_nickname = nick_the_unchaste
		}

		if = {
			limit = {
				religion_group = christian

				OR = {
					is_priest = yes
					is_ascetic_trigger = yes
				}
			}

			add_character_modifier = {
				name = adulterous_priest
				years = 20
			}

			piety = -100
		}

		if = {
			limit = {
				is_female = yes
				is_opposite_sex = event_target:target_adulterer # No one cares if two women fool around
			}

			if = {
				limit = {
					is_married = yes
					has_nickname = no
					random < 50 # 50% chance
				}

				give_nickname = nick_the_unfaithful
			}

			if = {
				limit = {
					is_pregnant = yes
					father_of_unborn_known = no

					father_of_unborn = {
						character = event_target:target_adulterer
					}
				}

				father_of_unborn_known = yes
			}

			if = {
				limit = {
					is_older_than = FROMFROM

					age_diff = {
						who = event_target:target_adulterer
						years >= 25
					}

					NOT = { has_character_modifier = cradle_robber }
				}

				add_character_modifier = {
					name = cradle_robber
					years = 5
				}
			}


			any_consort = { # Extra check for concubines
				limit = { character = FROM }

				opinion = {
					name = opinion_unfaithful_wife
					who = ROOT
					years = 10
				}

				opinion = {
					name = opinion_cuckolded
					who = event_target:target_adulterer
					years = 10
				}

				if = {
					limit = {
						NOR = {
							is_rival = event_target:target_adulterer
							is_lover = event_target:target_adulterer
							is_friend = event_target:target_adulterer
							trait = kind
							trait = content
						}
					}
					add_rival = event_target:target_adulterer
				}

				if = {
					limit = { is_lover = ROOT }
					remove_lover = ROOT
				}

				if = {
					limit = { is_lover = event_target:target_adulterer }
					remove_lover = event_target:target_adulterer
				}

				if = {
					limit = { is_friend = event_target:target_adulterer }
					remove_friend = event_target:target_adulterer
				}
			}

			if = {
				limit = {
					event_target:target_adulterer = {
						is_female = no
					}
				}

				any_spouse = {
					opinion = {
						name = opinion_unfaithful_wife
						who = ROOT
						years = 10
					}

					opinion = {
						name = opinion_cuckolded
						who = event_target:target_adulterer
						years = 10
					}

					if = {
						limit = {
							NOR = {
								is_rival = event_target:target_adulterer
								is_lover = event_target:target_adulterer
								is_friend = event_target:target_adulterer
								trait = kind
								trait = content
							}
						}
						add_rival = event_target:target_adulterer
					}

					if = {
						limit = { is_lover = ROOT }
						remove_lover = ROOT
					}

					if = {
						limit = { is_lover = event_target:target_adulterer }
						remove_lover = event_target:target_adulterer
					}

					if = {
						limit = { is_friend = event_target:target_adulterer }
						remove_friend = event_target:target_adulterer
					}
				}
			}

			if = {
				limit = {
					is_close_relative = ROOT
					religion_has_incest = no
				}

				add_character_modifier = {
					name = incestuous_adulteress
					years = 20
				}
			}

			else = {
				add_character_modifier = {
					name = adulteress
					years = 10
				}
			}
		}
		else = { # Male
			any_spouse = {
				if = {
					limit = { gender_equality_trigger = no }

					opinion = {
						name = opinion_unfaithful_husband
						who = ROOT
						years = 10
					}
				}
				else = {
					opinion = {
						name = opinion_unfaithful_husband_crime
						who = ROOT
						years = 10
					}
				}

				opinion = {
					name = slut_seductress
					who = event_target:target_adulterer
					years = 10
				}

				if = {
					limit = {
						NOR = {
							is_rival = event_target:target_adulterer
							is_lover = event_target:target_adulterer
							is_friend = event_target:target_adulterer
							trait = kind
							trait = content
						}
					}
					add_rival = event_target:target_adulterer
				}

				if = {
					limit = { is_lover = ROOT }
					remove_lover = ROOT
				}

				if = {
					limit = { is_lover = event_target:target_adulterer }
					remove_lover = event_target:target_adulterer
				}

				if = {
					limit = { is_friend = event_target:target_adulterer }
					remove_friend = event_target:target_adulterer
				}
			}

			if = {
				limit = { same_sex = event_target:target_adulterer }

				if = {
					limit = { religion_group = pagan_group }

					add_character_modifier = {
						name = known_sodomite_pagan
						years = 20
					}
				}
				else = {
					add_character_modifier = {
						name = known_sodomite
						years = 20
					}
				}
			}

			if = {
				limit = {
					is_close_relative = event_target:target_adulterer
					religion_has_incest = no
				}

				add_character_modifier = {
					name = incestuous_adulterer
					years = 20
				}
			}
			else_if = {
				limit = {
					is_married = yes
					NOT = { religion_group = pagan_group }
				}

				add_character_modifier = {
					name = adulterer
					years = 10
				}
			}
		}

		event_target:target_adulterer = {
			# Fire this event for the adulterer too
			if = {
				limit = {
					is_alive = yes
					is_dying = no
					NOT = { has_character_flag = adultery_discovered }
				}

				ROOT = { save_event_target_as = target_adulterer }
				character_event = { id = 20 }
			}

		#	log = "20: Adultery discovered between [Root.GetTitledName] and [This.GetTitledName]!"

			clear_event_target = target_adulterer
			clr_character_flag = adultery_discovered
		}
	}
}

# On-action event: Avoided imprison, declared independence
character_event = {
	id = 150
	desc = EVTDESC150
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes # on_avoided_imprison_started_war

	immediate = {
		opinion = {
			name = opinion_arrest_attempt
			who = FROM
			years = 10
		}

		FROM = {
			character_event = { id = 40000 }
		}
	}

	option = {
		name = EVTOPTA150

		chronicle = {
			entry = CHRONICLE_AVOID_IMPRISON_WAR
			portrait = [From.GetID]
		}
	}
}

character_event = {
	id = 40000
	desc = EVTDESC40000
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA40000

		chronicle = {
			entry = CHRONICLE_FAILED_IMPRISON_WAR
			portrait = [From.GetID]
		}
	}
}

# On-action event: Was imprisoned
character_event = {
	id = 151
	desc = EVTDESC151
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes # on_became_imprisoned

	immediate = {
		opinion = {
			name = opinion_arrest_attempt
			who = FROM
			years = 10
		}

		FROM = {
			character_event = { id = 40001 }
		}
	}

	option = {
		name = EVTOPTA151
	}
}

character_event = {
	id = 40001
	desc = EVTDESC40001
	picture = GFX_evt_into_the_dungeon
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	ai = no

	option = {
		name = EXCELLENT
	}
}

# on_avoided_imprison_fled_country
character_event = {
	id = 152
	desc = EVTDESC152
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes # on_avoided_imprison_fled_country

	immediate = {
		opinion = {
			name = opinion_arrest_attempt
			who = FROM
			years = 10
		}

		FROM = {
			character_event = { id = 40002 }
		}
	}

	option = {
		name = OK
	}
}

character_event = {
	id = 40002
	desc = EVTDESC40002
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA40002
	}
}

# on_released_from_prison
character_event = {
	id = 153
	desc = EVTDESC153
	picture = GFX_evt_recovery

	is_triggered_only = yes # on_released_from_prison

	option = {
		name = EVTOPTA153

		opinion = {
			name = opinion_merciful
			who = FROM
			years = 5
		}
	}
}

# on_executed
character_event = {
	id = 154
	desc = EVTDESC154
	picture = GFX_evt_beheading

	is_triggered_only = yes # on_executed

	immediate = {
		any_spouse = {
			opinion = {
				name = opinion_spouse_slayer
				who = FROM
				years = 5
			}
		}

		FROM = {
			ROOT = { save_event_target_as = kinslayer_target }
			add_kinslayer_trait_effect = yes
		}
	}

	option = {
		name = EVTOPTA154
	}
}

# on_exiled
character_event = {
	id = 155
	desc = EVTDESC155
	picture = GFX_evt_carriage

	is_triggered_only = yes # on_exiled

	ai = no

	option = {
		name = EVTOPTA155
	}
}

# on_failed_assassination - no harm done
character_event = {
	id = 156
	desc = EVTDESC156
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes # on_failed_assassination, random_events

	immediate = {
		FROM = {
			character_event = { id = 40003 }
		}
	}

	option = {
		name = EVTOPTA156
	}
}

# on_failed_assassination - involvement remains unknown
character_event = {
	id = 40003
	desc = EVTDESC40003
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA40003
	}
}

# on_failed_assassination - wounded
character_event = {
	id = 157
	desc = EVTDESC157
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes # on_failed_assassination, random_events

	trigger = {
		NOT = { trait = wounded }
		is_maimed_trigger = no
	}

	immediate = {
		FROM = {
			character_event = { id = 40004 }
		}
	}

	option = {
		name = EVTOPTA157

		add_trait = wounded
	}
}

character_event = {
	id = 40004
	desc = EVTDESC40003
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA40004
	}
}

# on_failed_assassination - maimed
character_event = {
	id = 158
	desc = EVTDESC158
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes # on_failed_assassination, random_events

	trigger = {
		can_be_maimed_trigger = yes
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 3
			trait = wounded
		}
	}

	immediate = {
		FROM = {
			character_event = { id = 40005 }
		}
	}

	option = {
		name = EVTOPTA158

		add_maimed_trait_effect = yes
	}
}

character_event = {
	id = 40005
	desc = EVTDESC40003
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	option = {
		name = EVTOPTA40005
	}
}

# on_failed_assassination_disc - no harm done
character_event = {
	id = 159
	desc = EVTDESC159
	picture = GFX_evt_shadow

	is_triggered_only = yes # on_failed_assassination_disc, random_events

	immediate = {
		save_event_target_as = target_victim

		FROM = {
			character_event = { id = 11 }
			character_event = { id = 40006 }
		}

		clear_event_target = target_victim
	}

	option = {
		name = I_SEE

		if = {
			limit = {
				host = {
					NOT = { character = FROM }
				}

				job_spymaster = {
					NOT = { character = FROM }
				}
			}

			host = {
				character_event = {
					id = 40020
					days = 5
				}
			}
		}
	}
}

# on_failed_assassination - divulged my name!
character_event = {
	id = 40006
	desc = EVTDESC40006
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	option = {
		name = EVTOPTA40006

		piety = -50
	}
}

# on_failed_assassination_disc - wounded
character_event = {
	id = 160
	desc = EVTDESC160
	picture = GFX_evt_shadow

	is_triggered_only = yes # on_failed_assassination_disc, random_events

	trigger = {
		NOT = { trait = wounded }
		is_maimed_trigger = no
	}

	immediate = {
		save_event_target_as = target_victim

		FROM = {
			character_event = { id = 11 }
			character_event = { id = 40007 }
		}

		clear_event_target = target_victim
	}

	option = {
		name = EVTOPTA160

		add_trait = wounded

		if = {
			limit = {
				host = {
					NOT = { character = FROM }
				}

				job_spymaster = {
					NOT = { character = FROM }
				}
			}

			host = {
				character_event = {
					id = 40020
					days = 5
				}
			}
		}
	}
}

character_event = {
	id = 40007
	desc = EVTDESC40006
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	option = {
		name = EVTOPTA40007

		piety = -50
	}
}

# on_failed_assassination - maimed
character_event = {
	id = 161
	desc = EVTDESC161
	picture = GFX_evt_shadow

	is_triggered_only = yes # on_failed_assassination_disc, random_events

	trigger = {
		NOR = {
			trait = maimed
			trait = one_eyed
			trait = blinded
		}
	}

	weight_multiplier = {
		factor = 1

		mult_modifier = {
			factor = 3
			trait = wounded
		}
	}

	immediate = {
		save_event_target_as = target_victim

		FROM = {
			character_event = { id = 11 }
			character_event = { id = 40008 }
		}

		clear_event_target = target_victim
	}

	option = {
		name = EVTOPTA161

		if = {
			limit = { has_dlc = "Reapers" }

			add_trait_silently_one_eyed_effect = yes
		}

		else = {
			add_trait = maimed
		}

		if = {
			limit = {
				host = {
					NOT = { character = FROM }
				}

				job_spymaster = {
					NOT = { character = FROM }
				}
			}

			host = {
				character_event = {
					id = 40020
					days = 5
				}
			}
		}
	}
}
character_event = {
	id = 40008
	desc = EVTDESC40006
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	option = {
		name = EVTOPTA40008

		piety = -50
	}
}

# on_assassination
character_event = {
	id = 162
	picture = GFX_evt_shadow
	desc = EVTDESC162

	hide_from = yes
	is_triggered_only = yes # on_assassination

	option = {
		name = EVTOPTA162

		FROM = {
			character_event = { id = 40009 }
		}

		death = {
			death_reason = death_murder_unknown
			killer = FROM
		}
	}
}

character_event = {
	id = 40009
	desc = EVTDESC40009
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA40009
	}
}

# on_assassination_disc - discovered
character_event = {
	id = 163
	desc = EVTDESC163
	picture = GFX_evt_shadow

	is_triggered_only = yes # on_assassination_disc

	immediate = {
		save_event_target_as = target_victim

		FROM = {
			character_event = { id = 10 }
		}

		clear_event_target = target_victim

		if = {
			limit = {
				employer = {
					NOR = {
						character = FROM
						character = ROOT
					}

					job_spymaster = {
						NOT = { character = FROM }
					}
				}
			}

			FROM = {
				save_event_target_as = evil_assassinator
			}

			employer = {
				character_event = {
					id = 40020
					days = 5
				}
			}
		}

		FROM = {
			character_event = { id = 40010 }
		}
	}

	option = {
		name = EVTOPTA163

		death = {
			death_reason = death_murder
			killer = FROM
		}
	}
}

character_event = {
	id = 40010
	desc = EVTDESC40010
	picture = GFX_evt_shadow

	hide_from = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { same_realm = FROM }

			any_realm_character = {
				limit = {
					NOT = { character = FROM }
				}

				opinion = {
					name = opinion_dishonorable
					who = ROOT
					years = 5
				}
			}
		}

		religion_head = {
			opinion = {
				name = opinion_dishonorable
				who = ROOT
				years = 5
			}
		}
	}

	option = {
		name = EVTOPTA40010

		piety = -50
	}
}

# Failed assassination attempt on us, reactions possible
character_event = {
	id = 40020
	desc = EVTDESC40020
	picture = GFX_evt_shadow

	is_triggered_only = yes

	option = {
		name = EVTOPTA40020 # Inside same realm, go to top liege

		trigger = {
			same_realm = FROMFROM
			independent = no

			top_liege = {
				NOT = { character = FROMFROM }
			}
		}

		top_liege = {
			show_scope_change = no

			character_event = {
				id = 40021
				tooltip = EVTTOOLTIP40021 # Ask liege for help
			}
		}

		ai_chance = { factor = 1000 }
	}

	option = {
		name = EVTOPTF40020 # Inside same realm, but its my top liege!

		trigger = {
			same_realm = FROMFROM
			independent = no

			top_liege = {
				character = FROMFROM
			}
		}

		top_liege = {
			show_scope_change = no

			character_event = {
				id = 40026
				days = 2
				tooltip = EVTTOOLTIP40026 # Will be exposed
			}
		}

		ai_chance = { factor = 1000 }
	}

	option = {
		name = EVTOPTB40020 # Are we his liege?

		trigger = {
			same_realm = FROMFROM
			independent = yes

			FROMFROM = {
				prisoner = no
			}
		}

		random = {
			chance = 30

			mult_modifier = {
				factor = 1.6 # 50%
				realm_intrigue >= 9
			}

			mult_modifier = {
				factor = 1.4 # 70%
				realm_intrigue >= 16
			}

			reverse_imprison = FROMFROM
		}

		ai_chance = { factor = 1000 }
	}

	option = {
		name = EVTOPTC40020 # Slay him, he is someone else's prisoner

		trigger = {
			same_realm = FROMFROM
			independent = yes

			FROMFROM = {
				prisoner = yes

				NOR = {
					host = { character = ROOT }

					has_opinion_modifier = {
						who = ROOT
						name = i_attempted_murder
					}
				}
			}
		}

		FROMFROM = {
			show_scope_change = no

			opinion = {
				name = i_attempted_murder
				who = ROOT
				months = 2
			}
		}

		send_assassin = FROMFROM

		ai_chance = { factor = 1000 }
	}

	option = {
		name = EVTOPTE40020 # Slay him, he is a prisoner

		trigger = {
			same_realm = FROMFROM
			independent = yes

			FROMFROM = {
				prisoner = yes
				host = { character = ROOT }
			}
		}

		FROMFROM = {
			show_scope_change = no

			death = {
				death_reason = death_execution
				killer = ROOT
			}
		}

		ai_chance = { factor = 1000 }
	}

	option = {
		name = EVTOPTC40020 # Someone in another realm

		trigger = {
			NOT = { same_realm = FROMFROM }

			FROMFROM = {
				NOT = {
					has_opinion_modifier = {
						who = ROOT
						name = i_attempted_murder
					}
				}
			}
		}

		FROMFROM = {
			show_scope_change = no

			opinion = {
				name = i_attempted_murder
				who = ROOT
				months = 2
			}
		}

		send_assassin = FROMFROM

		ai_chance = { factor = 1000 }
	}

	option = {
		name = EVTOPTD40020 # We dont dare do anything.. (player option, in case of worry.)

		piety = 5

		ai_chance = { factor = 1 }
	}
}

# Liege deals with intra-realm assassinations..
character_event = {
	id = 40021
	desc = EVTDESC40021
	picture = GFX_evt_shadow

	is_triggered_only = yes

	option = {
		name = EVTOPTA40021 # Give claim

		FROM = {
			character_event = {
				id = 40023
				days = 1
			}
		}

		event_target:evil_assassinator = {
			show_scope_change = no

			primary_title = {
				show_scope_change = no

				add_claim = FROM
			}

			character_event = {
				id = 40022
				days = 1
			}

			clear_event_target = evil_assassinator

			opinion = {
				name = opinion_betrayed
				who = ROOT
				years = 2
			}
		}

		ai_chance = {
			factor = 2

			mult_modifier = {
				factor = 50

				opinion = {
					who = FROM
					value = 50
				}
			}
		}
	}

	option = {
		name = EVTOPTB40021 # Attempt to imprison

		trigger = {
			event_target:evil_assassinator = {
				prisoner = no
			}
		}

		event_target:evil_assassinator = {
			show_scope_change = no

			opinion = {
				name = opinion_betrayed
				who = FROM
				years = 2
			}

			reverse_opinion = {
				name = evil_murderer
				who = ROOT
				years = 5
			}
		}

		FROM = {
			character_event = {
				id = 40024
				days = 1
				random = 2
			}
		}

		random = {
			chance = 30

			mult_modifier = {
				factor = 1.6 # 50%
				realm_intrigue >= 9
			}

			mult_modifier = {
				factor = 1.4 # 70%
				realm_intrigue >= 16
			}

			event_target:evil_assassinator = {
				imprison = yes
			}

			clear_event_target = evil_assassinator
		}

		ai_chance = {
			factor = 5

			mult_modifier = {
				factor = 100
				trait = just
			}
		}
	}

	option = {
		name = EVTOPTD40021 # Do nothing

		reverse_opinion = {
			name = not_supportive_liege
			who = FROM
			years = 2
		}

		FROM = {
			character_event = {
				id = 40025
				days = 3
				random = 5
			}
		}

		piety = -10
		clear_event_target = evil_assassinator

		ai_chance = {
			factor = 1

			mult_modifier = {
				factor = 100
				trait = arbitrary
			}
		}
	}
}

# Legitimate claim on throne
character_event = {
	id = 40022
	desc = EVTDESC40022
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = EVTOPTA40022 # Ok

		prestige = -10

		reverse_opinion = {
			name = evil_murderer
			who = FROM
			years = 5
		}
	}
}

character_event = {
	id = 40023
	desc = EVTDESC40023
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = EVTOPTA40023 # Ok

		prestige = 5
	}
}

character_event = {
	id = 40024
	desc = EVTDESC40024
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = EVTOPTA40024 # Ok

		prestige = 5
	}
}

character_event = {
	id = 40025
	desc = EVTDESC40025
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = EVTOPTA40025 # Ok

		prestige = -5
	}
}

character_event = {
	id = 40026
	desc = EVTDESC40026
	picture = GFX_evt_scandal

	is_triggered_only = yes

	option = {
		name = EVTOPTA40026

		remove_trait_silently_kind_effect = yes
		remove_trait_silently_just_effect = yes
		remove_trait_silently_honest_effect = yes

		prestige = -100

		any_vassal = {
			show_scope_change = no

			opinion = {
				name = black_honor
				who = ROOT
				years = 5
			}
		}
	}
}

# Any Crusade/Jihad/GHW announcement
# Called from 'on_crusade_creation'
# new_character is the targeted enemy (crusade_character for new_crusade)
# ROOT is the religious head
# FROM is the attacked kingdom title
narrative_event = {
	id = 200
	title = EVTNAME200
	border = GFX_event_narrative_frame_war
	portrait = event_target:target_ruler

	picture = {
		picture = GFX_evt_crusaders
		trigger = { ROOT = { religion_group = christian } }
	}
	picture = {
		picture = GFX_evt_viking_battle_oldgods
		trigger = { ROOT = { religion_group = pagan } }
	}
	picture = {
		picture = GFX_evt_battle
		trigger = {
			ROOT = {
				NOR = {
					religion_group = christian
					religion_group = pagan
				}
			}
		}
	}

	desc = {
		text = EVTDESC200
		trigger = {
			ROOT = { religion_group = christian }

			event_target:target_ruler = {
				religion_group = muslim
			}
		}
	}
	desc = {
		text = EVTDESC321
		trigger = {
			ROOT = { religion_group = christian }

			event_target:target_ruler = {
				religion_group = christian
			}
		}
	}
	desc = {
		text = EVTDESC201
		trigger = {
			ROOT = { religion_group = christian }

			event_target:target_ruler = {
				NOR = {
					religion_group = muslim
					religion_group = christian
				}
			}
		}
	}
	desc = {
		text = EVTDESC320
		trigger = {
			ROOT = { religion_group = muslim }

			event_target:target_ruler = {
				religion_group = christian
			}
		}
	}
	desc = {
		text = EVTDESC323
		trigger = {
			ROOT = { religion_group = muslim }

			event_target:target_ruler = {
				religion_group = muslim
			}
		}
	}
	desc = {
		text = EVTDESC322
		trigger = {
			ROOT = { religion_group = muslim }

			event_target:target_ruler = {
				NOR = {
					religion_group = muslim
					religion_group = christian
				}
			}
		}
	}
	desc = {
		text = EVTDESC324
		trigger = {
			ROOT = { religion_group = pagan_group }

			event_target:target_ruler = {
				religion_group = christian
			}
		}
	}
	desc = {
		text = EVTDESC325
		trigger = {
			ROOT = { religion_group = pagan_group }

			event_target:target_ruler = {
				religion_group = muslim
			}
		}
	}
	desc = {
		text = EVTDESC326
		trigger = {
			ROOT = { religion_group = pagan_group }

			event_target:target_ruler = {
				NOR = {
					religion_group = muslim
					religion_group = christian
				}
			}
		}
	}
	desc = {
		text = EVTDESC327_CHRIST
		trigger = {
			ROOT = { religion_group = zoroastrian_group }

			event_target:target_ruler = {
				religion_group = christian
			}

			NOT = {
				has_alternate_start_parameter = {
					key = religion_names
					value = random
				}
			}
		}
	}
	desc = {
		text = EVTDESC327_MUSLIMS
		trigger = {
			ROOT = { religion_group = zoroastrian_group }

			event_target:target_ruler = {
				religion_group = muslim
			}

			NOT = {
				has_alternate_start_parameter = {
					key = religion_names
					value = random
				}
			}
		}
	}
	desc = {
		text = EVTDESC327
		trigger = {
			ROOT = { religion_group = zoroastrian_group }

			OR = {
				event_target:target_ruler = {
					NOR = {
						religion_group = christian
						religion_group = muslim
					}
				}

				has_alternate_start_parameter = {
					key = religion_names
					value = random
				}
			}
		}
	}
	desc = {
		text = EVTDESC327_CHRIST
		trigger = {
			ROOT = { religion_group = jewish_group }

			event_target:target_ruler = {
				religion_group = christian
			}
		}
	}
	desc = {
		text = EVTDESC327_MUSLIMS
		trigger = {
			ROOT = { religion_group = jewish_group }

			event_target:target_ruler = {
				religion_group = muslim
			}
		}
	}
	desc = {
		text = EVTDESC327
		trigger = {
			ROOT = { religion_group = jewish_group }

			event_target:target_ruler = {
				NOR = {
					religion_group = christian
					religion_group = muslim
				}
			}
		}
	}

	is_triggered_only = yes # on_crusade_creation
	major = yes
	show_root = yes
	hide_new = yes

	immediate = {
		if = {
			limit = { event_target:crusade_character = { always = yes } }
			event_target:crusade_character = { save_event_target_as = target_ruler }
		}
		else = {
			new_character = { save_event_target_as = target_ruler }
			FROM = { save_event_target_as = crusade_title }
		}
	}

	trigger = {
		can_call_crusade = yes

		# New crusades are announced when the war starts, not when the planning starts
		trigger_if = {
			limit = { uses_new_crusade = yes }
			any_war = { using_cb = new_crusade }
		}
	}

	major_trigger = {
		ai = no

		trigger_if = {
			limit = { ROOT = { uses_new_crusade = yes } }
			NOT = { religion = ROOT } # New Crusade has different announcement event
		}
	}

	option = {
		name = {
			text = EVTOPTA200 # Deus Vult!
			trigger = { religion_group = christian }
		}
		name = {
			text = EVTOPTA320 # Allahu Akhbar!
			trigger = { religion_group = muslim }
		}
		name = {
			text = EVTOPTA328 # God and Israel!
			trigger = {
				religion_group = jewish_group

				NOT = {
					has_alternate_start_parameter = {
						key = religion_names
						value = random
					}
				}
			}
		}
		name = {
			text = EVTOPTA328_alt # Random variant
			trigger = {
				religion_group = jewish_group

				has_alternate_start_parameter = {
					key = religion_names
					value = random
				}
			}
		}
		name = {
			text = EVTOPTA324 # For [God Name]!
			trigger = {
				NOR = {
					religion_group = christian
					religion_group = muslim
					religion_group = jewish_group
				}
			}
		}

		trigger = { religion = ROOT }
	}

	option = {
		name = EVTOPTB200 # No concern of ours

		trigger = {
			NOR = {
				religion = ROOT
				religion = event_target:target_ruler
			}
		}
	}

	option = {
		name = EVTOPTD200 # To Arms!

		trigger = { character = event_target:target_ruler }
	}

	option = {
		name = EVTOPTE200 # Terrible News!

		trigger = {
			religion = event_target:target_ruler
			NOT = { character = event_target:target_ruler }
		}
	}
}

# DEMAND_RELIGIOUS_CONVERSION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 202
	desc = EVTDESC202

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# DEMAND_RELIGIOUS_CONVERSION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 203
	desc = EVTDESC203

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# REVOKE_TITLE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 204
	desc = EVTDESC204

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# REVOKE_TITLE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 205
	desc = EVTDESC205

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_PEACE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 206
	desc = EVTDESC206

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_PEACE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 207
	desc = EVTDESC207

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	option = {
		name = OK
	}
}

# SEND_GIFT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 208
	desc = EVTDESC208

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# SEND_GIFT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 209
	desc = evt_CK2_209_desc_a

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_VASSALIZATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 210
	desc = EVTDESC210

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_VASSALIZATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 211
	desc = EVTDESC211

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ARRANGE_BETROTHAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 212
	desc = EVTDESC212

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ARRANGE_BETROTHAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 213
	desc = EVTDESC213

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_SUCCESSION_MARRIGE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 214
	desc = EVTDESC214

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_SUCCESSION_MARRIGE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 215
	desc = EVTDESC215

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_MARRIGE_INTERACTION_ACCEPT_EVENT
diploresponse_event = {
	id = 216
	desc = EVTDESC216

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_MARRIGE_INTERACTION_DECLINE_EVENT
diploresponse_event = {
	id = 217
	desc = EVTDESC217

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 218
	desc = EVTDESC218

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 219
	desc = EVTDESC219

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# EDUCATE_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 220
	desc = EVTDESC220

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# EDUCATE_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 221
	desc = EVTDESC221

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ABANDON_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 222
	desc = EVTDESC222

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ABANDON_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 223
	desc = EVTDESC223

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# STOP_BACKING_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 224
	desc = EVTDESC224

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# STOP_BACKING_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 225
	desc = EVTDESC225

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# JOIN_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 226
	desc = EVTDESC226

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# JOIN_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 227
	desc = EVTDESC227

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# GRANT_LANDED_TITLE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 228
	desc = EVTDESC228

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# APPOINT_TO_OFFICE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 230
	desc = EVTDESC230

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# APPOINT_TO_OFFICE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 231
	desc = EVTDESC231

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_INVASION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 232
	desc = EVTDESC232
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_INVASION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 233
	desc = EVTDESC233
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_DIVORCE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 234
	desc = EVTDESC234
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_DIVORCE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 235
	desc = EVTDESC235
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 236
	border = GFX_event_letter_frame_religion

	desc = {
		text = EVTDESC236
		trigger = {
			religion_group = christian
		}
	}
	desc = {
		text = EVTDESC236_NC
		trigger = {
			NOT = { religion_group = christian }
		}
	}

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 237
	desc = EVTDESC237
	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 238
	desc = EVTDESC238
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	trigger = {
		NOT = { is_liege_of = FROM }
	}

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_ACCEPT_EVENT for tribal vassals
diploresponse_event = {
	id = 41000
	desc = EVTDESC238
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	notification = yes
	is_friendly = yes

	ai = no

	trigger = {
		is_liege_of = FROM
	}

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_DECLINE_EVENT
diploresponse_event = {
	id = 239
	desc = EVTDESC239
	border = GFX_event_letter_frame_war

	is_triggered_only = yes

	ai = no

	trigger = {
		NOT = { is_liege_of = FROM }
	}

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_DECLINE_EVENT for tribal vassals
diploresponse_event = {
	id = 41001
	desc = EVTDESC239
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	notification = yes

	ai = no

	trigger = {
		is_liege_of = FROM
	}

	option = {
		name = OK
	}
}

# DECLARE_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 240
	desc = EVTDESC240
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	trigger = {
		OR = {
			FROM = {
				independent = yes
			}

			liege = {
				NOR = {
					character = ROOT
					character = FROM
				}
			}
		}
	}


	option = {
		name = OK
	}
}

# DECLARE_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 241
	desc = EVTDESC241
	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	trigger = {
		FROM = {
			independent = no
		}

		liege = {
			OR = {
				character = ROOT
				character = FROM
			}
		}
	}

	option = {
		name = OK
	}
}

# RETRACT_VASSAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 274
	desc = EVTDESC274

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# RETRACT_VASSAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 275
	desc = EVTDESC275

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	option = {
		name = OK
	}
}

# ARRANGE_SUCC_BETROTHAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 330
	desc = EVTDESC330

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ARRANGE_SUCC_BETROTHAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 331
	desc = EVTDESC331

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# INVITE_TO_COURT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 280
	desc = EVTDESC280

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# INVITE_TO_COURT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 281
	desc = EVTDESC281

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_VASSALIZATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 282
	desc = EVTDESC282

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_FOR_VASSALIZATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 283
	desc = EVTDESC283

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 284
	desc = EVTDESC284

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 285
	desc = EVTDESC285

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 286
	desc = EVTDESC286

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 287
	desc = EVTDESC287

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# SETTLE_ADVENTURER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 288
	desc = EVTDESC288

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# SETTLE_ADVENTURER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 289
	desc = EVTDESC289

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ABSORB_CLAN_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 503
	desc = EVTDESC503

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ABSORB_CLAN_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 504
	desc = EVTDESC504

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	option = {
		name = OK
	}
}

# FORM_BLOOD_OATH_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 505
	desc = EVTDESC505

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# FORM_BLOOD_OATH_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 506
	desc = EVTDESC506

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# SETTLE_FEUD_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 507
	desc = EVTDESC507

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = EVTOPTA507
	}
}

# SETTLE_FEUD_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 508
	desc = EVTDESC508

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA508
	}
}

# SPLIT_CLAN_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 509
	desc = EVTDESC509

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# SPLIT_CLAN_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 510
	desc = EVTDESC510

	is_triggered_only = yes
	is_hostile = yes

	ai = no

	option = {
		name = OK
	}
}

# On-action event: Royal Marriage Aid Duty
# Sent to employers of both spouses
# ROOT is employer
# FROM is employers "employee"
# new_character is the other spouse.
character_event = {
	id = 500
	desc = EVTDESC500
	picture = GFX_evt_marriage

	is_triggered_only = yes # on_marriage

	trigger = {
		OR = {
			character = FROM

			AND = {
				FROM = {
					is_primary_heir = ROOT
					dynasty = ROOT
				}

				NOT = { character = new_character }
			}
		}

		trigger_if = {
			limit = {
				new_character = {
					is_close_relative = FROM
				}
			}

			religion_has_incest = no
		}

		NOR = {
			religion_group = muslim
			has_character_flag = recieved_royal_marriage_aid_duty
		}

		new_character = {
			NOR = {
				has_character_modifier = jd_prince
				has_character_modifier = jd_princess
			}
		}
	}

	immediate = {
		set_character_flag = recieved_royal_marriage_aid_duty
	}

	option = {
		name = EVTOPTA500

		scaled_wealth = {
			value = 0.5
			min = 10
		}
	}

	option = {
		name = EVTOPTB500

		if = {
			limit = { yearly_income < 50 }

			trigger_switch = {
				on_trigger = real_tier

				BARON = { prestige = 6 }
				COUNT = { prestige = 13 }
				DUKE = { prestige = 25 }
				KING = { prestige = 50 }
				EMPEROR = { prestige = 150 }
			}
		}

		else = {
			trigger_switch = {
				on_trigger = real_tier

				BARON = { prestige = 25 }
				COUNT = { prestige = 50 }
				DUKE = { prestige = 100 }
				KING = { prestige = 200 }
				EMPEROR = { prestige = 300 }
			}
		}
	}
}

# On-action event: Zoroastrian Xwedodah marriage
# Sent to employers of both spouses
# ROOT is employer
# FROM is employers "employee"
# new_character is the other spouse.
character_event = {
	id = 501
	desc = EVTDESC501
	picture = GFX_evt_marriage_zoroastrian_group

	is_triggered_only = yes # on_marriage

	religion = zoroastrian

	trigger = {
		new_character = {
			is_close_relative = FROM
		}

		OR = {
			character = FROM

			AND = {
				FROM = {
					is_primary_heir = ROOT
					dynasty = ROOT
				}

				NOT = { character = new_character }
			}
		}
	}

	option = {
		name = EVTOPTA500

		scaled_wealth = {
			value = 0.5
			min = 10
		}

		trigger_switch = {
			on_trigger = real_tier

			BARON = { piety = 25 }
			COUNT = { piety = 50 }
			DUKE = { piety = 100 }
			KING = { piety = 200 }
			EMPEROR = { piety = 300 }
		}
	}

	option = {
		name = EVTOPTB500

		if = {
			limit = { yearly_income < 50 }

			trigger_switch = {
				on_trigger = real_tier

				BARON = { prestige = 6 }
				COUNT = { prestige = 13 }
				DUKE = { prestige = 25 }
				KING = { prestige = 50 }
				EMPEROR = { prestige = 150 }
			}
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier

				BARON = { prestige = 25 }
				COUNT = { prestige = 50 }
				DUKE = { prestige = 100 }
				KING = { prestige = 200 }
				EMPEROR = { prestige = 300 }
			}
		}

		trigger_switch = {
			on_trigger = real_tier

			BARON = { piety = 25 }
			COUNT = { piety = 50 }
			DUKE = { piety = 100 }
			KING = { piety = 200 }
			EMPEROR = { piety = 300 }
		}
	}
}

# On-action event: Messalian close kin marriage
# Sent to employers of both spouses
# ROOT is employer
# FROM is employers "employee"
# new_character is the other spouse.
character_event = {
	id = 502
	desc = EVTDESC502
	picture = GFX_evt_marriage

	is_triggered_only = yes # on_marriage

	religion = messalian

	trigger = {
		new_character = {
			is_close_relative = FROM
		}

		OR = {
			character = FROM

			AND = {
				FROM = {
					dynasty = ROOT
					is_primary_heir = ROOT
				}

				NOT = { character = new_character }
			}
		}
	}

	option = {
		name = EVTOPTA500

		scaled_wealth = {
			value = 0.5
			min = 10
		}

		trigger_switch = {
			on_trigger = real_tier

			BARON = { piety = 25 }
			COUNT = { piety = 50 }
			DUKE = { piety = 100 }
			KING = { piety = 200 }
			EMPEROR = { piety = 300 }
		}
	}

	option = {
		name = EVTOPTB500

		if = {
			limit = { yearly_income < 50 }

			trigger_switch = {
				on_trigger = real_tier

				BARON = { prestige = 6 }
				COUNT = { prestige = 13 }
				DUKE = { prestige = 25 }
				KING = { prestige = 50 }
				EMPEROR = { prestige = 150 }
			}
		}
		else = {
			trigger_switch = {
				on_trigger = real_tier

				BARON = { prestige = 25 }
				COUNT = { prestige = 50 }
				DUKE = { prestige = 100 }
				KING = { prestige = 200 }
				EMPEROR = { prestige = 300 }
			}
		}

		trigger_switch = {
			on_trigger = real_tier

			BARON = { piety = 25 }
			COUNT = { piety = 50 }
			DUKE = { piety = 100 }
			KING = { piety = 200 }
			EMPEROR = { piety = 300 }
		}
	}
}

# Approve or disapprove of de facto Law Change
letter_event = {
	id = 290
	desc = EVTDESC290

	is_triggered_only = yes # on_approve_law

	ai = no
	lacks_dlc = "Conclave"

	option = {
		name = EVTOPTA290

		approve_law = FROM
	}

	option = {
		name = EVTOPTB290
	}
}


# Zeus Version Approve or disapprove of de facto Law Change
letter_event = {
	id = 675
	desc = EVTDESC290

	is_triggered_only = yes # on_approve_law

	ai = no
	has_dlc = "Conclave"

	trigger = {
		is_voter = yes
	}

	option = {
		name = EVTOPTA290

		approve_law = FROM
	}

	option = {
		name = EVTOPTC290

		decline_law = FROM
	}

	option = {
		name = EVTOPTB290
	}
}

# Approve or disapprove of de jure Law Change
letter_event = {
	id = 291
	desc = EVTDESC291

	is_triggered_only = yes # on_approve_de_jure_law

	ai = no
	lacks_dlc = "Conclave"

	trigger = {
		FROM = {
			holder_scope = {
				is_vassal_or_below = ROOT
			}
		}
	}

	option = {
		name = EVTOPTA290

		approve_law = FROM
	}

	option = {
		name = EVTOPTB290
	}
}

# Zeus Version Approve or disapprove of de jure Law Change
letter_event = {
	id = 676
	desc = EVTDESC291

	is_triggered_only = yes # on_approve_de_jure_law

	ai = no
	has_dlc = "Conclave"

	trigger = {
		is_voter = yes

		FROM = {
			holder_scope = {
				is_vassal_or_below = ROOT
			}
		}
	}

	option = {
		name = EVTOPTA290

		approve_law = FROM
	}

	option = {
		name = EVTOPTC290

		decline_law = FROM
	}

	option = {
		name = EVTOPTB290
	}
}

# Approve or disapprove of de jure Law Change
letter_event = {
	id = 292
	desc = EVTDESC292

	is_triggered_only = yes # on_approve_de_jure_law

	ai = no
	lacks_dlc = "Conclave"

	trigger = {
		FROM = {
			holder_scope = {
				NOT = { is_vassal_or_below = ROOT }
			}
		}
	}

	option = {
		name = EVTOPTA290

		approve_law = FROM
	}

	option = {
		name = EVTOPTB290
	}
}

# ASK_TO_JOIN_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 293
	desc = EVTDESC293

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_JOIN_WAR_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 294
	desc = EVTDESC294

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_EMBARGO_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 295
	desc = EVTDESC295

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_EMBARGO_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 296
	desc = EVTDESC296

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# MAKE_CONSORT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 297
	desc = EVTDESC297

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# MAKE_CONSORT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 298
	desc = EVTDESC298

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# FORM_ALLIANCE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = diploresponse.1
	desc = EVTDESCdiploresponse.1

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# FORM_ALLIANCE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = diploresponse.2
	desc = EVTDESCdiploresponse.2

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}


# Rebels spawn
# NOTE THAT WITH "THE OLD GODS" DLC, THIS IS NO LONGER FIRED
province_event = {
	id = 600
	desc = EVTDESC600
	picture = GFX_evt_peasants
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	lacks_dlc = "The Old Gods"

	trigger = {
		num_of_settlements >= 1
	}

	option = {
		name = EVTOPTA600

		hidden_effect = {
			random_list = {
				50 = {
					create_random_soldier = {
						random_traits = yes
						dynasty = random
						religion = ROOT
						culture = ROOT
						female = no
						age = 30
						employer = e_rebels
					}

					new_character = {
						spawn_unit = {
							province = ROOT
							home = ROOT
							scaled_by_biggest_garrison = 1.0

							troops = {
								archers = { 6 6 }
								light_cavalry = { 4 4 }
								light_infantry = { 10 10 }
							}
						}
					}
				}

				25 = {
					create_random_soldier = {
						random_traits = yes
						dynasty = random
						religion = ROOT
						culture = ROOT
						female = no
						age = 30
						employer = e_rebels
					}

					new_character = {
						spawn_unit = {
							province = ROOT
							home = ROOT
							scaled_by_biggest_garrison = 1.0

							troops = {
								archers = { 6 6 }
								light_cavalry = { 3 3 }
								light_infantry = { 11 11 }
							}
						}
					}
				}

				25 = {
					create_random_soldier = {
						random_traits = yes
						dynasty = random
						religion = ROOT
						culture = ROOT
						female = no
						age = 30
						employer = e_rebels
					}

					new_character = {
						spawn_unit = {
							province = ROOT
							home = ROOT
							scaled_by_biggest_garrison = 1.0

							troops = {
								archers = { 6 6 }
								light_infantry = { 14 14 }
							}
						}
					}
				}
			}

			# Lower revolt risk
			remove_province_modifier = recent_revolt

			add_province_modifier = {
				name = recent_revolt
				years = 10
			}

			# Inform barons about the rebels
			owner = {
				set_character_flag = informed_about_rebels
			}

			any_province_lord = {
				limit = {
					ai = no
					NOT = { has_character_flag = informed_about_rebels }
				}

				character_event = {
					id = 601
					days = 7
				}
			}

			owner = {
				clr_character_flag = informed_about_rebels
			}
		}
	}
}

# Inform barons about the rebels
character_event = {
	id = 601
	desc = EVTDESC601
	picture = GFX_evt_peasants

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA601
	}
}

# Province defects to rebels
# Spawn for baron
# FROM = the province
character_event = {
	id = 610
	desc = EVTDESC610
	picture = GFX_evt_peasants

	is_triggered_only = yes # on_defect_to_rebels

	option = {
		name = EVTOPTA610

		scaled_wealth = -0.2
	}
}

# Rebels disperse
# Spawn for baron
# FROM = the province
character_event = {
	id = 615
	desc = EVTDESC615
	picture = GFX_evt_peasants

	is_triggered_only = yes # on_defect_from_rebels

	ai = no

	option = {
		name = EXCELLENT
	}
}

# Crusade/Jihad Succeeds
# ROOT is the target title
# new_character is the Enemy
# FROM is the taker

narrative_event = {
	id = 620
	title = EVTNAME620
	desc = EVTDESC620
	picture = GFX_evt_battle
	border = GFX_event_narrative_frame_religion

	is_triggered_only = yes # on_crusade_success
	major = yes

	only_rulers = yes

	trigger = {
		FROM = {
			NOR = {
				religion = catholic
				religion = fraticelli
			}
		}
	}

	immediate = {
		if = {
			limit = {
				religion_group = FROM
				religion_group = christian
			}

			sound_effect = crusade_outcome_positive
		}

		any_playable_ruler = {
			clr_character_flag = forced_to_crusade
		}
	}

	option = {
		name = {
			text = evt_534_opt_a
			trigger = {
				religion_group = FROM
			}
		}
		name = {
			text = evt_534_opt_c
			trigger = {
				NOT = { religion_group = FROM }
			}
		}
	}
}

# Crusade/Jihad Fails
# ROOT is the target title
# new_character is the Enemy
# FROM is the Pope/Caliph

narrative_event = {
	id = 621
	title = EVTNAME621
	desc = EVTDESC621
	picture = GFX_evt_battle
	border = GFX_event_narrative_frame_religion

	is_triggered_only = yes # on_crusade_failure
	major = yes

	only_rulers = yes

	immediate = {
		any_playable_ruler = {
			clr_character_flag = forced_to_crusade
		}
	}

	option = {
		name = {
			text = EVTOPTA621
			trigger = {
				FROM = { religion_group = PREV }
				is_heretic = no
			}
		}
		name = {
			text = EVTOPTC621
			trigger = {
				FROM = { religion_group = PREV }
				is_heretic = yes
			}
		}
		name = {
			text = EVTOPTB621
			trigger = {
				FROM = {
					NOT = { religion_group = PREV }
				}
			}
		}
	}
}

# On-action event: On Death - hidden - clear stuff
character_event = {
	id = 650

	is_triggered_only = yes
	hide_window = yes

	only_playable = yes

	trigger = {
		leads_faction = yes
		diplomatic_immunity = yes
	}

	immediate = {
		any_faction_backer = {
			limit = { diplomatic_immunity = yes }
			diplomatic_immunity = no
		}
	}
}

# on_forced_consort
character_event = {
	id = 660
	picture = GFX_evt_scandal

	desc = {
		text = EVTDESC660
		trigger = { is_female = yes }
	}
	desc = {
		text = evt_CK2_660_desc_b
		trigger = { is_female = no }
	}

	is_triggered_only = yes

	immediate = {
		any_spouse = {
			character_event = { id = 662 }
		}

		any_child = {
			character_event = { id = 661 }
		}

		any_sibling = {
			character_event = { id = 661 }
		}

		father = {
			character_event = { id = 661 }
		}

		mother = {
			character_event = { id = 661 }
		}
	}

	option = {
		name = {
			text = EVTOPTA660
			trigger = { is_female = yes }
		}
		name = {
			text = EVTOPTA660
			trigger = { is_female = no }
		}

		opinion = {
			name = opinion_forced_consort
			who = FROM
			years = 100
		}
	}
}

character_event = {
	id = 661
	desc = EVTDESC661
	picture = GFX_evt_scandal

	is_triggered_only = yes

	option = {
		name = EVTOPTA661

		opinion = {
			name = opinion_forced_relative_consort
			who = FROMFROM
			years = 100
		}
	}
}

character_event = {
	id = 662
	picture = GFX_evt_scandal

	desc = {
		text = evt_CK2_662_desc_b
		trigger = { is_female = yes }
	}
	desc = {
		text = EVTDESC662
		trigger = { is_female = no }
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTB662

		trigger = {
			num_of_rivals < 3
			NOT = { is_rival = FROMFROM }
		}

		add_rival = FROMFROM

		hidden_effect = {
			opinion = {
				name = opinion_abducted_spouse
				who = FROM
				years = 100
			}
		}
	}

	option = {
		name = EVTOPTA662

		opinion = {
			name = opinion_forced_wife_consort
			who = FROMFROM
			years = 100
		}

		hidden_effect = {
			opinion = {
				name = opinion_abducted_spouse
				who = FROM
				years = 100
			}
		}
	}
}

narrative_event = {
	id = 670
	title = EVTNAME670
	border = GFX_event_narrative_frame_religion
	sound = pagan_reformation

	picture = {
		picture = GFX_evt_hellenic_temple
		trigger = {
			ROOT = {
				religion_openly_hellenic_or_reformed_trigger = yes
			}
		}
	}
	picture = {
		picture = GFX_evt_west_african_ruler
		trigger = {
			ROOT = {
				religion_openly_west_african_or_reformed_trigger = yes
			}
		}
	}
	picture = {
		picture = GFX_evt_pagan_reformation
		trigger = {
			ROOT = {
				religion_openly_hellenic_or_reformed_trigger = no
				religion_openly_west_african_or_reformed_trigger = no
			}
		}
	}

	desc = {
		text = EVTDESC670_HF
		trigger = {
			has_dlc = "Holy Fury"

			NOT = {
				has_alternate_start_parameter = {
					key = religion_names
					value = random
				}
			}
		}
	}
	desc = {
		text = EVTDESC670_HF_B
		trigger = {
			has_dlc = "Holy Fury"

			has_alternate_start_parameter = {
				key = religion_names
				value = random
			}
		}
	}
	desc = {
		text = EVTDESC670
		trigger = {
			NOT = { has_dlc = "Holy Fury" }
		}
	}

	is_triggered_only = yes # on_reform_religion
	major = yes
	show_root = yes
	hide_new = yes

	only_playable = yes

	immediate = {
		trigger_switch = {
			on_trigger = religion

			norse_pagan_reformed	= { norse_pagan = { set_flag = has_been_reformed } }
			tengri_pagan_reformed	= { tengri_pagan = { set_flag = has_been_reformed } }
			baltic_pagan_reformed	= { baltic_pagan = { set_flag = has_been_reformed } }
			finnish_pagan_reformed	= { finnish_pagan = { set_flag = has_been_reformed } }
			aztec_pagan_reformed	= { aztec_pagan = { set_flag = has_been_reformed } }
			slavic_pagan_reformed	= { slavic_pagan = { set_flag = has_been_reformed } }
			west_african_pagan_reformed = { west_african_pagan = { set_flag = has_been_reformed } }
			zun_pagan_reformed		= { zun_pagan = { set_flag = has_been_reformed } }
			bon_pagan_reformed		= { bon_pagan = { set_flag = has_been_reformed } }
			hellenic_pagan_reformed	= { hellenic_pagan = { set_flag = has_been_reformed } }
		}

		# Set religion head title as landless if religion has theocratic religion head
		if = {
			limit = {
				OR = {
					has_religion_feature = religion_theocratic_head
					has_religion_feature = religion_autocephaly
					AND = {
						is_reformed_religion = yes
						has_religion_features = no
						NOT = { religion = norse_pagan_reformed }
					}
				}
			}

			trigger_switch = {
				on_trigger = religion

				norse_pagan_reformed	= { d_norse_pagan_reformed = { save_event_target_as = religious_head_title } }
				tengri_pagan_reformed	= { d_tengri_pagan_reformed = { save_event_target_as = religious_head_title } }
				baltic_pagan_reformed	= { d_baltic_pagan_reformed = { save_event_target_as = religious_head_title } }
				finnish_pagan_reformed	= { d_finnish_pagan_reformed = { save_event_target_as = religious_head_title } }
				aztec_pagan_reformed	= { d_aztec_pagan_reformed = { save_event_target_as = religious_head_title } }
				slavic_pagan_reformed	= { d_slavic_pagan_reformed = { save_event_target_as = religious_head_title } }
				west_african_pagan_reformed = { d_west_african_pagan_reformed = { save_event_target_as = religious_head_title } }
				zun_pagan_reformed		= { d_zun_pagan_reformed = { save_event_target_as = religious_head_title } }
				bon_pagan_reformed		= { d_bon_pagan_reformed = { save_event_target_as = religious_head_title } }
				hellenic_pagan_reformed	= { k_hellenic_pagan_reformed = { save_event_target_as = religious_head_title } }
			}

			set_title_landless = {
				title = event_target:religious_head_title
				status = yes
			}
		}

		# (High)God name setup
		religion_scope = {
			persistent_event_target:religion_title = {
				export_reformer_to_title_effect = yes
			}
			rebuild_god_name_effect = yes
			if = {
				limit = {
					OR = {
						has_religion_feature = religion_holy_family
						has_religion_feature = religion_feature_zun
					}
					has_religion_feature = religion_temporal_head
				}

				set_high_god_name = string_reformer_god
			}
			else_if = { # Religion is Patriarchal
				limit = { has_religion_feature = religion_patriarchal }

				trigger_switch = {
					on_trigger = religion

					aztec_pagan_reformed	= {}
					baltic_pagan_reformed	= {}
					bon_pagan_reformed		= {}
					finnish_pagan_reformed	= {}
					hellenic_pagan_reformed	= {
						if = {
							limit = {
								has_flag = greek_reformation
							}
							if = { # Poseidon finally gets his due
								limit = { has_religion_feature = religion_seafaring }
								set_high_god_name = GOD_POSEIDON
							}
							else = {
								set_high_god_name = GOD_GREEK_JUPITER # Otherwise shows Conclave...
							}
						}
						else = {
							if = { # Poseidon finally gets his due
								limit = { has_religion_feature = religion_seafaring }
								set_high_god_name = GOD_NEPTUNE
							}
							else = {
								set_high_god_name = GOD_JUPITER
							}
						}
					}
					norse_pagan_reformed	= {}
					slavic_pagan_reformed	= {}
					tengri_pagan_reformed	= {}
					west_african_pagan_reformed = {}
					zun_pagan_reformed		= {}
				}
			}
			else_if = { # Religion is Matriarchal
				limit = { has_religion_feature = religion_matriarchal }

				trigger_switch = {
					on_trigger = religion

					aztec_pagan_reformed	= { set_high_god_name = GOD_CIHUACOATL }
					baltic_pagan_reformed	= { set_high_god_name = GOD_GABIJA }
					bon_pagan_reformed		= {}
					finnish_pagan_reformed	= { set_high_god_name = GOD_KUU }
					hellenic_pagan_reformed	= {
						if = {
							limit = {
								has_flag = greek_reformation
							}

							set_high_god_name = GOD_HERA
						}
						else = {
							set_high_god_name = GOD_JUNO
						}
					}
					norse_pagan_reformed	= { set_high_god_name = GOD_FRIGG }
					slavic_pagan_reformed	= { set_high_god_name = GOD_MEDEINA }
					tengri_pagan_reformed	= { set_high_god_name = GOD_UMAY }
					west_african_pagan_reformed = { set_high_god_name = GOD_THE_MOTHER }
					zun_pagan_reformed		= {}
				}
			}
			else_if = { # Else
				limit = { has_religion_features = yes }
				trigger_switch = {
					on_trigger = religion

					aztec_pagan_reformed	= {
						if = {
							limit = { has_religion_feature = religion_proselytizing }
							set_high_god_name = GOD_QUETZALCOATL
						}
						else = {
							set_high_god_name = GOD_HUITZILOPOCHTLI
						}
					}
					baltic_pagan_reformed	= {}
					bon_pagan_reformed		= {}
					finnish_pagan_reformed	= {}
					hellenic_pagan_reformed	= {
						if = {
							limit = {
								has_flag = greek_reformation
							}
							if = { # Poseidon finally gets his due
								limit = { has_religion_feature = religion_seafaring }
								set_high_god_name = GOD_POSEIDON
							}
							else = {
								set_high_god_name = GOD_GREEK_JUPITER # Otherwise shows Conclave...
							}
						}
						else = {
							if = { # Poseidon finally gets his due
								limit = { has_religion_feature = religion_seafaring }
								set_high_god_name = GOD_NEPTUNE
							}
							else = {
								set_high_god_name = GOD_JUPITER
							}
						}
					}
					norse_pagan_reformed	= { set_high_god_name = GOD_THE_ALLFATHER }
					slavic_pagan_reformed	= {}
					tengri_pagan_reformed	= {}
					west_african_pagan_reformed = {}
					zun_pagan_reformed		= {}
				}
			}
		}

		# Voting rules aren't enabled automatically for relgion head title created in code
		if = {
			limit = { controls_religion = yes }

			any_demesne_title = {
				limit = { controls_religion = yes }

				trigger_switch = {
					on_trigger = has_law

					succ_elective_gavelkind = { elective_voting_rules = elective_gavelkind }
					succ_eldership		= { elective_voting_rules = eldership_rules }
					succ_feudal_elective = { elective_voting_rules = feudal_elective }
				}
			}
		}

		if = {
			limit = { religion = hellenic_pagan_reformed }

			# If hellenic reformer owns Rome, Catholic faith loses MA.
			if = {
				limit = { completely_controls = c_roma }

				catholic = {
					religion_authority = {
						name = hellenic_resurgence
						years = 100
					}
				}
			}

			# If hellenic reformer owns Constantinople, Orthodox faith loses MA.
			if = {
				limit = { completely_controls = c_constantinopolis }

				orthodox = {
					religion_authority = {
						name = hellenic_resurgence
						years = 100
					}
				}
			}
		}

		# Modifier not applied correctly by pagan reformation screen.
		trigger_switch = {
			on_trigger = has_religion_feature

			religion_cosmopolitan = {
				religion_authority = {
					name = cosmopolitan_religion
					years = 1000
				}

				any_playable_ruler = {
					limit = {
						distance_from_realm = {
							who = ROOT
							value < 200
						}
					}

					add_intermarry = ROOT
					ROOT = { add_intermarry = PREV }
				}

				any_neighbor_independent_ruler = {
					add_intermarry = ROOT
					ROOT = { add_intermarry = PREV }
				}
			}

			religion_dogmatic = {
				religion_authority = {
					name = dogmatic_religion
					years = 1000
				}

				remove_intermarry = christian
				remove_intermarry = muslim
				remove_intermarry = pagan_group
				remove_intermarry = zoroastrian_group
				remove_intermarry = indian_group
				remove_intermarry = jewish_group
			}
		}

		# Gender Doctrines
		trigger_switch = {
			on_trigger = has_religion_feature

			religion_matriarchal = {
				any_demesne_title = {
					add_law = {
						law = enatic_succession
						cooldown = no
						opinion_effect = no
					}

					if = {
						limit = { is_law_potential = status_of_women_4 }

						add_law = {
							law = status_of_women_4
							cooldown = no
							opinion_effect = no
						}
					}
				}

				recalc_succession = yes

				any_close_relative = {
					limit = { is_female = no }

					opinion = {
						name = bad_succ_law_change
						who = ROOT
						years = 100
					}
				}

				any_close_relative = {
					limit = { is_female = yes }

					opinion = {
						name = good_succ_law_change
						who = ROOT
						years = 100
					}
				}
			}

			religion_patriarchal = {
				any_demesne_title = {
					add_law = {
						law = agnatic_succession
						cooldown = no
						opinion_effect = no
					}

					if = {
						limit = { is_law_potential = status_of_women_0 }

						add_law = {
							law = status_of_women_0
							cooldown = no
							opinion_effect = no
						}
					}
				}

				recalc_succession = yes

				any_close_relative = {
					limit = { is_female = yes }

					opinion = {
						name = bad_succ_law_change
						who = ROOT
						years = 100
					}
				}

				any_close_relative = {
					limit = { is_female = no }

					opinion = {
						name = good_succ_law_change
						who = ROOT
						years = 100
					}
				}
			}

			religion_equal = {
				any_demesne_title = {
					if = {
						limit = { is_law_potential = true_cognatic_succession }

						add_law = {
							law = true_cognatic_succession
							cooldown = no
							opinion_effect = no
						}
					}

					if = {
						limit = { is_law_potential = status_of_women_4 }

						add_law = {
							law = status_of_women_4
							cooldown = no
							opinion_effect = no
						}
					}
				}

				recalc_succession = yes
			}

			religion_feature_bon = {
				any_demesne_title = {
					if = {
						limit = { is_law_potential = true_cognatic_succession }

						add_law = {
							law = true_cognatic_succession
							cooldown = no
							opinion_effect = no
						}
					}

					if = {
						limit = { is_law_potential = status_of_women_4 }

						add_law = {
							law = status_of_women_4
							cooldown = no
							opinion_effect = no
						}
					}
				}

				recalc_succession = yes
			}
		}

		# Activate Astrology
		if = {
			limit = { has_religion_feature = religion_astrology }

			add_western_zodiac_trait_effect = yes

			character_event = {
				id = HF.23032
				days = 5
			}
		}

		# Apply Defaults if the player doesn't have Holy Fury
		if = {
			limit = {
				NOT = { has_dlc = "Holy Fury" }
			}

			trigger_switch = {
				on_trigger = religion

				bon_pagan_reformed = {
					set_unit_modifier = {
						garrison_size = 0.4

						key = DEF_RELIGION
					}

					set_unit_home_modifier = {
						land_morale = 0.8
						garrison_size = 0.4

						light_infantry_defensive = 0.8
						heavy_infantry_defensive = 0.8
						pikemen_defensive = 0.8
						light_cavalry_defensive = 0.8
						knights_defensive = 0.8
						archers_defensive = 0.8
						horse_archers_defensive = 0.8
						camel_cavalry_defensive = 0.8
						war_elephants_defensive = 0.8

						key = DEF_RELIGION_HOME_TERRITORY
					}
				}

				baltic_pagan_reformed = {
					set_unit_modifier = {
						garrison_size = 0.2
						levy_size = 0.2

						key = DEF_RELIGION
					}

					set_unit_home_modifier = {
						land_morale = 0.8
						garrison_size = 0.4

						light_infantry_defensive = 0.8
						heavy_infantry_defensive = 0.8
						pikemen_defensive = 0.8
						light_cavalry_defensive = 0.8
						knights_defensive = 0.8
						archers_defensive = 0.8
						horse_archers_defensive = 0.8
						camel_cavalry_defensive = 0.8
						war_elephants_defensive = 0.8

						key = DEF_RELIGION_HOME_TERRITORY
					}
				}

				finnish_pagan_reformed = {
					set_unit_modifier = {
						garrison_size = 0.3
						levy_size = 0.1

						key = DEF_RELIGION
					}

					set_unit_home_modifier = {
						land_morale = 0.8
						garrison_size = 0.4

						light_infantry_defensive = 0.8
						heavy_infantry_defensive = 0.8
						pikemen_defensive = 0.8
						light_cavalry_defensive = 0.8
						knights_defensive = 0.8
						archers_defensive = 0.8
						horse_archers_defensive = 0.8
						camel_cavalry_defensive = 0.8
						war_elephants_defensive = 0.8

						key = DEF_RELIGION_HOME_TERRITORY
					}
				}

				norse_pagan_reformed = {
					set_allow_rivermovement = yes
					enable_prepared_invasion = THIS
					set_seafaring = yes
					make_reformer_head_of_religion = yes
					grant_title_no_opinion = d_norse_pagan_reformed
				}

				slavic_pagan_reformed = {
					set_unit_modifier = {
						garrison_size = 0.2
						levy_size = 0.2

						key = DEF_RELIGION
					}

					set_unit_home_modifier = {
						land_morale = 0.8
						garrison_size = 0.4

						light_infantry_defensive = 0.8
						heavy_infantry_defensive = 0.8
						pikemen_defensive = 0.8
						light_cavalry_defensive = 0.8
						knights_defensive = 0.8
						archers_defensive = 0.8
						horse_archers_defensive = 0.8
						camel_cavalry_defensive = 0.8
						war_elephants_defensive = 0.8

						key = DEF_RELIGION_HOME_TERRITORY
					}
				}

				west_african_pagan_reformed = {
					set_unit_modifier = {
						garrison_size = 0.4

						key = DEF_RELIGION
					}

					set_unit_home_modifier = {
						land_morale = 0.8
						garrison_size = 0.4

						light_infantry_defensive = 0.8
						heavy_infantry_defensive = 0.8
						pikemen_defensive = 0.8
						light_cavalry_defensive = 0.8
						knights_defensive = 0.8
						archers_defensive = 0.8
						horse_archers_defensive = 0.8
						camel_cavalry_defensive = 0.8
						war_elephants_defensive = 0.8

						key = DEF_RELIGION_HOME_TERRITORY
					}
				}

				zun_pagan_reformed = {
					set_unit_modifier = {
						levy_size = 0.3

						heavy_infantry_offensive = 0.2
						heavy_infantry_defensive = 0.2

						key = OFF_RELIGION
					}
				}
			}
		}

		# Achievement Flags
		if = {
			limit = {
				ai = no
				is_ironman = yes
			}

			set_character_flag = achievement_new_ways

			if = {
				limit = { religion = hellenic_pagan_reformed }
				set_character_flag = achievement_by_jupiter
			}
		}

		# Courtier Conversion
		any_courtier = {
			limit = {
				is_heresy_of = ROOT
				employer = { character = ROOT }
			}

			# Workaround for automatic usurpation of theocratic characters
			set_character_flag = convert_abandon_heresy
			convert_religion_failsafe_effect = yes
		}

		# Dynasty Member Conversion
		any_dynasty_member = {
			limit = {
				is_heresy_of = ROOT
				is_playable = no
			}

			# Workaround for automatic usurpation of theocratic characters
			set_character_flag = convert_abandon_heresy
			convert_religion_failsafe_effect = yes
		}

		# Vassal Conversion
		any_vassal = {
			limit = {
				is_heresy_of = ROOT
				is_playable = no
			}

			# Workaround for automatic usurpation of theocratic characters
			set_character_flag = convert_abandon_heresy
			convert_religion_failsafe_effect = yes
		}

		# Prevent wrong-gendered temple holders
		any_vassal = {
			limit = {
				is_playable = no
				capital_holding = { holding_type = temple }
				NOT = { is_government_potential = theocracy_government }
			}
			log = "[This.GetBestName] abdicates due to not being allowed to remain a priest"
			abdicate = yes
		}

		if = {
			limit = {
				capital_holding = { holding_type = temple }
				NOT = { is_government_potential = theocracy_government }
			}
			log = "[This.GetBestName] abdicates due to not being allowed to remain a priest"
			abdicate = yes
		}

		# Capital Conversion
		capital_scope = {
			if = {
				limit = { is_heresy_of = ROOT }
				religion = ROOT
			}
		}

		# Religion Head Crowns
		if = {
			limit = {
				NOT = { has_dlc = "Holy Fury" }
				religion = norse_pagan_reformed
			}
			add_artifact = crown_fylkir
		}
		else_if = {
			limit = { has_religion_feature = religion_temporal_head }

			trigger_switch = {
				on_trigger = religion

				aztec_pagan_reformed	= { add_artifact = crown_aztec_fylkir }
				baltic_pagan_reformed	= { add_artifact = crown_romuva_fylkir }
				bon_pagan_reformed		= { add_artifact = scepter_bon_fylkir }
				finnish_pagan_reformed	= { add_artifact = crown_finnish_fylkir }
				hellenic_pagan_reformed	= { add_artifact = scepter_hellenic_fylkir }
				norse_pagan_reformed	= { add_artifact = crown_fylkir }
				slavic_pagan_reformed	= { add_artifact = crown_slavic_fylkir }
				tengri_pagan_reformed	= { add_artifact = crown_tengri_fylkir }
				west_african_pagan_reformed = { add_artifact = crown_west_african_fylkir }
				zun_pagan_reformed		= { add_artifact = crown_zun_fylkir }
			}
		}

		if = {
			limit = { religion = norse_pagan_reformed }

			set_global_flag = jomsvikings_reformed

			# Holy Order now changes religion
			d_jomsvikings = {
				religion = norse_pagan_reformed

				save_persistent_event_target = {
					name = holy_order_religion
					scope = norse_pagan_reformed
				}

				holder_scope = {
					unsafe_religion = norse_pagan_reformed
				}
			}
		}

		# Opinion boost to new religious head (if any) and Reformer.
		if = {
			limit = {
				has_dlc = "Holy Fury"

				OR = {
					has_religion_feature = religion_theocratic_head
					has_religion_feature = religion_autocephaly
				}
			}

			religion_head = {
				opinion = {
					name = opinion_my_reformer
					who = ROOT
					years = 50
				}
			}
		}

		# If religion being reformed is western paganism, other western pagans are emboldened, facilitating a chain reaction of reformation
		if = {
			limit = {
				OR = {
					religion = baltic_pagan_reformed
					religion = finnish_pagan_reformed
					religion = norse_pagan_reformed
					religion = slavic_pagan_reformed
					religion = tengri_pagan_reformed
					religion = west_african_pagan
				}
			}

			# Apply modifier
			baltic_pagan = {
				if = {
					limit = {
						NOT = { has_flag = has_been_reformed }
					}

					religion_authority = {
						name = pagan_revival
						years = 20
					}
				}
			}

			finnish_pagan = {
				if = {
					limit = {
						NOT = { has_flag = has_been_reformed }
					}

					religion_authority = {
						name = pagan_revival
						years = 20
					}
				}
			}

			norse_pagan = {
				if = {
					limit = {
						NOT = { has_flag = has_been_reformed }
					}

					religion_authority = {
						name = pagan_revival
						years = 20
					}
				}
			}

			slavic_pagan = {
				if = {
					limit = {
						NOT = { has_flag = has_been_reformed }
					}

					religion_authority = {
						name = pagan_revival
						years = 20
					}
				}
			}

			tengri_pagan = {
				if = {
					limit = {
						NOT = { has_flag = has_been_reformed }
					}

					religion_authority = {
						name = pagan_revival
						years = 20
					}
				}
			}

			west_african_pagan = {
				if = {
					limit = {
						NOT = { has_flag = has_been_reformed }
					}

					religion_authority = {
						name = pagan_revival
						years = 20
					}
				}
			}
		}

		# Enable holy order for the reformed religion
		trigger_switch = {
			on_trigger = religion

			tengri_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = SoA.2008
						years = 1
						random = 1460 # 4 years
					}
				}
			}

			west_african_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = SoA.2108
						years = 1
						random = 1460 # 4 years
					}
				}
			}

			slavic_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = SoA.2208
						years = 1
						random = 1460 # 4 years
					}
				}
			}

			baltic_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = SoA.2308
						years = 1
						random = 1460 # 4 years
					}
				}
			}

			finnish_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = SoA.2408
						years = 1
						random = 1460 # 4 years
					}
				}
			}

			aztec_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = SoA.2508
						years = 1
						random = 1460 # 4 years
					}
				}
			}

			zun_pagan_reformed = {
				event_target:pulse_province = {
					province_event = {
						id = CM.4001
						years = 1
						random = 1460 # 4 years
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTA670 # The Reformer

		trigger = { religion = ROOT }

		if = {
			limit = { ai = no }

			chronicle = {
				entry = CHRONICLE_PLAYER_REFORMED_RELIGION
				portrait = [Root.GetID]
			}
		}
	}

	option = {
		name = EVTOPTB670 # Rulers of the old Faith - Accept

		trigger = { is_heresy_of = ROOT } # The old religion has become a heresy of the Reformed one

		# Workaround for automatic usurpation of theocratic characters
		ROOT = {
			religion_scope = {
				save_event_target_as = target_religion
			}
		}

		convert_religion_failsafe_effect = yes

		if = {
			limit = { ai = no }

			chronicle = {
				entry = CHRONICLE_OTHER_REFORMED_PLAYERS_RELIGION
				portrait = [Root.GetID]
			}
		}

		ROOT = {
			show_scope_change = no

			if = {
				limit = { has_religion_feature = religion_no_leader }

				PREV = {
					if = {
						limit = {
							has_religion_feature = religion_no_leader
							ai = yes
						}

						log = "Firing event HF.23016 for [This.GetBestName]"

						character_event = {
							id = HF.23016 # Pick a Pagan religious branch
							days = 20
							random = 20
						}
					}
				}
			}

			trigger_switch = {
				on_trigger = has_religion_feature

				religion_matriarchal = {
					custom_tooltip = {
						text = tooltip_HF23014_A

						PREV = {
							any_demesne_title = {
								add_law = {
									law = enatic_succession
									cooldown = no
									opinion_effect = no
								}

								if = {
									limit = { is_law_potential = status_of_women_4 }

									add_law = {
										law = status_of_women_4
										cooldown = no
										opinion_effect = no
									}
								}
							}

							recalc_succession = yes
						}
					}
				}

				religion_patriarchal = {
					custom_tooltip = {
						text = tooltip_HF23015_A

						PREV = {
							any_demesne_title = {
								add_law = {
									law = agnatic_succession
									cooldown = no
									opinion_effect = no
								}

								if = {
									limit = { is_law_potential = status_of_women_0 }

									add_law = {
										law = status_of_women_0
										cooldown = no
										opinion_effect = no
									}
								}
							}

							recalc_succession = yes
						}
					}
				}

				religion_equal = {
					custom_tooltip = {
						text = tooltip_HF23016_A

						PREV = {
							any_demesne_title = {
								add_law = {
									law = true_cognatic_succession
									cooldown = no
									opinion_effect = no
								}

								if = {
									limit = { is_law_potential = status_of_women_4 }

									add_law = {
										law = status_of_women_4
										cooldown = no
										opinion_effect = no
									}
								}
							}

							recalc_succession = yes
						}
					}
				}

				religion_feature_bon = {
					custom_tooltip = {
						text = tooltip_HF23016_A

						PREV = {
							any_demesne_title = {
								add_law = {
									law = true_cognatic_succession
									cooldown = no
									opinion_effect = no
								}

								if = {
									limit = { is_law_potential = status_of_women_4 }

									add_law = {
										law = status_of_women_4
										cooldown = no
										opinion_effect = no
									}
								}
							}

							recalc_succession = yes
						}
					}
				}
			}
		}

		hidden_effect = {
			# Courtier Conversion
			any_courtier = {
				limit = {
					is_heresy_of = ROOT
					employer = { character = PREV }
				}

				# Workaround for automatic usurpation of theocratic characters
				set_character_flag = convert_abandon_heresy
				convert_religion_failsafe_effect = yes
			}

			# Dynasty Conversion
			any_dynasty_member = {
				limit = {
					is_heresy_of = ROOT
					is_playable = no
				}

				# Workaround for automatic usurpation of theocratic characters
				set_character_flag = convert_abandon_heresy
				convert_religion_failsafe_effect = yes
			}

			# Vassal Conversion
			any_vassal = {
				limit = {
					is_playable = no
					is_heresy_of = ROOT
				}

				# Workaround for automatic usurpation of theocratic characters
				set_character_flag = convert_abandon_heresy
				convert_religion_failsafe_effect = yes
			}

			# Prevent wrong-gendered temple holders
			any_vassal = {
				limit = {
					is_playable = no
					capital_holding = { holding_type = temple }
					NOT = { is_government_potential = theocracy_government }
				}
				log = "[This.GetBestName] abdicates due to not being allowed to remain a priest"
				abdicate = yes
			}

			if = {
				limit = {
					capital_holding = { holding_type = temple }
					NOT = { is_government_potential = theocracy_government }
				}
				log = "[This.GetBestName] abdicates due to not being allowed to remain a priest"
				abdicate = yes
			}

			# Capital Conversion
			capital_scope = {
				if = {
					limit = { is_heresy_of = ROOT }
					religion = ROOT
				}
			}
		}

		ai_chance = {
			factor = 50

			mult_modifier = {
				factor = 5

				any_liege = {
					religion = ROOT
				}
			}

			mult_modifier = {
				factor = 2
				same_realm = ROOT
			}

			mult_modifier = {
				factor = 5
				trait = cynical
			}

			mult_modifier = {
				factor = 10
				dynasty = ROOT
			}

			mult_modifier = {
				factor = 0.1
				trait = zealous
			}

			mult_modifier = {
				factor = 0.5
				trait = content
			}
		}
	}

	option = {
		name = EVTOPTC670 # Rulers of the old Faith - Decline

		trigger = {
			is_heresy_of = ROOT # The old religion has become a heresy of the Reformed one
		}

		if = {
			limit = { ai = no }

			chronicle = {
				entry = CHRONICLE_OTHER_REFORMED_PLAYERS_RELIGION
				portrait = [Root.GetID]
			}
		}

		tooltip = {
			religion = THIS
		}

		ai_chance = {
			factor = 50

			trigger = {
				NOT = { has_landed_title = d_jomsvikings } # Handled in `immediate`
			}

			post_reformation_ruler_conversion_score = yes
		}
	}

	option = {
		name = EVTOPTD670 # Other playable rulers

		trigger = {
			NOR = {
				religion = ROOT
				is_heresy_of = ROOT
			}
		}
	}
}

character_event = {
	id = 671

	is_triggered_only = yes # on_character_convert_religion
	hide_window = yes

	trigger = {
		any_rival = { religion = ROOT }
	}

	immediate = {
		any_rival = {
			limit = { religion = ROOT }
			character_event = { id = 100500 } # Inform rival of conversion
		}
	}
}

####################################################
# Elective Gavelkind Succession:
# Vassal Junior Heir Can Choose Independence
####################################################

character_event = {
	id = 63103
	desc = EVTDESC_63103
	picture = GFX_evt_throne_room

	only_capable = yes
	prisoner = no
	min_age = 16

	is_triggered_only = yes # on_elective_gavelkind_succession

	# has_dlc = "Charlemagne" # CleanSlate: elective gavelkind is not restricted by this DLC

	trigger = {
		top_liege = {
			in_revolt = no
		}
	}

	option = {
		name = EVTOPTA_63103 # Remain a vassal

		ai_chance = {
			factor = 100

			mult_modifier = {
				factor = 2

				opinion = {
					who = FROM
					value >= 25
				}
			}

			mult_modifier = {
				factor = 2

				opinion = {
					who = FROM
					value >= 50
				}
			}

			mult_modifier = {
				factor = 4
				trait = content
			}
		}
	}

	option = {
		name = EVTOPTB_63103 # Go independent

		FROM = {
			character_event = { id = 63104 }
		}

		if = {
			limit = {
				liege = {
					independent = no
				}
			}

			liege = {
				show_scope_change = no

				liege = {
					show_scope_change = no

					set_defacto_vassal = ROOT
				}
			}
		}
		else = {
			set_defacto_liege = THIS
		}

		any_demesne_title = {
			show_scope_change = no

			limit = {
				OR = {
					higher_tier_than = DUKE
					is_primary_holder_title_tier = yes
				}
			}

			add_claim = FROM
		}

		ai_chance = {
			factor = 100

			mult_modifier = {
				factor = 2

				opinion = {
					who = FROM
					value < -25
				}
			}

			mult_modifier = {
				factor = 2

				opinion = {
					who = FROM
					value < -50
				}
			}

			mult_modifier = {
				factor = 2
				trait = ambitious
			}
		}
	}
}

# The liege is notified of the independence
character_event = {
	id = 63104
	desc = EVTDESC_63104
	picture = GFX_evt_emissary

	is_triggered_only = yes
	notification = yes

	ai = no

	option = {
		name = EVTOPTA_63104
	}
}

# Remove patron deity modifiers for Hindu converts
character_event = {
	id = 63105

	hide_window = yes
	is_triggered_only = yes # on_character_convert_religion

	trigger = {
		NOT = { religion = hindu }
	}

	immediate = {
		remove_character_modifier = patron_shiva
		remove_character_modifier = patron_vishnu
		remove_character_modifier = patron_brahma
		remove_character_modifier = patron_kali
		remove_character_modifier = patron_ganesha
		remove_character_modifier = patron_ganga
	}
}

# Safety check event for flag clearace - do_not_disturb etc
character_event = {
	id = CK2.63106

	hide_window = yes
	is_triggered_only = yes # on_yearly_pulse

	has_character_flag = do_not_disturb

	trigger = {
		had_character_flag = {
			flag = do_not_disturb
			years >= 5
		}
	}

	immediate = {
		clr_character_flag = do_not_disturb
	}
}

# BUY_FAVOR_ACCEPT_EVENT =
diploresponse_event = {
	id = 520
	desc = EVTDESC520

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = PERFECT
	}
}

# BUY_FAVOR_DECLINE_EVENT =
diploresponse_event = {
	id = 521
	desc = EVTDESC521

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA521
	}
}

# REQUEST_SUPPORT_ACCEPT_EVENT =
diploresponse_event = {
	id = 522
	desc = EVTDESC522

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = EVTOPTA522
	}
}

# REQUEST_SUPPORT_DECLINE_EVENT =
diploresponse_event = {
	id = 523
	desc = EVTDESC523

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA523
	}
}

# FORM_NON_AGGRESSION_PACT_ACCEPT_EVENT =
diploresponse_event = {
	id = 524
	desc = EVTDESC524

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = EVTOPTA524
	}
}

# FORM_NON_AGGRESSION_PACT_DECLINE_EVENT =
diploresponse_event = {
	id = 525
	desc = EVTDESC525

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA525
	}
}

letter_event = {
	id = 750
	desc = EVTDESC750

	is_triggered_only = yes

	ai = no

	trigger = {
		is_voter = yes
	}

	option = {
		name = EVTOPTA290

		approve_law = FROM
	}

	option = {
		name = EVTOPTB290
	}
}

# ASK_COUNCIL_POSITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 526
	desc = EVTDESC526

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_COUNCIL_POSITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 527
	desc = EVTDESC527

	is_triggered_only = yes

	ai = no

	option = {
		name = OK

		custom_tooltip = { text = EVT527_TOOLTIP }
	}
}

# ASK_REALM_PEACE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 528
	desc = EVTDESC528

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_REALM_PEACE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 529
	desc = EVTDESC529

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# FORCE_JOIN_FACTION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 530
	desc = EVTDESC530

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# FORCE_JOIN_FACTION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 531
	desc = EVTDESC531

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# Realm with designated regent or court physicians inherited by realm that already has one
character_event = {
	id = 532

	hide_window = yes
	is_triggered_only = yes # on_death

	only_rulers = yes

	trigger = {
		OR = {
			AND = {
				has_assigned_minor_title = title_appointed_regent

				current_heir = {
					has_assigned_minor_title = title_appointed_regent
				}
			}

			AND = {
				has_assigned_minor_title = title_court_physician

				current_heir = {
					has_assigned_minor_title = title_court_physician
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				has_assigned_minor_title = title_appointed_regent

				current_heir = {
					has_assigned_minor_title = title_appointed_regent
				}
			}

			random_courtier_or_vassal = {
				limit = { has_minor_title = title_appointed_regent }
				remove_title = title_appointed_regent
			}
		}

		if = {
			limit = {
				has_assigned_minor_title = title_court_physician

				current_heir = {
					has_assigned_minor_title = title_court_physician
				}
			}

			random_courtier_or_vassal = {
				limit = { has_minor_title = title_court_physician }
				remove_title = title_court_physician
			}
		}
	}
}

character_event = {
	id = 533
	hide_window = yes
	is_triggered_only = yes # on_new_holder(_inheritance/usurpation)

	only_rulers = yes

	trigger = {
		FROM = {
			higher_tier_than = DUKE
			is_primary_holder_title = yes
		}

		FROMFROM = {
			any_vassal = {
				leads_faction = faction_powerful_vassal_takeover

				NOT = {
					has_opinion_modifier = {
						name = opinion_replaced_bad_ruler
						who = ROOT
					}
				}
			}
		}
	}

	immediate = {
		FROMFROM = {
			any_vassal = {
				limit = { in_faction = faction_powerful_vassal_takeover }

				opinion = {
					name = opinion_replaced_bad_ruler
					who = ROOT
					years = 2
				}
			}
		}
	}
}

# Crusade/Jihad is invalidated
# ROOT is the target title
# new_character is the Enemy
# FROM is the Pope/Caliph
narrative_event = {
	id = 534
	title = evt_534_NAME
	picture = GFX_evt_battle
	border = GFX_event_narrative_frame_religion

	desc = {
		text = evt_CK2_534_desc_a
		trigger = {
			new_character = {
				religion_group = FROM
			}
		}
	}
	desc = {
		text = evt_534_desc_b
		trigger = {
			new_character = {
				NOT = { religion_group = FROM }
			}
		}
	}

	is_triggered_only = yes # on_crusade_invalid
	major = yes

	ai = no

	trigger = {
		OR = {
			new_character = {
				NOT = { has_landed_title = ROOT }
			}

			trigger_if = {
				limit = { has_global_flag = 4th_crusade_official }

				crusade_target_title = {
					title = k_thrace
				}
				new_character = {
					religion = FROM
					has_landed_title = e_byzantium
				}
			}

			AND = {
				NAND = {
					has_global_flag = 4th_crusade_official
					crusade_target_title = {
						title = k_thrace
					}
					new_character = {
						has_landed_title = e_byzantium
					}
				}

				new_character = {
					religion_group = FROM
				}
			}
		}
	}

	immediate = {
		FROM = {
			if = {
				limit = {
					has_global_flag = 4th_crusade_official
					religion_group = christian
				}

				character_event = { id = HFP.41199 }
			}
		}
	}

	option = {
		name = {
			text = evt_534_opt_a
			trigger = {
				religion_group = FROM

				new_character = {
					religion_group = FROM
				}
			}
		}
		name = {
			text = evt_534_opt_b
			trigger = {
				religion_group = FROM

				new_character = {
					NOT = { religion_group = FROM }
				}
			}
		}
		name = {
			text = evt_534_opt_c
			trigger = {
				NOT = { religion_group = FROM }
			}
		}
	}
}

# ASK_TO_JOIN_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 535
	desc = evt_CK2_535_desc_a

	is_triggered_only = yes
	is_friendly = yes

	ai = no

	option = {
		name = OK
	}
}

# ASK_TO_JOIN_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 536
	desc = evt_CK2_536_desc_a

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# OFFER_CONSORT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 537
	desc = evt_CK2_537_desc_a

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# GIVE_ARTIFACT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 538
	desc = EVTDESC538

	is_triggered_only = yes

	ai = no

	option = {
		name = OK
	}
}

# Fix adventurers turning Tribal land Feudal
character_event = {
	id = 539

	is_triggered_only = yes # on_new_holder(_usurpation)
	hide_window = yes

	only_rulers = yes
	ai = yes

	trigger = {
		is_feudal = yes
	}

	immediate = {
		if = {
			limit = {
				any_realm_province = {
					has_tribal = yes
					held_under_PREV = yes
				}

				NOT = {
					any_realm_province = {
						has_castle = yes
						held_under_PREV = yes
					}
				}
			}

			set_government_type = tribal_government
		}
	}
}

# Preserve player religion if heir has DLC locked religion
character_event = {
	id = 680

	is_triggered_only = yes # on_death
	hide_window = yes

	ai = no

	trigger = {
		is_nomadic = no

		player_heir = {
			# Secret religions are always allowed
			has_safe_religion = no
		}
	}

	immediate = {
		player_heir = {
			religion = ROOT
		}
	}
}

# On-action event: Avoided title revokation, declared independence
character_event = {
	id = 681
	desc = EVTDESC681
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA150
	}
}

# On-action event: Avoided vassal retraction, declared independence
character_event = {
	id = 682
	desc = EVTDESC682
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA150
	}
}

# On-action event: Avoided clan absorb, declared independence
character_event = {
	id = 683
	desc = EVTDESC683
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA150
	}
}

# On-action event: Avoided clan split, declared independence
character_event = {
	id = 684
	desc = EVTDESC684
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	ai = no

	option = {
		name = EVTOPTA150
	}
}

# On-action event: Remove in-hiding trait on imprisonment
character_event = {
	id = 685

	hide_window = yes
	is_triggered_only = yes # on_become_imprisoned_any_reason

	trigger = {
		trait = in_hiding
	}

	immediate = {
		remove_trait = in_hiding
	}
}

character_event = {
	id = 687

	hide_window = yes
	is_triggered_only = yes # on_war_ended_victory

	trigger = {
		FROM = {
			ai = no
		}

		has_character_flag = great_conqueror
		is_ironman = yes
		is_shattered_world = yes
	}

	immediate = {
		FROM = {
			set_character_flag = achievement_not_so_great
		}
	}
}

character_event = {
	id = 688

	hide_window = yes
	is_triggered_only = yes # on_war_ended_defeat

	ai = no

	trigger = {
		is_ironman = yes
		is_shattered_world = yes

		FROM = {
			has_character_flag = great_conqueror
		}
	}

	immediate = {
		set_character_flag = achievement_not_so_great
	}
}


# Scripted default elective token setup
character_event = {
	id = CK2.689

	hide_window = yes
	is_triggered_only = yes # on_startup

	only_rulers = yes

	immediate = {
		any_demesne_title = {
			if = {
				limit = { has_law = succ_elective_gavelkind }
				elective_voting_rules = elective_gavelkind
			}
			else_if = {
				limit = { has_law = succ_tanistry }
				elective_voting_rules = tanistry
			}
			else_if = {
				limit = { has_law = succ_feudal_elective }
				elective_voting_rules = feudal_elective
			}
		}
	}
}

# Reformed religion head title setup
character_event = {
	id = CK2.690

	hide_window = yes

	is_triggered_only = yes # on_startup

	trigger = {
		is_save_game = yes
		controls_religion = yes
		OR = {
			has_religion_feature = religion_theocratic_head
			has_religion_feature = religion_autocephaly
			AND = {
				is_reformed_religion = yes
				has_religion_features = no
				NOT = { religion = norse_pagan_reformed }
			}
		}
	}

	immediate = {
		trigger_switch = {
			on_trigger = religion

			norse_pagan_reformed	= { d_norse_pagan_reformed = { save_event_target_as = religious_head_title } }
			tengri_pagan_reformed	= { d_tengri_pagan_reformed = { save_event_target_as = religious_head_title } }
			baltic_pagan_reformed	= { d_baltic_pagan_reformed = { save_event_target_as = religious_head_title } }
			finnish_pagan_reformed	= { d_finnish_pagan_reformed = { save_event_target_as = religious_head_title } }
			aztec_pagan_reformed	= { d_aztec_pagan_reformed = { save_event_target_as = religious_head_title } }
			slavic_pagan_reformed	= { d_slavic_pagan_reformed = { save_event_target_as = religious_head_title } }
			west_african_pagan_reformed = { d_west_african_pagan_reformed = { save_event_target_as = religious_head_title } }
			zun_pagan_reformed		= { d_zun_pagan_reformed = { save_event_target_as = religious_head_title } }
			bon_pagan_reformed		= { d_bon_pagan_reformed = { save_event_target_as = religious_head_title } }
			hellenic_pagan_reformed	= { k_hellenic_pagan_reformed = { save_event_target_as = religious_head_title } }
		}

		set_title_landless = {
			title = event_target:religious_head_title
			status = yes
		}
	}
}

# Switch succession laws for viceroyalties who convert religion
# Doesn't happen automatically and cannot be done manually due to hardcoding around viceroyalties
character_event = {
	id = CK2.691

	is_triggered_only = yes # on_character_convert_religion
	hide_window = yes

	only_rulers = yes

	trigger = {
		any_demesne_title = {
			is_vice_royalty = yes
			title = succ_law_title

			trigger_if = {
				limit = { has_law = succ_primogeniture }
				NOT = { is_law_potential = succ_primogeniture }
			}
			trigger_else = {
				has_law = succ_turkish_succession
				NOT = { is_law_potential = succ_turkish_succession }
			}
		}
	}

	immediate = {
		any_demesne_title = {
			limit = {
				is_vice_royalty = yes
				title = succ_law_title
			}

			if = {
				limit = {
					has_law = succ_primogeniture
					NOT = { is_law_potential = succ_primogeniture }
				}

				add_law = succ_turkish_succession
				log = "[This.GetID] - [This.GetFullBaseName] was changed from Primogeniture to Open because [Root.GetBestName] converted from [From.GetName] to [Root.Religion.GetName]"
			}
			else_if = {
				limit = {
					has_law = succ_turkish_succession
					NOT = { is_law_potential = succ_turkish_succession }
				}

				add_law = succ_primogeniture
				log = "[This.GetID] - [This.GetFullBaseName] was changed from Open to Primogeniture because [Root.GetBestName] converted from [From.GetName] to [Root.Religion.GetName]"
			}
		}
	}
}