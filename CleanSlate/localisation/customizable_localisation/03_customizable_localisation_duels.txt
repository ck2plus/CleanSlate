### DUEL SYSTEM KEYS ###
defined_text = {
	name = GetDuelWeapon

	# For future reference:
	# This can be updated with more culture/region/religion specific variants

	# Example:
#	text = {
#		localisation_key = String_sword
#		trigger = {
#			has_character_flag = weapon_is_sword
#			NOT = { has_character_flag = mock_duel }
#		}
#	}

	text = {
		localisation_key = String_long_sword
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
			NOT = { trait = one_handed }
		}
	}
	text = {
		localisation_key = String_short_sword
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
		}
	}
	text = {
		localisation_key = String_great_sword
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
			NOT = { trait = frail }
			NOT = { trait = one_handed }
		}
	}
	text = {
		localisation_key = String_bastard_sword
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
		}
	}
	text = {
		localisation_key = String_jian_sword
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
			culture = han
			culture = tangut
		}
	}
	text = {
		localisation_key = String_jewelled_sword
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
			higher_tier_than = KING
		}
	}
	text = {
		localisation_key = String_dagger
		trigger = {
			has_character_flag = weapon_is_sword
			NOT = { has_character_flag = mock_duel }
		}
	}
	text = {
		localisation_key = String_wooden_sword
		trigger = {
			has_character_flag = weapon_is_sword
			has_character_flag = mock_duel
		}
	}
	text = {
		localisation_key = String_scimitar
		trigger = {
			has_character_flag = weapon_is_scimitar
		}
	}
	text = {
		localisation_key = String_axe
		trigger = {
			has_character_flag = weapon_is_axe
		}
	}
	text = {
		localisation_key = String_battle_axe
		trigger = {
			has_character_flag = weapon_is_axe
			NOR = {
				trait = one_handed
				trait = frail
				trait = weak
			}
			has_character_flag = is_battlefield_duel
		}
	}
	text = {
		localisation_key = String_mace
		trigger = {
			has_character_flag = weapon_is_mace
		}
	}
	text = {
		localisation_key = String_flail
		trigger = {
			has_character_flag = weapon_is_mace
		}
	}
	text = {
		localisation_key = String_flanged_mace
		trigger = {
			has_character_flag = weapon_is_mace
		}
	}
	text = {
		localisation_key = String_maul
		trigger = {
			has_character_flag = weapon_is_mace
		}
	}
	text = {
		localisation_key = String_morning_star
		trigger = {
			has_character_flag = weapon_is_mace
		}
	}
	text = {
		localisation_key = String_wooden_staff
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = weapon_is_staff
		}
	}
	text = {
		localisation_key = String_wooden_club
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = weapon_is_staff
		}
	}
	text = {
		localisation_key = String_practice_spear
		trigger = {
			has_character_flag = mock_duel
			has_character_flag = weapon_is_spear
		}
	}
	text = {
		localisation_key = String_spear
		trigger = {
			has_character_flag = weapon_is_spear
			NOT = { has_character_flag = mock_duel }
		}
	}
	text = {
		localisation_key = String_bare_hands
		trigger = {
			has_character_flag = weapon_is_hand
		}
	}
	text = {
		localisation_key = String_gun
		trigger = {
			is_using_gun_trigger = yes
		}
	}
	text = {
		localisation_key = String_my_artifact_weapon_1
		trigger = {
			event_target:dueling_weapon_1 = {
				artifact_owner = {
					character = PREVPREV # Checks that you own the FIRST saved artifact weapon (means you are combatant_1)
				}
			}
		}
	}
	text = {
		localisation_key = String_my_artifact_weapon_2
		trigger = {
			event_target:dueling_weapon_2 = {
				artifact_owner = {
					character = PREVPREV # Checks that you own the SECOND saved artifact weapon (means you are combatant_2)
				}
			}
		}
	}
	fallback_text = {
		localisation_key = String_sword
	}
}

defined_text = {
	name = GetBodyPartInjured

	text = {
		localisation_key = String_eye
		trigger = {
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
		}
	}
	text = {
		localisation_key = String_hand
		trigger = { has_character_flag = injury_hand }
	}
	text = {
		localisation_key = String_leg
		trigger = { has_character_flag = injury_leg }
	}
	text = {
		localisation_key = String_face
		trigger = { has_character_flag = injury_face }
	}
	text = {
		localisation_key = String_chest
		trigger = {
			has_character_flag = injury_mangled_body
			has_character_flag = injury_maimed
		}
	}
	text = {
		localisation_key = String_body
		trigger = { has_character_flag = injury_maimed }
	}
	text = {
		localisation_key = String_shoulder
		trigger = { has_character_flag = injury_could_be_lethal }
	}
	fallback_text = {
		localisation_key = String_chest
	}
}

defined_text = {
	name = GetWeaponInjuringBlow #Checked on the character target of the injury (i.e wounded party)

	# Severely Injured specials...
	text = {
		localisation_key = String_severely_tear_body_part
		trigger = {
			event_target:root_character = { is_using_sharp_weapon_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_severely_break_body_part
		trigger = {
			event_target:root_character = { is_using_blunt_weapon_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_severely_injure_eye
		trigger = {
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = { #Gun version
		localisation_key = String_severely_shot
		trigger = {
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			event_target:root_character = { is_using_gun_trigger = yes }
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = { #Gun version (eyes)
		localisation_key = String_severely_shot_eyes
		trigger = {
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			event_target:root_character = { is_using_gun_trigger = yes }
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}

	# "Regular" injuries inflicted...
	text = {
		localisation_key = String_cut_body_part_off
		trigger = {
			event_target:root_character = { is_using_sharp_weapon_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_cut_their_body_part_out
		trigger = {
			event_target:root_character = { is_using_sharp_weapon_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_sever_their_body_part_from_body
		trigger = {
			event_target:root_character = {
				is_using_sharp_weapon_trigger = yes
				NOR = {
					has_character_flag = weapon_is_spear

					event_target:dueling_weapon_1 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}

					event_target:dueling_weapon_2 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
				}
			}
			NOR = { # Can't be "severed" or removed without *death*
				has_character_flag = injury_both_eyes
				has_character_flag = injury_eye
				has_character_flag = injury_face
				has_character_flag = injury_maimed
				has_character_flag = injury_mangled_body
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills  # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_crush_their_body_part
		trigger = {
			event_target:root_character = { is_using_blunt_weapon_trigger = yes }
			NOR = { # can't be "crushed" without *death*
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}

	text = {
		localisation_key = String_pierce_body_part_through
		trigger = {
			event_target:root_character = { is_using_piercing_weapon_trigger = yes }
			NOR = { # can't be "pierced" without *death*
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_take_body_part_out
		trigger = {
			event_target:root_character = { is_using_piercing_weapon_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_stick_body_part_out
		trigger = {
			event_target:root_character = { is_using_piercing_weapon_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_crack_bones_of_body_part
		trigger = {
			event_target:root_character = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					has_character_flag = weapon_is_hand
				}
			}
			NOR = { #have no bones to break
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_slam_into_their_face
		trigger = {
			event_target:root_character = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					has_character_flag = weapon_is_hand
				}
			}
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_smack_hard_across_body_part
		trigger = {
			event_target:root_character = {
				has_character_flag = weapon_is_staff
				has_character_flag = weapon_is_spear
			}
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = { #Gun version
		localisation_key = String_shot_not_lethal
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = { #Gun version (eyes)
		localisation_key = String_shot_not_lethal_eyes
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}

	# Mild injuries...
	text = {
		localisation_key = String_slam_their_head
		trigger = {
			event_target:root_character = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					is_using_sharp_weapon_trigger = yes
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
				has_character_flag = injury_leg
				has_character_flag = injury_hand
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_slam_their_limb #"whack"
		trigger = {
			event_target:root_character = {
				is_using_blunt_weapon_trigger = yes
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_leg
				has_character_flag = injury_hand
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_slam_their_body
		trigger = {
			event_target:root_character = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					is_using_sharp_weapon_trigger = yes
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
				has_character_flag = injury_could_be_lethal
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_crack_ribs
		trigger = {
			event_target:root_character = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					is_using_sharp_weapon_trigger = yes
					has_character_flag = weapon_is_hand
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_smack_across_body_part
		trigger = {
			event_target:root_character = { has_character_flag = weapon_is_staff }
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_trip_them
		trigger = {
			event_target:root_character = {
				OR = {
					has_character_flag = weapon_is_staff
					has_character_flag = weapon_is_spear
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_hit_them_in_body_part
		trigger = {
			event_target:root_character = { has_character_flag = weapon_is_hand }
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_hit_them_in_the_face
		trigger = {
			event_target:root_character = { has_character_flag = weapon_is_hand }
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_knock_them_out
		trigger = {
			event_target:root_character = {
				OR = {
					has_character_flag = weapon_is_hand
					has_character_flag = weapon_is_sword
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = { # Gun version
		localisation_key = String_shoot_mild
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}

	text = { # Gun version
		localisation_key = String_shoot_them_dead #should be *very* rare (removes limb, fetched key)
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			OR = { #And the shot hits one of these..
				has_character_flag = injury_leg
				has_character_flag = injury_hand
			}
			NOR = {
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die
			}
		}
	}

	# Actually DEADLY injuries...
	text = {
		localisation_key = String_pierce_body_part_through
		trigger = {
			event_target:root_character = { is_using_piercing_weapon_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
			}
		}
	}
	text = {
		localisation_key = String_crush_their_head
		trigger = {
			event_target:root_character = { is_using_blunt_weapon_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
		}
	}
	text = {
		localisation_key = String_put_the_spear_through_their_head
		trigger = {
			event_target:root_character = {
				is_using_spear_weapon_trigger = yes
			}
			has_character_flag = injury_kills # This char is set to *die*
		}
	}
	text = {
		localisation_key = String_sever_their_head_from_their_body
		trigger = {
			event_target:root_character = {
				is_using_sharp_weapon_trigger = yes
				NOR = {
					has_character_flag = weapon_is_spear
					event_target:dueling_weapon_1 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
					event_target:dueling_weapon_2 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
				}
			}
			has_character_flag = injury_kills # This char is set to *die*
		}
	}
	text = { # Gun version
		localisation_key = String_shoot_them_dead # killing shots, basically (fetches *vital* body parts injured)
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
			OR = { # And the shot hits one of these..
				has_character_flag = injury_maimed # prints: chest
				has_character_flag = injury_mangled_body # prints: chest
				has_character_flag = injury_eye
				has_character_flag = injury_eyes
			}
			NOR = {
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = mildly_injured # this is *not* a mild injury
			}
		}
	}
	text = { #Gun version (inverted version of the above entry)
		localisation_key = String_shoot_them_actually_dead #killing shots, basically (fetches *vital* body parts injured)
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
			NOR = { # And the shot hits one of these..
				has_character_flag = injury_maimed # prints: chest
				has_character_flag = injury_mangled_body # prints: chest
				has_character_flag = injury_eye
				has_character_flag = injury_eyes
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = mildly_injured # this is *not* a mild injury
			}
		}
	}
	fallback_text = {
		localisation_key = String_injure_them # String_hit_them_in_body_part if you don't find problem?
	}
}

defined_text = {
	name = GetWeaponInjuringBlowOnMe

	# Severely Injured specials...
	text = {
		localisation_key = String_severely_tear_my_body_part
		trigger = {
			event_target:other_combatant = { is_using_sharp_weapon_trigger = yes }
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_severely_break_my_body_part
		trigger = {
			event_target:other_combatant = { is_using_blunt_weapon_trigger = yes }
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_severely_injure_my_eye
		trigger = {
			has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}

	#"Regular" injuries inflicted...
	text = {
		localisation_key = String_cut_my_body_part_off
		trigger = {
			event_target:other_combatant = { is_using_sharp_weapon_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_cut_my_body_part_out
		trigger = {
			event_target:other_combatant = { is_using_sharp_weapon_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_sever_my_body_part_from_body
		trigger = {
			event_target:other_combatant = {
				is_using_sharp_weapon_trigger = yes
				NOR = {
					has_character_flag = weapon_is_spear
					event_target:dueling_weapon_1 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
					event_target:dueling_weapon_2 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
				}
			}
			NOR = {
				has_character_flag = injury_both_eyes
				has_character_flag = injury_eye
				has_character_flag = injury_face
				has_character_flag = injury_maimed
				has_character_flag = injury_mangled_body
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_crush_my_body_part
		trigger = {
			event_target:other_combatant = { is_using_blunt_weapon_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_pierce_my_body_part_through
		trigger = {
			event_target:other_combatant = { is_using_piercing_weapon_trigger = yes }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_take_my_body_part_out
		trigger = {
			event_target:other_combatant = { is_using_piercing_weapon_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_stick_my_body_part_out
		trigger = {
			event_target:other_combatant = { is_using_piercing_weapon_trigger = yes }
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}

	text = {
		localisation_key = String_slam_into_my_face
		trigger = {
			event_target:other_combatant = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					has_character_flag = weapon_is_hand
					is_using_sharp_weapon_trigger = yes
				}
			}
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
			}
			NOR = {
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_smack_hard_across_my_body_part
		trigger = {
			event_target:other_combatant = { has_character_flag = weapon_is_staff }
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}

	# Mild injuries...
	text = {
		localisation_key = String_crack_bones_of_my_body_part
		trigger = {
			event_target:other_combatant = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					has_character_flag = weapon_is_hand
				}
			}
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face

				# Could be both mildly and actually injured
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_slam_my_limb #"whack"
		trigger = {
			event_target:other_combatant = {
				is_using_blunt_weapon_trigger = yes
			}
			OR = {
				has_character_flag = mildly_injured
				has_character_flag = injury_leg
				has_character_flag = injury_hand
			}

			# Could be both mildly and actually injured
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_slam_my_head
		trigger = {
			event_target:other_combatant = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					is_using_sharp_weapon_trigger = yes
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
				has_character_flag = injury_leg
				has_character_flag = injury_hand
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_slam_my_body
		trigger = {
			event_target:other_combatant = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					is_using_sharp_weapon_trigger = yes
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
				has_character_flag = injury_could_be_lethal #"shoulder"
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_crack_my_ribs
		trigger = {
			event_target:other_combatant = {
				OR = {
					is_using_blunt_weapon_trigger = yes
					has_character_flag = weapon_is_hand
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_smack_across_my_body_part
		trigger = {
			event_target:other_combatant = { has_character_flag = weapon_is_staff }
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_trip_me
		trigger = {
			event_target:other_combatant = {
				OR = {
					has_character_flag = weapon_is_staff
					has_character_flag = weapon_is_spear
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_hit_me_in_body_part
		trigger = {
			event_target:other_combatant = { has_character_flag = weapon_is_hand }
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}
	text = {
		localisation_key = String_hit_me_in_the_face
		trigger = {
			event_target:other_combatant = { has_character_flag = weapon_is_hand }
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
				has_character_flag = injury_face
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = {
		localisation_key = String_knock_me_out
		trigger = {
			event_target:other_combatant = {
				OR = {
					has_character_flag = weapon_is_hand
					has_character_flag = weapon_is_sword
				}
			}
			has_character_flag = mildly_injured # only adds some kind of bruises
			OR = {
				has_character_flag = injury_mangled_body
				has_character_flag = injury_maimed
			}
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}
	text = { # Gun version
		localisation_key = String_shoot_me_mild
		trigger = {
			OR = {
				has_character_flag = injury_eye
				has_character_flag = injury_both_eyes
			}
			event_target:other_combatant = { is_using_gun_trigger = yes }
			has_character_flag = mildly_injured # only adds some kind of bruises
			NOT = { has_character_flag = injury_kills } # don't trigger if this char is set to *die*
		}
	}

	text = { # Gun version
		localisation_key = String_shoot_me_dead # should be *very* rare (removes limb, fetched key)
		trigger = {
			event_target:root_character = { is_using_gun_trigger = yes }
			OR = { # And the shot hits one of these..
				has_character_flag = injury_leg
				has_character_flag = injury_hand
			}
			NOR = {
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = mildly_injured # this is *not* a mild injury
				has_character_flag = injury_kills # don't trigger if this char is set to *die*
			}
		}
	}

	# Actually DEADLY injuries...
	text = {
		localisation_key = String_sever_my_head_from_my_body
		trigger = {
			event_target:other_combatant = {
				is_using_sharp_weapon_trigger = yes
				NOR = {
					has_character_flag = weapon_is_spear
					event_target:dueling_weapon_1 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
					event_target:dueling_weapon_2 = {
						has_artifact_flag = spear
						artifact_owner = {	character = PREVPREV }
					}
				}
			}
			has_character_flag = injury_kills # This char is set to *die*
		}
	}
	text = {
		localisation_key = String_crush_my_head
		trigger = {
			event_target:other_combatant = { is_using_blunt_weapon_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
		}
	}
	text = {
		localisation_key = String_put_their_spear_through_my_head
		trigger = {
			event_target:other_combatant = {
				is_using_spear_weapon_trigger = yes
			}
			has_character_flag = injury_kills
		}
	}
	text = { # Gun version
		localisation_key = String_shoot_me_dead # killing shots, basically (fetches *vital* body parts injured)
		trigger = {
			event_target:other_combatant = { is_using_gun_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
			OR = { # And the shot hits one of these..
				has_character_flag = injury_maimed # prints: chest
				has_character_flag = injury_mangled_body # prints: chest
				has_character_flag = injury_eye
				has_character_flag = injury_eyes
			}
			NOT = { has_character_flag = severely_injured } # does not add a maimed trait (only "Severely Injured")
			NOT = { has_character_flag = mildly_injured } # this is *not* a mild injury
		}
	}
	text = { # Gun version (inverted version of the above entry)
		localisation_key = String_shoot_me_actually_dead # killing shots, basically (fetches *vital* body parts injured)
		trigger = {
			event_target:other_combatant = { is_using_gun_trigger = yes }
			has_character_flag = injury_kills # This char is set to *die*
			NOR = { # And the shot hits one of these..
				has_character_flag = injury_maimed # prints: chest
				has_character_flag = injury_mangled_body # prints: chest
				has_character_flag = injury_eye
				has_character_flag = injury_eyes
				has_character_flag = severely_injured # does not add a maimed trait (only "Severely Injured")
				has_character_flag = mildly_injured # this is *not* a mild injury
			}
		}
	}

	fallback_text = {
		localisation_key = String_injure_me # String_hit_me_in_body_part? If you don't find source of problem
	}
}

defined_text = {
	name = GetWeaponSwinging
	use_first_valid = yes

	text = {
		localisation_key = string_bludgeoning
		trigger = { is_using_blunt_weapon_trigger = yes }
	}
	text = {
		localisation_key = string_cutting
		trigger = { is_using_sharp_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_piercing
		trigger = { is_using_piercing_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_piercing
		trigger = { is_using_spear_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_shooting
		trigger = { is_using_gun_trigger = yes }
	}
	fallback_text = {
		localisation_key = string_cutting
	}
}

defined_text = {
	name = GetDuelType

	text = {
		localisation_key = String_sparring_match
		trigger = { has_character_flag = mock_duel }
	}
	text = {
		localisation_key = String_demonstration_duel
		trigger = { has_character_flag = mock_duel }
	}
	text = {
		localisation_key = String_duel_for_honor
		trigger = {
			NOT = { has_character_flag = deadly_duel@PREV }
		}
	}
	text = {
		localisation_key = String_duel_to_the_death
		trigger = {
			has_character_flag = deadly_duel@PREV
			NOT = { has_character_flag = mock_duel }
		}
	}
	text = {
		localisation_key = String_fight_for_glory
	}
	fallback_text = {
		localisation_key = String_duel
	}
}

defined_text = {
	name = GetClaimDuelTitle
	use_first_valid = yes

	text = {
		localisation_key = String_for_specific_title
		trigger = {
			event_target:combatant_1 = {
				has_character_flag = wants_single_title_from@event_target:combatant_2
			}
		}
	}
	text = {
		localisation_key = String_for_all_titles
		trigger = {
			event_target:combatant_1 = {
				has_character_flag = wants_multiple_titles_from@event_target:combatant_2
			}
		}
	}
	fallback_text = {
		localisation_key = String_A_Challenge
	}
}

defined_text = {
	name = GetDuelWinningConditions # "until..."


	text = {
		localisation_key = String_blood_is_drawn
		trigger = {
			has_character_flag = mock_duel
		}
	}
	text = {
		localisation_key = String_one_of_us_lay_dead
		trigger = {
			NOT = { has_character_flag = mock_duel }
			has_character_flag = deadly_duel
		}
	}
	text = {
		localisation_key = String_only_one_of_us_remain_standing
		trigger = {
			NOT = { has_character_flag = mock_duel }
			has_character_flag = deadly_duel
		}
	}
	text = {
		localisation_key = String_one_of_us_yields_from_injury
	}
	fallback_text = {
		localisation_key = String_the_heavens_are_satisfied
	}
}

defined_text = {
	name = GetDuelWeakness # "Considering the [Root.GetDuelWeakness] of §Y[Root.GetTitledFirstName]§![...]"

	text = {
		trigger = {
			is_senior_age_trigger = yes
			is_elder_age_trigger = no
		}
		localisation_key = String_age
	}
	text = {
		localisation_key = String_venerable_age
		trigger = {
			is_elder_age_trigger = yes
		}
	}
	text = {
		localisation_key = String_young_age
		trigger = {
			is_adult = no
		}
	}
	text = {
		localisation_key = String_very_young_age
		trigger = {
			age < 5
		}
	}
	text = {
		localisation_key = String_physical_condition
		trigger = {
			OR = {
				has_injury_trigger = yes
				has_medium_disability_trigger = yes
			}
		}
	}
	text = {
		localisation_key = String_unfortunate_physical_condition
		trigger = {
			has_severe_disability_trigger = yes
		}
	}
	text = {
		localisation_key = String_very_poor_health
		trigger = {
			OR = {
				AND = { # Either you have a *serious* disease that you have NOT been treated *well* for...
					character_disease_trigger = yes
					well_treated_for_disease_trigger = no
				}
				AND = { # Or, you have ANY disease, which you have been *badly* treated for...
					is_ill = yes
					poorly_treated_for_disease_trigger = yes # should exclude lovers_pox (as it doesn't get treated)
				}
			}
		}
	}
	text = {
		localisation_key = String_poor_health
		trigger = {
			OR = { # You have an untreated disease (lovers_pox doesn't count)
				character_disease_trigger = yes

				# lovers_pox excluded
				trait = scurvy
				trait = dancing_plague
				trait = ill
				trait = leper
			}
			poorly_treated_for_disease_trigger = no
			well_treated_for_disease_trigger = no
		}
	}
	fallback_text = {
		localisation_key = String_physical_condition
	}
}

# "As §Y[This.GetTitledFirstName]§! is a [GetDuelNormbreakingReason], this challenge is widely frowned upon."
defined_text = {
	name = GetDuelNormbreakingReason

	text = {
		trigger = {
			is_female = yes
			is_priest = no
		}
		localisation_key = String_woman
	}
	text = {
		trigger = {
			is_priest = yes
			is_member_of_any_warrior_lodge_trigger = no
			event_target:combatant_1 = { NOT = { religion_group = pagan_group } }
		}
		localisation_key = String_priest_title
	}
	text = {
		trigger = {
			is_female = yes
			is_priest = yes
			event_target:combatant_1 = { NOT = { religion_group = pagan_group } }
			is_member_of_roots_warrior_lodge_trigger = no

			# FROM and ROOT do NOT both have gender equality in some form
			NAND = {
				OR = {
					trait = brave
					gender_equality_trigger = yes
					religion_group = pagan_group
					is_nomadic = yes
					religion = buddhist
					religion = bogomilist
				}
				event_target:combatant_1 = { # Same as "FROM" in this case
					OR = {
						gender_equality_trigger = yes
						religion_group = pagan_group
						is_nomadic = yes
						religion = buddhist
						religion = bogomilist
					}
				}
			}
		}
		localisation_key = String_priest_woman
	}
	fallback_text = {
		localisation_key = String_woman
	}
}

defined_text = {
	name = GetClumsilyElegantly # Used in duels

	text = {
		localisation_key = String_clumsily # bad combat_rating
		trigger = { duelist_skill_is_low_group_trigger = yes }
	}
	text = {
		localisation_key = String_vigorously # great combat_rating
		trigger = { duelist_skill_is_medium_group_trigger = yes }
	}
	text = {
		localisation_key = String_elegantly # great combat_rating
		trigger = { duelist_skill_is_high_group_trigger = yes }
	}
	text = {
		localisation_key = String_expertly # great combat_rating
		trigger = { duelist_skill_is_high_group_trigger = yes }
	}
	fallback_text = {
		localisation_key = String_slowly
	}
}
defined_text = {
	name = GetButAndYet # Used in combination with GetClumsilyElegantly

	text = {
		localisation_key = String_and # bad combat_rating
		trigger = { duelist_skill_is_low_group_trigger = yes }
	}
	text = {
		localisation_key = String_but # great combat_rating
		trigger = { duelist_skill_is_high_group_trigger = yes }
	}
	text = {
		localisation_key = String_yet # great combat_rating
		trigger = { duelist_skill_is_high_group_trigger = yes }
	}
	fallback_text = {
		localisation_key = String_yet
	}
}
defined_text = {
	name = GetClaimDuelDemand # Used in claim duels
	use_first_valid = yes

	text = {
		localisation_key = String_forfeit_claims_1
		trigger = { character = event_target:combatant_1 }
	}
	text = {
		localisation_key = String_forfeit_claims_2
	}
}
defined_text = {
	name = GetForgiveReject # Used in claim duels outcomes
	use_first_valid = yes

	text = {
		localisation_key = String_takes_my_hand
		trigger = { has_character_flag = they_were_nice_about_it }
	}
	text = {
		localisation_key = String_spits_in_my_face
		trigger = { has_character_flag = they_were_mean_about_it }
	}
}

defined_text = {
	name = GetBenevolentTrait # Used in claim duels outcomes
	use_first_valid = yes

	text = {
		localisation_key = charitable
		trigger = { trait = charitable }
	}
	text = {
		localisation_key = temperate
		trigger = { trait = temperate }
	}
	text = {
		localisation_key = patient
		trigger = { trait = patient }
	}
	text = {
		localisation_key = kind
		trigger = { trait = kind }
	}
	text = {
		localisation_key = humble
		trigger = { trait = humble }
	}
	text = {
		localisation_key = trusting
		trigger = { trait = trusting }
	}
}

defined_text = {
	name = GetMalevolentTrait # Used in claim duels outcomes
	use_first_valid = yes

	text = {
		localisation_key = deceitful
		trigger = { trait = deceitful }
	}
	text = {
		localisation_key = cruel
		trigger = { trait = cruel }
	}
	text = {
		localisation_key = arbitrary
		trigger = { trait = arbitrary }
	}
	text = {
		localisation_key = wroth
		trigger = { trait = wroth }
	}
	text = {
		localisation_key = envious
		trigger = { trait = envious }
	}
	text = {
		localisation_key = cynical
		trigger = { trait = cynical }
	}
	text = {
		localisation_key = proud
		trigger = { trait = proud }
	}
	text = {
		localisation_key = paranoid
		trigger = { trait = paranoid }
	}
	text = {
		localisation_key = possessed
		trigger = { trait = possessed }
	}
	text = {
		localisation_key = lunatic
		trigger = { trait = lunatic }
	}
}

defined_text = { # Only cares about YOUR weapons, but needs "other_combatant" for "her/his"
	name = GetKillingBlow # Used in duels

	text = {
		localisation_key = String_plunge_weapon_through_their_chest
		trigger = { is_using_piercing_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_bury_weapon_in_their_chest
		trigger = { is_using_sharp_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_push_my_weapon_into_their_chest
		trigger = { is_using_blunt_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_shoot_my_gun
		trigger = { is_using_gun_trigger = yes }
	}
	fallback_text = {
		localisation_key = String_strike_at_their_neck
	}
}

defined_text = { # Only cares about YOUR weapons, but needs "other_combatant" for "her/his"
	name = GetKillingBlowOnMe # Used in duels

	text = {
		localisation_key = String_bury_weapon_in_my_chest
		trigger = {
			event_target:other_combatant = { is_using_sharp_weapon_trigger = yes }
		}
	}
	text = {
		localisation_key = String_push_their_weapon_into_my_chest
		trigger = {
			event_target:other_combatant = { is_using_blunt_weapon_trigger = yes }
		}
	}
	text = {
		localisation_key = String_plunge_weapon_through_my_chest
		trigger = {
			event_target:other_combatant = { is_using_piercing_weapon_trigger = yes }
		}
	}
	text = {
		localisation_key = String_shoot_their_gun
		trigger = {
			event_target:other_combatant = { is_using_gun_trigger = yes }
		}
	}
	fallback_text = {
		localisation_key = String_strike_at_my_neck
	}
}

defined_text = {
	name = GetKillingBlowOnMeShort # Used in duels (present tense!)
	use_first_valid = yes

	text = {
		localisation_key = String_killing_blow_piercing_on_me
		trigger = {
			event_target:other_combatant = { is_using_piercing_weapon_trigger = yes }
		}
	}
	text = {
		localisation_key = String_killing_blow_sharp_on_me
		trigger = {
			event_target:other_combatant = { is_using_sharp_weapon_trigger = yes }
		}
	}
	text = {
		localisation_key = String_killing_blow_blunt_on_me
		trigger = {
			event_target:other_combatant = { is_using_blunt_weapon_trigger = yes }
		}
	}
	text = {
		localisation_key = String_shoot_my_gun_short
		trigger = {
			event_target:other_combatant = { is_using_gun_trigger = yes }
		}
	}
	fallback_text = {
		localisation_key = String_killing_blow_sharp_on_me
	}
}

# Used in duels (present tense!) "I [other_combatant.GetKillingBlowShort]"
defined_text = {
	name = GetKillingBlowShort
	use_first_valid = yes

	text = {
		localisation_key = String_killing_blow_piercing_on_them
		trigger = { is_using_piercing_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_killing_blow_sharp_on_them
		trigger = { is_using_sharp_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_killing_blow_blunt_on_them
		trigger = { is_using_blunt_weapon_trigger = yes }
	}
	text = {
		localisation_key = String_shoot_them_short
		trigger = { is_using_gun_trigger = yes }
	}
	fallback_text = {
		localisation_key = String_killing_blow_sharp_on_them
	}
}

# A way to describe the final fight of this duelist. Note: past tense!
# for future refence: if dead, PCR is lost life data, so this does not work perfectly in MP
# Example: "<She/He> was flailing miserably"
defined_text = {
	name = GetOnCombatDeathDesc

	text = {
		trigger = { is_the_worst_duelist_trigger = yes }
		localisation_key = string_flailing_miserably
	}
	text = {
		trigger = { is_terrible_duelist_trigger = yes }
		localisation_key = string_cut_down_with_ease
	}
	text = {
		trigger = { is_bad_duelist_trigger = yes }
		localisation_key = string_resisted_bravely
	}
	text = {
		trigger = { is_ok_duelist_trigger = yes }
		localisation_key = string_took_a_blow_to_the_head
	}
	text = {
		trigger = {
			is_decent_duelist_trigger = yes
			event_target:home_liege = {
				NOT = { character = ROOT }
			}
		}
		localisation_key = string_could_have_made_it_A
	}
	text = {
		trigger = {
			is_decent_duelist_trigger = yes
			event_target:home_liege = {
				character = ROOT
			}
		}
		localisation_key = string_could_have_made_it_B
	}
	text = {
		trigger = { is_good_duelist_trigger = yes }
		localisation_key = string_put_up_a_fight
	}
	text = {
		trigger = { is_great_duelist_trigger = yes }
		localisation_key = string_dominated_the_battlefield
	}
	text = {
		trigger = { is_fantastic_duelist_trigger = yes }
		localisation_key = string_dominated_the_battlefield
	}
	text = {
		trigger = { is_the_best_duelist_trigger = yes }
		localisation_key = string_dominated_the_battlefield
	}

	fallback_text = {
		localisation_key = string_GetOnCombatDeathDesc_fallback
	}
}

# A way to describe an enemy soldier, degradingly.
defined_text = {
	name = GetEnemySoldierDesc

	text = {
		trigger = {
			trigger_if = {
				limit = { government = tribal_government }
				ROOT = { NOT = { government = tribal_government } }
			}
			trigger_else = {
				government = nomadic_government
				ROOT = { NOT = { government = nomadic_government } }
			}
		}
		localisation_key = string_barbarian
	}
	text = {
		trigger = {
			NOR = {
				AND = {
					government = tribal_government
					ROOT = { government = tribal_government }
				}
				AND = {
					government = nomadic_government
					ROOT = { government = nomadic_government }
				}
			}
		}
		localisation_key = string_pompous
	}
	text = {
		trigger = {
			ROOT = {
				duelist_skill_is_low_group_trigger = no
			}
		}
		localisation_key = string_haphazard
	}
	fallback_text = {
		localisation_key = string_villainous
	}
}


# A way to describe something your squad is becoming famous for
defined_text = {
	name = GetMilitarySquadPride

	text = {
		weight_multiplier = {
			factor = 10

			mult_modifier = {
				factor = 5
				trait = diligent
			}
			mult_modifier = {
				factor = 0.2
				trait = slothful
			}
		}
		localisation_key = string_attention_to_detail
	}
	text = {
		weight_multiplier = {
			factor = 10

			mult_modifier = {
				factor = 0.1
				is_dumb_trigger = yes
			}
			mult_modifier = {
				factor = 10
				trait = brilliant_strategist
			}
		}

		localisation_key = string_strategic_initiative
	}
	text = {
		weight_multiplier = {
			factor = 10

			mult_modifier = {
				factor = 5
				has_pleasant_personality_trigger = yes
			}
			mult_modifier = {
				factor = 0.1
				has_unpleasant_personality_trigger = yes
			}
		}
		trigger = {
			event_target:combatant_1 = {
				NOT = { has_character_flag = claim_duel@event_target:combatant_2 }
			}
		}
		localisation_key = string_camaraderie
	}
	text = {
		weight_multiplier = {
			factor = 10

			mult_modifier = {
				factor = 1.2
				trait = arbitrary
			}
			mult_modifier = {
				factor = 10
				trait = lunatic
			}
			mult_modifier = {
				factor = 10
				trait = possessed
			}
		}
		localisation_key = string_unconventional_tactics
	}
	text = {
		weight_multiplier = {
			factor = 10

			mult_modifier = {
				factor = 2
				has_lifestyle_martial_trigger = yes
			}
			mult_modifier = {
				factor = 10
				trait = diligent
			}
		}
		trigger = { NOT = { trait = arbitrary } }
		localisation_key = string_consistency
	}
	fallback_text = {
		localisation_key = string_camaraderie
	}
}

# A way to describe your means of travel, as a soldier
defined_text = {
	name = GetRidingMarching

	text = {
		weight_multiplier = {
			factor = 10

			mult_modifier = {
				factor = 20
				government = nomadic_government
			}
			mult_modifier = {
				factor = 20
				religion_openly_tengri_or_reformed_trigger = yes
			}
			mult_modifier = {
				factor = 20
				has_character_modifier = nomad_warhorse
			}
		}
		localisation_key = string_riding
	}
	text = {
		weight_multiplier = {
			factor = 10
		}
		localisation_key = string_marching
	}
	fallback_text = {
		localisation_key = string_marching
	}
}

#Fetches the name of your warhorse (set in old HL-event)
defined_text = {
	name = GetWarhorseName
	use_first_valid = yes

	text = {
		trigger = { has_character_flag = nomad_warhorse_name_lightning }
		localisation_key = string_Lightning
	}
	text = {
		trigger = { has_character_flag = nomad_warhorse_name_sky }
		localisation_key = string_Sky
	}
	text = {
		trigger = { has_character_flag = nomad_warhorse_name_dragon }
		localisation_key = string_Dragon
	}
	text = {
		trigger = { has_character_flag = nomad_warhorse_name_arrow }
		localisation_key = string_Arrow
	}
	fallback_text = {
		localisation_key = string_Lightning
	}
}

defined_text = {
	name = GetDuelTitle
	use_first_valid = yes

	text = {
		localisation_key = string_claim_duel
		trigger = {
			event_target:combatant_1 = {
				has_character_flag = claim_duel@event_target:combatant_2
			}
		}
	}
	text = {
		localisation_key = string_duel_in_on_the_terrain
		trigger = {
			has_character_flag = is_battlefield_duel
			NOR = {
				has_character_flag = fighting_to_rank_up
				has_character_flag = is_legendary_duel
			}
		}
	}
	text = {
		localisation_key = string_heroic_duel
		trigger = {
			has_character_flag = fighting_to_rank_up
			NOR = {
				has_character_flag = is_battlefield_duel
				has_character_flag = is_legendary_duel
			}
		}
	}
	text = {
		localisation_key = string_legendary_duel
		trigger = {
			has_character_flag = is_legendary_duel
			NOR = {
				has_character_flag = is_battlefield_duel
				has_character_flag = fighting_to_rank_up
			}
		}
	}
	fallback_text = {
		localisation_key = duel_title
	}
}

defined_text = {
	name = GetDuelOptionAvailable

	text = {
		localisation_key = string_available_due_to_duelist_skill_better_than_enemy
		trigger = {
			event_target:enemy_commander = {
				duelist_skill_compared_to_prev_low_group_trigger = yes
			}
		}
	}
	fallback_text = {
		localisation_key = string_available_due_to_high_duelist_skill
	}
}

defined_text = {
	name = GetDaringDuelOptionAvailable

	text = {
		localisation_key = string_available_due_to_duelist_skill_worse_than_enemy
		trigger = {
			event_target:enemy_commander = {
				duelist_skill_compared_to_prev_high_group_trigger = yes
			}
		}
	}
	fallback_text = {
		localisation_key = string_available_due_to_low_duelist_skill
	}
}

# Used in battle event where someone steps in to save a fellow commander (HFP.11041)
defined_text = {
	name = GetBattleRescueDesc

	text = {
		trigger = { has_character_flag = won_battlefield_duel }
		localisation_key = string_good_rescue
	}
	text = {
		trigger = { has_character_flag = won_battlefield_duel }
		localisation_key = string_cool_rescue
	}
	text = {
		trigger = {
			is_alive = yes
			event_target:enemy_commander = { # If home commander is a worse dueler than enemy commander
				event_target:home_commander = { duelist_skill_compared_to_prev_low_group_trigger = yes }
			}
			event_target:enemy_commander = { # If home commander is a worse dueler than enemy commander
				duelist_skill_compared_to_prev_low_group_trigger = yes
			}
		}
		localisation_key = string_lucky_rescue
	}
	text = {
		trigger = { has_character_flag = lost_battlefield_duel }
		localisation_key = string_bad_rescue
	}
	text = {
		trigger = { is_alive = no }
		localisation_key = string_fatal_rescue
	}
	fallback_text = {
		localisation_key = string_good_rescue
	}
}

defined_text = {
	name = GetNegativeDuelSkillTerm

	text = {
		localisation_key = string_an_abysmal
		trigger = {
			event_target:combatant_1 = {
				combat_rating < -10
			}
		}
	}
	text = {
		localisation_key = string_a_very_poor
		trigger = {
			event_target:combatant_1 = {
				combat_rating >= -10
				combat_rating < 0
			}
		}
	}
	text = {
		localisation_key = string_a_poor
		trigger = {
			event_target:combatant_1 = {
				combat_rating >= 0
				combat_rating < 10
			}
		}
	}
	text = {
		localisation_key = string_a_lacking
		trigger = {
			event_target:combatant_1 = {
				combat_rating >= 10
				combat_rating < 20
			}
		}
	}
	text = {
		localisation_key = string_a_mediocre
		trigger = {
			event_target:combatant_1 = {
				combat_rating < 30
			}
		}
	}

	fallback_text = {
		localisation_key = string_a_mediocre
	}
}

defined_text = {
	name = GetHowWoundedDidIBecome
	use_first_valid = yes

	text = {
		localisation_key = string_severely_injured_notify
		trigger = {
			has_character_flag = severely_injured
		}
	}
	text = {
		localisation_key = string_wounded_notify
		trigger = {
			has_character_flag = notify_mild_injury
		}
	}

	fallback_text = {
		localisation_key = string_unscathed_notify
	}
}

defined_text = {
	name = GetMyOpinionOfYourChoice
	use_first_valid = yes

	text = {
		localisation_key = string_appreciated_choice
		trigger = { has_character_flag = appreciated_duel }
	}
	text = {
		localisation_key = string_thought_choice_beneath_me
		trigger = { has_character_flag = beneath_me_duel }
	}
	text = {
		localisation_key = string_feared_for_life
		trigger = { has_character_flag = feared_for_life_duel }
	}
	text = {
		localisation_key = string_poor_choice
		trigger = { has_character_flag = poor_choice_duel }
	}

	fallback_text = {
		localisation_key = string_appreciated_choice
	}
}

defined_text = {
	name = GetEducationReaction
	use_first_valid = yes

	text = {
		localisation_key = String_strapped_on_their_weapon
		trigger = { has_education_martial_trigger = yes }
	}
	text = {
		localisation_key = String_sent_for_diplomatic_advice
		trigger = { has_education_diplomacy_trigger = yes }
	}
	text = {
		localisation_key = String_slammed_their_ledgers_shut
		trigger = { has_education_stewardship_trigger = yes }
	}
	text = {
		localisation_key = String_twirled_a_dagger_menacingly
		trigger = { has_education_intrigue_trigger = yes }
	}
	text = {
		localisation_key = String_ordered_scribes_be_present
		trigger = { has_education_learning_trigger = yes }
	}
}


defined_text = {
	name = GetPoisonDefense

	text = {
		localisation_key = String_spymaster_averted_it
		trigger = {
			intrigue < ROOT

			job_spymaster = {
				opinion = { # If they like their employer
					who = PREV
					value >= 25
				}
				intrigue >= ROOT # and they can match your intrigue
			}
		}
	}
	text = {
		localisation_key = String_they_averted_it_themselves
		trigger = { intrigue >= ROOT }
	}
	fallback_text = {
		localisation_key = String_they_lucked_out
	}
}

defined_text = {
	name = GetPoisonForgiveness

	text = {
		localisation_key = String_spymaster_saw_through_it
		trigger = {
			intrigue < ROOT

			job_spymaster = {
				opinion = { # If they like their employer
					who = PREV
					value >= 25
				}
				intrigue >= ROOT # and they can match your intrigue
			}
		}
	}
	text = {
		localisation_key = String_they_saw_through_it_themselves
		trigger = {
			intrigue = ROOT
		}
	}
	fallback_text = {
		localisation_key = String_you_messed_up
	}
}

defined_text = {
	name = GetPoisonSpeculation

	text = {
		localisation_key = String_imbecile_speculation
		trigger = {
			OR = {
				trait = imbecile
				trait = slow
				trait = lunatic
			}
		}
	}
	text = {
		localisation_key = String_smart_speculation
		trigger = {
			OR = {
				intrigue >= 10
				is_smart_trigger = yes
			}
			is_dumb_trigger = no
		}
	}
	text = {
		localisation_key = String_gardener_speculation
		trigger = { trait = gardener }
	}
	fallback_text = {
		localisation_key = String_default_speculation
	}
}

defined_text = {
	name = GetSeverityOfInjury

	text = {
		localisation_key = String_it_is_mild_A
		trigger = {
			has_character_flag = mildly_injured # bruises and stuff
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_mild_B
		trigger = {
			has_character_flag = mildly_injured # bruises and stuff
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_bad_A
		trigger = {
			has_character_flag = severely_injured # only adds "Severely Injured"-trait
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_bad_B
		trigger = {
			has_character_flag = severely_injured # only adds "Severely Injured"-trait
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_very_bad_A
		trigger = {
			has_character_flag = actually_injured
			NOR = {
				has_character_flag = mildly_injured
				has_character_flag = severely_injured
				has_character_flag = injury_kills
			}
		}
	}
	text = {
		localisation_key = String_it_is_very_bad_B
		trigger = {
			has_character_flag = actually_injured
			NOR = {
				has_character_flag = mildly_injured
				has_character_flag = severely_injured
				has_character_flag = injury_kills
			}
		}
	}
	text = {
		localisation_key = String_it_is_lethal
		trigger = {
			has_character_flag = injury_kills # means you have like.. *All* the other injuries you could have
			has_character_flag = actually_injured
		}
	}
	fallback_text = {
		localisation_key = String_it_is_bad_A
	}
}

defined_text = {
	name = GetDuelistRelationOrInsult
	use_first_valid = yes

	text = {
		localisation_key = String_get_root_relation
		trigger = {
			OR = {
				is_close_relative = ROOT
				liege = { character = ROOT }
				AND = {
					dynasty = ROOT
					NOT = { dynasty = none }
				}
			}
		}
	}
	text = {
		localisation_key = String_title_rank
		trigger = {
			is_landed = yes
			lower_real_tier_than = ROOT
		}
	}
	fallback_text = {
		localisation_key = String_mild_insult
	}
}

defined_text = {
	name = GetSeverityOfInjuryCap

	text = {
		localisation_key = String_it_is_mild_A_cap
		trigger = {
			has_character_flag = mildly_injured # bruises and stuff
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_mild_B_cap
		trigger = {
			has_character_flag = mildly_injured # bruises and stuff
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_bad_A_cap
		trigger = {
			has_character_flag = severely_injured # only adds "Severely Injured"-trait
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_bad_B_cap
		trigger = {
			has_character_flag = severely_injured # only adds "Severely Injured"-trait
			NOT = { has_character_flag = injury_kills }
		}
	}
	text = {
		localisation_key = String_it_is_very_bad_A_cap
		trigger = {
			has_character_flag = actually_injured
			NOR = {
				has_character_flag = mildly_injured
				has_character_flag = severely_injured
				has_character_flag = injury_kills
			}
		}
	}
	text = {
		localisation_key = String_it_is_very_bad_B_cap
		trigger = {
			has_character_flag = actually_injured
			NOR = {
				has_character_flag = mildly_injured
				has_character_flag = severely_injured
				has_character_flag = injury_kills
			}
		}
	}
	text = {
		localisation_key = String_it_is_lethal_cap
		trigger = {
			has_character_flag = injury_kills # means you have like.. *All* the other injures you could have
			has_character_flag = actually_injured
		}
	}
	fallback_text = {
		localisation_key = String_it_is_bad_A_cap
	}
}

defined_text = {
	name = GetDuelScene
	use_first_valid = yes

	text = {
		localisation_key = string_the_forest # Someone is hunting! Aha!
		trigger = { has_character_flag = WL_desc_A }
	}
	text = {
		localisation_key = string_camp # Outside the campfire, someone is tending to nature's call
		trigger = { has_character_flag = WL_desc_B }
	}
	text = {
		localisation_key = string_village_streets # In the streets of a village, accosted by locals
		trigger = { has_character_flag = WL_desc_C }
	}
	text = {
		localisation_key = string_moonlit_camp # A moonlit night, listening to companion snoring, sneaky assassin?
		trigger = { has_character_flag = WL_desc_D }
	}
	text = {
		localisation_key = string_city_streets # Urchin tips you off, pointing you to finest warrior around
		trigger = { has_character_flag = WL_desc_E }
	}

	fallback_text = {
		localisation_key = string_the_hills
	}
}

defined_text = {
	name = GetWeaponDescriptionPositive

	text = {
		localisation_key = string_comfortable_weapon
	}
	text = {
		localisation_key = string_shiny_weapon
	}
	text = {
		localisation_key = string_extension_of_self
	}
	text = {
		localisation_key = string_ugly_weapon
		trigger = { lower_real_tier_than = EMPEROR }
	}
}

defined_text = {
	name = GetWeaponDescriptionNegative

	text = {
		localisation_key = string_heavy_weapon
	}
	text = {
		localisation_key = string_fancy_weapon
	}
}

defined_text = {
	name = GetBeforeDuelDescription1

	text = {
		localisation_key = string_the_ground
	}
	text = {
		localisation_key = string_the_wind
	}
	text = {
		localisation_key = string_my_opponents_eyes
		trigger = {
			event_target:other_combatant = {
				NOR = {
					trait = blinded
					trait = one_eyed
				}
			}
		}
	}
	text = {
		localisation_key = string_the_crowd
	}
}

defined_text = {
	name = GetDuelMovement1

	text = {
		localisation_key = string_moved_suddenly
	}
	text = {
		localisation_key = string_moved_carefully
	}
	text = {
		localisation_key = string_moved_aggressively
	}
	text = {
		localisation_key = string_moved_gracefully
	}
	text = {
		localisation_key = string_moved_purposefully
	}
}

defined_text = {
	name = GetDuringDuelDescription1

	text = {
		localisation_key = string_single_strike
	}
	text = {
		localisation_key = string_parry_and_strike
	}
	text = {
		localisation_key = string_whirlwind
	}
}

defined_text = {
	name = GetAfterDuelDescription1

	text = {
		localisation_key = string_clean_weapon
	}
	text = {
		localisation_key = string_leave_them_on_ground
	}
	text = {
		localisation_key = string_victory_shout
	}
	text = {
		localisation_key = string_clean_face
	}
}

defined_text = {
	name = GetDuringDuelDescription2

	text = {
		localisation_key = string_on_ground
	}
	text = {
		localisation_key = string_holding_wound
	}
	text = {
		localisation_key = string_trying_not_to_cry
	}
}